// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/xrayconfig"
	"github.com/tools4net/ezfw/backend/internal/models"
)

// XrayConfigCreate is the builder for creating a XrayConfig entity.
type XrayConfigCreate struct {
	config
	mutation *XrayConfigMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (xcc *XrayConfigCreate) SetName(s string) *XrayConfigCreate {
	xcc.mutation.SetName(s)
	return xcc
}

// SetDescription sets the "description" field.
func (xcc *XrayConfigCreate) SetDescription(s string) *XrayConfigCreate {
	xcc.mutation.SetDescription(s)
	return xcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (xcc *XrayConfigCreate) SetNillableDescription(s *string) *XrayConfigCreate {
	if s != nil {
		xcc.SetDescription(*s)
	}
	return xcc
}

// SetCreatedAt sets the "created_at" field.
func (xcc *XrayConfigCreate) SetCreatedAt(t time.Time) *XrayConfigCreate {
	xcc.mutation.SetCreatedAt(t)
	return xcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (xcc *XrayConfigCreate) SetNillableCreatedAt(t *time.Time) *XrayConfigCreate {
	if t != nil {
		xcc.SetCreatedAt(*t)
	}
	return xcc
}

// SetUpdatedAt sets the "updated_at" field.
func (xcc *XrayConfigCreate) SetUpdatedAt(t time.Time) *XrayConfigCreate {
	xcc.mutation.SetUpdatedAt(t)
	return xcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (xcc *XrayConfigCreate) SetNillableUpdatedAt(t *time.Time) *XrayConfigCreate {
	if t != nil {
		xcc.SetUpdatedAt(*t)
	}
	return xcc
}

// SetLog sets the "log" field.
func (xcc *XrayConfigCreate) SetLog(mo *models.LogObject) *XrayConfigCreate {
	xcc.mutation.SetLog(mo)
	return xcc
}

// SetAPI sets the "api" field.
func (xcc *XrayConfigCreate) SetAPI(mo *models.APIObject) *XrayConfigCreate {
	xcc.mutation.SetAPI(mo)
	return xcc
}

// SetDNS sets the "dns" field.
func (xcc *XrayConfigCreate) SetDNS(mo *models.DNSObject) *XrayConfigCreate {
	xcc.mutation.SetDNS(mo)
	return xcc
}

// SetRouting sets the "routing" field.
func (xcc *XrayConfigCreate) SetRouting(mo *models.RoutingObject) *XrayConfigCreate {
	xcc.mutation.SetRouting(mo)
	return xcc
}

// SetPolicy sets the "policy" field.
func (xcc *XrayConfigCreate) SetPolicy(mo *models.PolicyObject) *XrayConfigCreate {
	xcc.mutation.SetPolicy(mo)
	return xcc
}

// SetInbounds sets the "inbounds" field.
func (xcc *XrayConfigCreate) SetInbounds(mo []models.InboundObject) *XrayConfigCreate {
	xcc.mutation.SetInbounds(mo)
	return xcc
}

// SetOutbounds sets the "outbounds" field.
func (xcc *XrayConfigCreate) SetOutbounds(mo []models.OutboundObject) *XrayConfigCreate {
	xcc.mutation.SetOutbounds(mo)
	return xcc
}

// SetTransport sets the "transport" field.
func (xcc *XrayConfigCreate) SetTransport(mo *models.TransportObject) *XrayConfigCreate {
	xcc.mutation.SetTransport(mo)
	return xcc
}

// SetStats sets the "stats" field.
func (xcc *XrayConfigCreate) SetStats(mo *models.StatsObject) *XrayConfigCreate {
	xcc.mutation.SetStats(mo)
	return xcc
}

// SetReverse sets the "reverse" field.
func (xcc *XrayConfigCreate) SetReverse(mo *models.ReverseObject) *XrayConfigCreate {
	xcc.mutation.SetReverse(mo)
	return xcc
}

// SetFakedns sets the "fakedns" field.
func (xcc *XrayConfigCreate) SetFakedns(mdo *models.FakeDNSObject) *XrayConfigCreate {
	xcc.mutation.SetFakedns(mdo)
	return xcc
}

// SetMetrics sets the "metrics" field.
func (xcc *XrayConfigCreate) SetMetrics(mo *models.MetricsObject) *XrayConfigCreate {
	xcc.mutation.SetMetrics(mo)
	return xcc
}

// SetObservatory sets the "observatory" field.
func (xcc *XrayConfigCreate) SetObservatory(mo *models.ObservatoryObject) *XrayConfigCreate {
	xcc.mutation.SetObservatory(mo)
	return xcc
}

// SetBurstObservatory sets the "burst_observatory" field.
func (xcc *XrayConfigCreate) SetBurstObservatory(moo *models.BurstObservatoryObject) *XrayConfigCreate {
	xcc.mutation.SetBurstObservatory(moo)
	return xcc
}

// SetServices sets the "services" field.
func (xcc *XrayConfigCreate) SetServices(m map[string]interface{}) *XrayConfigCreate {
	xcc.mutation.SetServices(m)
	return xcc
}

// SetID sets the "id" field.
func (xcc *XrayConfigCreate) SetID(s string) *XrayConfigCreate {
	xcc.mutation.SetID(s)
	return xcc
}

// Mutation returns the XrayConfigMutation object of the builder.
func (xcc *XrayConfigCreate) Mutation() *XrayConfigMutation {
	return xcc.mutation
}

// Save creates the XrayConfig in the database.
func (xcc *XrayConfigCreate) Save(ctx context.Context) (*XrayConfig, error) {
	xcc.defaults()
	return withHooks(ctx, xcc.sqlSave, xcc.mutation, xcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (xcc *XrayConfigCreate) SaveX(ctx context.Context) *XrayConfig {
	v, err := xcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xcc *XrayConfigCreate) Exec(ctx context.Context) error {
	_, err := xcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xcc *XrayConfigCreate) ExecX(ctx context.Context) {
	if err := xcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xcc *XrayConfigCreate) defaults() {
	if _, ok := xcc.mutation.CreatedAt(); !ok {
		v := xrayconfig.DefaultCreatedAt()
		xcc.mutation.SetCreatedAt(v)
	}
	if _, ok := xcc.mutation.UpdatedAt(); !ok {
		v := xrayconfig.DefaultUpdatedAt()
		xcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (xcc *XrayConfigCreate) check() error {
	if _, ok := xcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "XrayConfig.name"`)}
	}
	if v, ok := xcc.mutation.Name(); ok {
		if err := xrayconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "XrayConfig.name": %w`, err)}
		}
	}
	if _, ok := xcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "XrayConfig.created_at"`)}
	}
	if _, ok := xcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "XrayConfig.updated_at"`)}
	}
	return nil
}

func (xcc *XrayConfigCreate) sqlSave(ctx context.Context) (*XrayConfig, error) {
	if err := xcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := xcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, xcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected XrayConfig.ID type: %T", _spec.ID.Value)
		}
	}
	xcc.mutation.id = &_node.ID
	xcc.mutation.done = true
	return _node, nil
}

func (xcc *XrayConfigCreate) createSpec() (*XrayConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &XrayConfig{config: xcc.config}
		_spec = sqlgraph.NewCreateSpec(xrayconfig.Table, sqlgraph.NewFieldSpec(xrayconfig.FieldID, field.TypeString))
	)
	if id, ok := xcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := xcc.mutation.Name(); ok {
		_spec.SetField(xrayconfig.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := xcc.mutation.Description(); ok {
		_spec.SetField(xrayconfig.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := xcc.mutation.CreatedAt(); ok {
		_spec.SetField(xrayconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := xcc.mutation.UpdatedAt(); ok {
		_spec.SetField(xrayconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := xcc.mutation.Log(); ok {
		_spec.SetField(xrayconfig.FieldLog, field.TypeJSON, value)
		_node.Log = value
	}
	if value, ok := xcc.mutation.API(); ok {
		_spec.SetField(xrayconfig.FieldAPI, field.TypeJSON, value)
		_node.API = value
	}
	if value, ok := xcc.mutation.DNS(); ok {
		_spec.SetField(xrayconfig.FieldDNS, field.TypeJSON, value)
		_node.DNS = value
	}
	if value, ok := xcc.mutation.Routing(); ok {
		_spec.SetField(xrayconfig.FieldRouting, field.TypeJSON, value)
		_node.Routing = value
	}
	if value, ok := xcc.mutation.Policy(); ok {
		_spec.SetField(xrayconfig.FieldPolicy, field.TypeJSON, value)
		_node.Policy = value
	}
	if value, ok := xcc.mutation.Inbounds(); ok {
		_spec.SetField(xrayconfig.FieldInbounds, field.TypeJSON, value)
		_node.Inbounds = value
	}
	if value, ok := xcc.mutation.Outbounds(); ok {
		_spec.SetField(xrayconfig.FieldOutbounds, field.TypeJSON, value)
		_node.Outbounds = value
	}
	if value, ok := xcc.mutation.Transport(); ok {
		_spec.SetField(xrayconfig.FieldTransport, field.TypeJSON, value)
		_node.Transport = value
	}
	if value, ok := xcc.mutation.Stats(); ok {
		_spec.SetField(xrayconfig.FieldStats, field.TypeJSON, value)
		_node.Stats = value
	}
	if value, ok := xcc.mutation.Reverse(); ok {
		_spec.SetField(xrayconfig.FieldReverse, field.TypeJSON, value)
		_node.Reverse = value
	}
	if value, ok := xcc.mutation.Fakedns(); ok {
		_spec.SetField(xrayconfig.FieldFakedns, field.TypeJSON, value)
		_node.Fakedns = value
	}
	if value, ok := xcc.mutation.Metrics(); ok {
		_spec.SetField(xrayconfig.FieldMetrics, field.TypeJSON, value)
		_node.Metrics = value
	}
	if value, ok := xcc.mutation.Observatory(); ok {
		_spec.SetField(xrayconfig.FieldObservatory, field.TypeJSON, value)
		_node.Observatory = value
	}
	if value, ok := xcc.mutation.BurstObservatory(); ok {
		_spec.SetField(xrayconfig.FieldBurstObservatory, field.TypeJSON, value)
		_node.BurstObservatory = value
	}
	if value, ok := xcc.mutation.Services(); ok {
		_spec.SetField(xrayconfig.FieldServices, field.TypeJSON, value)
		_node.Services = value
	}
	return _node, _spec
}

// XrayConfigCreateBulk is the builder for creating many XrayConfig entities in bulk.
type XrayConfigCreateBulk struct {
	config
	err      error
	builders []*XrayConfigCreate
}

// Save creates the XrayConfig entities in the database.
func (xccb *XrayConfigCreateBulk) Save(ctx context.Context) ([]*XrayConfig, error) {
	if xccb.err != nil {
		return nil, xccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(xccb.builders))
	nodes := make([]*XrayConfig, len(xccb.builders))
	mutators := make([]Mutator, len(xccb.builders))
	for i := range xccb.builders {
		func(i int, root context.Context) {
			builder := xccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*XrayConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, xccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, xccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, xccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (xccb *XrayConfigCreateBulk) SaveX(ctx context.Context) []*XrayConfig {
	v, err := xccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xccb *XrayConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := xccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xccb *XrayConfigCreateBulk) ExecX(ctx context.Context) {
	if err := xccb.Exec(ctx); err != nil {
		panic(err)
	}
}
