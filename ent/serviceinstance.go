// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tools4net/ezfw/backend/ent/node"
	"github.com/tools4net/ezfw/backend/ent/serviceinstance"
)

// ServiceInstance is the model entity for the ServiceInstance schema.
type ServiceInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// NodeID holds the value of the "node_id" field.
	NodeID string `json:"node_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ServiceType holds the value of the "service_type" field.
	ServiceType string `json:"service_type,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Port holds the value of the "port" field.
	Port int `json:"port,omitempty"`
	// Protocol holds the value of the "protocol" field.
	Protocol string `json:"protocol,omitempty"`
	// Config holds the value of the "config" field.
	Config map[string]interface{} `json:"config,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// LastSeen holds the value of the "last_seen" field.
	LastSeen *time.Time `json:"last_seen,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceInstanceQuery when eager-loading is set.
	Edges        ServiceInstanceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServiceInstanceEdges holds the relations/edges for other nodes in the graph.
type ServiceInstanceEdges struct {
	// Node holds the value of the node edge.
	Node *Node `json:"node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NodeOrErr returns the Node value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceInstanceEdges) NodeOrErr() (*Node, error) {
	if e.Node != nil {
		return e.Node, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: node.Label}
	}
	return nil, &NotLoadedError{edge: "node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceInstance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceinstance.FieldConfig, serviceinstance.FieldTags:
			values[i] = new([]byte)
		case serviceinstance.FieldPort:
			values[i] = new(sql.NullInt64)
		case serviceinstance.FieldID, serviceinstance.FieldNodeID, serviceinstance.FieldName, serviceinstance.FieldDescription, serviceinstance.FieldServiceType, serviceinstance.FieldStatus, serviceinstance.FieldProtocol:
			values[i] = new(sql.NullString)
		case serviceinstance.FieldCreatedAt, serviceinstance.FieldUpdatedAt, serviceinstance.FieldLastSeen:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceInstance fields.
func (si *ServiceInstance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceinstance.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				si.ID = value.String
			}
		case serviceinstance.FieldNodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value.Valid {
				si.NodeID = value.String
			}
		case serviceinstance.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				si.Name = value.String
			}
		case serviceinstance.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				si.Description = value.String
			}
		case serviceinstance.FieldServiceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_type", values[i])
			} else if value.Valid {
				si.ServiceType = value.String
			}
		case serviceinstance.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				si.Status = value.String
			}
		case serviceinstance.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				si.Port = int(value.Int64)
			}
		case serviceinstance.FieldProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				si.Protocol = value.String
			}
		case serviceinstance.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &si.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case serviceinstance.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &si.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case serviceinstance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				si.CreatedAt = value.Time
			}
		case serviceinstance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				si.UpdatedAt = value.Time
			}
		case serviceinstance.FieldLastSeen:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_seen", values[i])
			} else if value.Valid {
				si.LastSeen = new(time.Time)
				*si.LastSeen = value.Time
			}
		default:
			si.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceInstance.
// This includes values selected through modifiers, order, etc.
func (si *ServiceInstance) Value(name string) (ent.Value, error) {
	return si.selectValues.Get(name)
}

// QueryNode queries the "node" edge of the ServiceInstance entity.
func (si *ServiceInstance) QueryNode() *NodeQuery {
	return NewServiceInstanceClient(si.config).QueryNode(si)
}

// Update returns a builder for updating this ServiceInstance.
// Note that you need to call ServiceInstance.Unwrap() before calling this method if this ServiceInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (si *ServiceInstance) Update() *ServiceInstanceUpdateOne {
	return NewServiceInstanceClient(si.config).UpdateOne(si)
}

// Unwrap unwraps the ServiceInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (si *ServiceInstance) Unwrap() *ServiceInstance {
	_tx, ok := si.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceInstance is not a transactional entity")
	}
	si.config.driver = _tx.drv
	return si
}

// String implements the fmt.Stringer.
func (si *ServiceInstance) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceInstance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", si.ID))
	builder.WriteString("node_id=")
	builder.WriteString(si.NodeID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(si.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(si.Description)
	builder.WriteString(", ")
	builder.WriteString("service_type=")
	builder.WriteString(si.ServiceType)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(si.Status)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(fmt.Sprintf("%v", si.Port))
	builder.WriteString(", ")
	builder.WriteString("protocol=")
	builder.WriteString(si.Protocol)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", si.Config))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", si.Tags))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(si.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(si.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := si.LastSeen; v != nil {
		builder.WriteString("last_seen=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ServiceInstances is a parsable slice of ServiceInstance.
type ServiceInstances []*ServiceInstance
