// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/node"
	"github.com/tools4net/ezfw/backend/ent/serviceinstance"
)

// ServiceInstanceCreate is the builder for creating a ServiceInstance entity.
type ServiceInstanceCreate struct {
	config
	mutation *ServiceInstanceMutation
	hooks    []Hook
}

// SetNodeID sets the "node_id" field.
func (sic *ServiceInstanceCreate) SetNodeID(s string) *ServiceInstanceCreate {
	sic.mutation.SetNodeID(s)
	return sic
}

// SetName sets the "name" field.
func (sic *ServiceInstanceCreate) SetName(s string) *ServiceInstanceCreate {
	sic.mutation.SetName(s)
	return sic
}

// SetDescription sets the "description" field.
func (sic *ServiceInstanceCreate) SetDescription(s string) *ServiceInstanceCreate {
	sic.mutation.SetDescription(s)
	return sic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sic *ServiceInstanceCreate) SetNillableDescription(s *string) *ServiceInstanceCreate {
	if s != nil {
		sic.SetDescription(*s)
	}
	return sic
}

// SetServiceType sets the "service_type" field.
func (sic *ServiceInstanceCreate) SetServiceType(s string) *ServiceInstanceCreate {
	sic.mutation.SetServiceType(s)
	return sic
}

// SetStatus sets the "status" field.
func (sic *ServiceInstanceCreate) SetStatus(s string) *ServiceInstanceCreate {
	sic.mutation.SetStatus(s)
	return sic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sic *ServiceInstanceCreate) SetNillableStatus(s *string) *ServiceInstanceCreate {
	if s != nil {
		sic.SetStatus(*s)
	}
	return sic
}

// SetPort sets the "port" field.
func (sic *ServiceInstanceCreate) SetPort(i int) *ServiceInstanceCreate {
	sic.mutation.SetPort(i)
	return sic
}

// SetProtocol sets the "protocol" field.
func (sic *ServiceInstanceCreate) SetProtocol(s string) *ServiceInstanceCreate {
	sic.mutation.SetProtocol(s)
	return sic
}

// SetConfig sets the "config" field.
func (sic *ServiceInstanceCreate) SetConfig(m map[string]interface{}) *ServiceInstanceCreate {
	sic.mutation.SetConfig(m)
	return sic
}

// SetTags sets the "tags" field.
func (sic *ServiceInstanceCreate) SetTags(s []string) *ServiceInstanceCreate {
	sic.mutation.SetTags(s)
	return sic
}

// SetCreatedAt sets the "created_at" field.
func (sic *ServiceInstanceCreate) SetCreatedAt(t time.Time) *ServiceInstanceCreate {
	sic.mutation.SetCreatedAt(t)
	return sic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sic *ServiceInstanceCreate) SetNillableCreatedAt(t *time.Time) *ServiceInstanceCreate {
	if t != nil {
		sic.SetCreatedAt(*t)
	}
	return sic
}

// SetUpdatedAt sets the "updated_at" field.
func (sic *ServiceInstanceCreate) SetUpdatedAt(t time.Time) *ServiceInstanceCreate {
	sic.mutation.SetUpdatedAt(t)
	return sic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sic *ServiceInstanceCreate) SetNillableUpdatedAt(t *time.Time) *ServiceInstanceCreate {
	if t != nil {
		sic.SetUpdatedAt(*t)
	}
	return sic
}

// SetLastSeen sets the "last_seen" field.
func (sic *ServiceInstanceCreate) SetLastSeen(t time.Time) *ServiceInstanceCreate {
	sic.mutation.SetLastSeen(t)
	return sic
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (sic *ServiceInstanceCreate) SetNillableLastSeen(t *time.Time) *ServiceInstanceCreate {
	if t != nil {
		sic.SetLastSeen(*t)
	}
	return sic
}

// SetID sets the "id" field.
func (sic *ServiceInstanceCreate) SetID(s string) *ServiceInstanceCreate {
	sic.mutation.SetID(s)
	return sic
}

// SetNode sets the "node" edge to the Node entity.
func (sic *ServiceInstanceCreate) SetNode(n *Node) *ServiceInstanceCreate {
	return sic.SetNodeID(n.ID)
}

// Mutation returns the ServiceInstanceMutation object of the builder.
func (sic *ServiceInstanceCreate) Mutation() *ServiceInstanceMutation {
	return sic.mutation
}

// Save creates the ServiceInstance in the database.
func (sic *ServiceInstanceCreate) Save(ctx context.Context) (*ServiceInstance, error) {
	sic.defaults()
	return withHooks(ctx, sic.sqlSave, sic.mutation, sic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sic *ServiceInstanceCreate) SaveX(ctx context.Context) *ServiceInstance {
	v, err := sic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sic *ServiceInstanceCreate) Exec(ctx context.Context) error {
	_, err := sic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sic *ServiceInstanceCreate) ExecX(ctx context.Context) {
	if err := sic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sic *ServiceInstanceCreate) defaults() {
	if _, ok := sic.mutation.Status(); !ok {
		v := serviceinstance.DefaultStatus
		sic.mutation.SetStatus(v)
	}
	if _, ok := sic.mutation.CreatedAt(); !ok {
		v := serviceinstance.DefaultCreatedAt()
		sic.mutation.SetCreatedAt(v)
	}
	if _, ok := sic.mutation.UpdatedAt(); !ok {
		v := serviceinstance.DefaultUpdatedAt()
		sic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sic *ServiceInstanceCreate) check() error {
	if _, ok := sic.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`ent: missing required field "ServiceInstance.node_id"`)}
	}
	if v, ok := sic.mutation.NodeID(); ok {
		if err := serviceinstance.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.node_id": %w`, err)}
		}
	}
	if _, ok := sic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ServiceInstance.name"`)}
	}
	if v, ok := sic.mutation.Name(); ok {
		if err := serviceinstance.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.name": %w`, err)}
		}
	}
	if _, ok := sic.mutation.ServiceType(); !ok {
		return &ValidationError{Name: "service_type", err: errors.New(`ent: missing required field "ServiceInstance.service_type"`)}
	}
	if v, ok := sic.mutation.ServiceType(); ok {
		if err := serviceinstance.ServiceTypeValidator(v); err != nil {
			return &ValidationError{Name: "service_type", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.service_type": %w`, err)}
		}
	}
	if _, ok := sic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ServiceInstance.status"`)}
	}
	if _, ok := sic.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New(`ent: missing required field "ServiceInstance.port"`)}
	}
	if v, ok := sic.mutation.Port(); ok {
		if err := serviceinstance.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.port": %w`, err)}
		}
	}
	if _, ok := sic.mutation.Protocol(); !ok {
		return &ValidationError{Name: "protocol", err: errors.New(`ent: missing required field "ServiceInstance.protocol"`)}
	}
	if v, ok := sic.mutation.Protocol(); ok {
		if err := serviceinstance.ProtocolValidator(v); err != nil {
			return &ValidationError{Name: "protocol", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.protocol": %w`, err)}
		}
	}
	if _, ok := sic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ServiceInstance.created_at"`)}
	}
	if _, ok := sic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ServiceInstance.updated_at"`)}
	}
	if len(sic.mutation.NodeIDs()) == 0 {
		return &ValidationError{Name: "node", err: errors.New(`ent: missing required edge "ServiceInstance.node"`)}
	}
	return nil
}

func (sic *ServiceInstanceCreate) sqlSave(ctx context.Context) (*ServiceInstance, error) {
	if err := sic.check(); err != nil {
		return nil, err
	}
	_node, _spec := sic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ServiceInstance.ID type: %T", _spec.ID.Value)
		}
	}
	sic.mutation.id = &_node.ID
	sic.mutation.done = true
	return _node, nil
}

func (sic *ServiceInstanceCreate) createSpec() (*ServiceInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceInstance{config: sic.config}
		_spec = sqlgraph.NewCreateSpec(serviceinstance.Table, sqlgraph.NewFieldSpec(serviceinstance.FieldID, field.TypeString))
	)
	if id, ok := sic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sic.mutation.Name(); ok {
		_spec.SetField(serviceinstance.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sic.mutation.Description(); ok {
		_spec.SetField(serviceinstance.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sic.mutation.ServiceType(); ok {
		_spec.SetField(serviceinstance.FieldServiceType, field.TypeString, value)
		_node.ServiceType = value
	}
	if value, ok := sic.mutation.Status(); ok {
		_spec.SetField(serviceinstance.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := sic.mutation.Port(); ok {
		_spec.SetField(serviceinstance.FieldPort, field.TypeInt, value)
		_node.Port = value
	}
	if value, ok := sic.mutation.Protocol(); ok {
		_spec.SetField(serviceinstance.FieldProtocol, field.TypeString, value)
		_node.Protocol = value
	}
	if value, ok := sic.mutation.Config(); ok {
		_spec.SetField(serviceinstance.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	if value, ok := sic.mutation.Tags(); ok {
		_spec.SetField(serviceinstance.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := sic.mutation.CreatedAt(); ok {
		_spec.SetField(serviceinstance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sic.mutation.UpdatedAt(); ok {
		_spec.SetField(serviceinstance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sic.mutation.LastSeen(); ok {
		_spec.SetField(serviceinstance.FieldLastSeen, field.TypeTime, value)
		_node.LastSeen = &value
	}
	if nodes := sic.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceinstance.NodeTable,
			Columns: []string{serviceinstance.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NodeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServiceInstanceCreateBulk is the builder for creating many ServiceInstance entities in bulk.
type ServiceInstanceCreateBulk struct {
	config
	err      error
	builders []*ServiceInstanceCreate
}

// Save creates the ServiceInstance entities in the database.
func (sicb *ServiceInstanceCreateBulk) Save(ctx context.Context) ([]*ServiceInstance, error) {
	if sicb.err != nil {
		return nil, sicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sicb.builders))
	nodes := make([]*ServiceInstance, len(sicb.builders))
	mutators := make([]Mutator, len(sicb.builders))
	for i := range sicb.builders {
		func(i int, root context.Context) {
			builder := sicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sicb *ServiceInstanceCreateBulk) SaveX(ctx context.Context) []*ServiceInstance {
	v, err := sicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sicb *ServiceInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := sicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sicb *ServiceInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := sicb.Exec(ctx); err != nil {
		panic(err)
	}
}
