// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/agenttoken"
	"github.com/tools4net/ezfw/backend/ent/node"
	"github.com/tools4net/ezfw/backend/ent/predicate"
)

// AgentTokenUpdate is the builder for updating AgentToken entities.
type AgentTokenUpdate struct {
	config
	hooks    []Hook
	mutation *AgentTokenMutation
}

// Where appends a list predicates to the AgentTokenUpdate builder.
func (atu *AgentTokenUpdate) Where(ps ...predicate.AgentToken) *AgentTokenUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetNodeID sets the "node_id" field.
func (atu *AgentTokenUpdate) SetNodeID(s string) *AgentTokenUpdate {
	atu.mutation.SetNodeID(s)
	return atu
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (atu *AgentTokenUpdate) SetNillableNodeID(s *string) *AgentTokenUpdate {
	if s != nil {
		atu.SetNodeID(*s)
	}
	return atu
}

// SetToken sets the "token" field.
func (atu *AgentTokenUpdate) SetToken(s string) *AgentTokenUpdate {
	atu.mutation.SetToken(s)
	return atu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (atu *AgentTokenUpdate) SetNillableToken(s *string) *AgentTokenUpdate {
	if s != nil {
		atu.SetToken(*s)
	}
	return atu
}

// SetName sets the "name" field.
func (atu *AgentTokenUpdate) SetName(s string) *AgentTokenUpdate {
	atu.mutation.SetName(s)
	return atu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atu *AgentTokenUpdate) SetNillableName(s *string) *AgentTokenUpdate {
	if s != nil {
		atu.SetName(*s)
	}
	return atu
}

// SetStatus sets the "status" field.
func (atu *AgentTokenUpdate) SetStatus(s string) *AgentTokenUpdate {
	atu.mutation.SetStatus(s)
	return atu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atu *AgentTokenUpdate) SetNillableStatus(s *string) *AgentTokenUpdate {
	if s != nil {
		atu.SetStatus(*s)
	}
	return atu
}

// SetExpiresAt sets the "expires_at" field.
func (atu *AgentTokenUpdate) SetExpiresAt(t time.Time) *AgentTokenUpdate {
	atu.mutation.SetExpiresAt(t)
	return atu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (atu *AgentTokenUpdate) SetNillableExpiresAt(t *time.Time) *AgentTokenUpdate {
	if t != nil {
		atu.SetExpiresAt(*t)
	}
	return atu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (atu *AgentTokenUpdate) ClearExpiresAt() *AgentTokenUpdate {
	atu.mutation.ClearExpiresAt()
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *AgentTokenUpdate) SetUpdatedAt(t time.Time) *AgentTokenUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetLastUsed sets the "last_used" field.
func (atu *AgentTokenUpdate) SetLastUsed(t time.Time) *AgentTokenUpdate {
	atu.mutation.SetLastUsed(t)
	return atu
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (atu *AgentTokenUpdate) SetNillableLastUsed(t *time.Time) *AgentTokenUpdate {
	if t != nil {
		atu.SetLastUsed(*t)
	}
	return atu
}

// ClearLastUsed clears the value of the "last_used" field.
func (atu *AgentTokenUpdate) ClearLastUsed() *AgentTokenUpdate {
	atu.mutation.ClearLastUsed()
	return atu
}

// SetNode sets the "node" edge to the Node entity.
func (atu *AgentTokenUpdate) SetNode(n *Node) *AgentTokenUpdate {
	return atu.SetNodeID(n.ID)
}

// Mutation returns the AgentTokenMutation object of the builder.
func (atu *AgentTokenUpdate) Mutation() *AgentTokenMutation {
	return atu.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (atu *AgentTokenUpdate) ClearNode() *AgentTokenUpdate {
	atu.mutation.ClearNode()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AgentTokenUpdate) Save(ctx context.Context) (int, error) {
	atu.defaults()
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AgentTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AgentTokenUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AgentTokenUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *AgentTokenUpdate) defaults() {
	if _, ok := atu.mutation.UpdatedAt(); !ok {
		v := agenttoken.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *AgentTokenUpdate) check() error {
	if v, ok := atu.mutation.NodeID(); ok {
		if err := agenttoken.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`ent: validator failed for field "AgentToken.node_id": %w`, err)}
		}
	}
	if v, ok := atu.mutation.Token(); ok {
		if err := agenttoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "AgentToken.token": %w`, err)}
		}
	}
	if v, ok := atu.mutation.Name(); ok {
		if err := agenttoken.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AgentToken.name": %w`, err)}
		}
	}
	if atu.mutation.NodeCleared() && len(atu.mutation.NodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AgentToken.node"`)
	}
	return nil
}

func (atu *AgentTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(agenttoken.Table, agenttoken.Columns, sqlgraph.NewFieldSpec(agenttoken.FieldID, field.TypeString))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.Token(); ok {
		_spec.SetField(agenttoken.FieldToken, field.TypeString, value)
	}
	if value, ok := atu.mutation.Name(); ok {
		_spec.SetField(agenttoken.FieldName, field.TypeString, value)
	}
	if value, ok := atu.mutation.Status(); ok {
		_spec.SetField(agenttoken.FieldStatus, field.TypeString, value)
	}
	if value, ok := atu.mutation.ExpiresAt(); ok {
		_spec.SetField(agenttoken.FieldExpiresAt, field.TypeTime, value)
	}
	if atu.mutation.ExpiresAtCleared() {
		_spec.ClearField(agenttoken.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.SetField(agenttoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.LastUsed(); ok {
		_spec.SetField(agenttoken.FieldLastUsed, field.TypeTime, value)
	}
	if atu.mutation.LastUsedCleared() {
		_spec.ClearField(agenttoken.FieldLastUsed, field.TypeTime)
	}
	if atu.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agenttoken.NodeTable,
			Columns: []string{agenttoken.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agenttoken.NodeTable,
			Columns: []string{agenttoken.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agenttoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AgentTokenUpdateOne is the builder for updating a single AgentToken entity.
type AgentTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentTokenMutation
}

// SetNodeID sets the "node_id" field.
func (atuo *AgentTokenUpdateOne) SetNodeID(s string) *AgentTokenUpdateOne {
	atuo.mutation.SetNodeID(s)
	return atuo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (atuo *AgentTokenUpdateOne) SetNillableNodeID(s *string) *AgentTokenUpdateOne {
	if s != nil {
		atuo.SetNodeID(*s)
	}
	return atuo
}

// SetToken sets the "token" field.
func (atuo *AgentTokenUpdateOne) SetToken(s string) *AgentTokenUpdateOne {
	atuo.mutation.SetToken(s)
	return atuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (atuo *AgentTokenUpdateOne) SetNillableToken(s *string) *AgentTokenUpdateOne {
	if s != nil {
		atuo.SetToken(*s)
	}
	return atuo
}

// SetName sets the "name" field.
func (atuo *AgentTokenUpdateOne) SetName(s string) *AgentTokenUpdateOne {
	atuo.mutation.SetName(s)
	return atuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atuo *AgentTokenUpdateOne) SetNillableName(s *string) *AgentTokenUpdateOne {
	if s != nil {
		atuo.SetName(*s)
	}
	return atuo
}

// SetStatus sets the "status" field.
func (atuo *AgentTokenUpdateOne) SetStatus(s string) *AgentTokenUpdateOne {
	atuo.mutation.SetStatus(s)
	return atuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atuo *AgentTokenUpdateOne) SetNillableStatus(s *string) *AgentTokenUpdateOne {
	if s != nil {
		atuo.SetStatus(*s)
	}
	return atuo
}

// SetExpiresAt sets the "expires_at" field.
func (atuo *AgentTokenUpdateOne) SetExpiresAt(t time.Time) *AgentTokenUpdateOne {
	atuo.mutation.SetExpiresAt(t)
	return atuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (atuo *AgentTokenUpdateOne) SetNillableExpiresAt(t *time.Time) *AgentTokenUpdateOne {
	if t != nil {
		atuo.SetExpiresAt(*t)
	}
	return atuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (atuo *AgentTokenUpdateOne) ClearExpiresAt() *AgentTokenUpdateOne {
	atuo.mutation.ClearExpiresAt()
	return atuo
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *AgentTokenUpdateOne) SetUpdatedAt(t time.Time) *AgentTokenUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetLastUsed sets the "last_used" field.
func (atuo *AgentTokenUpdateOne) SetLastUsed(t time.Time) *AgentTokenUpdateOne {
	atuo.mutation.SetLastUsed(t)
	return atuo
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (atuo *AgentTokenUpdateOne) SetNillableLastUsed(t *time.Time) *AgentTokenUpdateOne {
	if t != nil {
		atuo.SetLastUsed(*t)
	}
	return atuo
}

// ClearLastUsed clears the value of the "last_used" field.
func (atuo *AgentTokenUpdateOne) ClearLastUsed() *AgentTokenUpdateOne {
	atuo.mutation.ClearLastUsed()
	return atuo
}

// SetNode sets the "node" edge to the Node entity.
func (atuo *AgentTokenUpdateOne) SetNode(n *Node) *AgentTokenUpdateOne {
	return atuo.SetNodeID(n.ID)
}

// Mutation returns the AgentTokenMutation object of the builder.
func (atuo *AgentTokenUpdateOne) Mutation() *AgentTokenMutation {
	return atuo.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (atuo *AgentTokenUpdateOne) ClearNode() *AgentTokenUpdateOne {
	atuo.mutation.ClearNode()
	return atuo
}

// Where appends a list predicates to the AgentTokenUpdate builder.
func (atuo *AgentTokenUpdateOne) Where(ps ...predicate.AgentToken) *AgentTokenUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AgentTokenUpdateOne) Select(field string, fields ...string) *AgentTokenUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AgentToken entity.
func (atuo *AgentTokenUpdateOne) Save(ctx context.Context) (*AgentToken, error) {
	atuo.defaults()
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AgentTokenUpdateOne) SaveX(ctx context.Context) *AgentToken {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AgentTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AgentTokenUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *AgentTokenUpdateOne) defaults() {
	if _, ok := atuo.mutation.UpdatedAt(); !ok {
		v := agenttoken.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *AgentTokenUpdateOne) check() error {
	if v, ok := atuo.mutation.NodeID(); ok {
		if err := agenttoken.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`ent: validator failed for field "AgentToken.node_id": %w`, err)}
		}
	}
	if v, ok := atuo.mutation.Token(); ok {
		if err := agenttoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "AgentToken.token": %w`, err)}
		}
	}
	if v, ok := atuo.mutation.Name(); ok {
		if err := agenttoken.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AgentToken.name": %w`, err)}
		}
	}
	if atuo.mutation.NodeCleared() && len(atuo.mutation.NodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AgentToken.node"`)
	}
	return nil
}

func (atuo *AgentTokenUpdateOne) sqlSave(ctx context.Context) (_node *AgentToken, err error) {
	if err := atuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agenttoken.Table, agenttoken.Columns, sqlgraph.NewFieldSpec(agenttoken.FieldID, field.TypeString))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AgentToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agenttoken.FieldID)
		for _, f := range fields {
			if !agenttoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agenttoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.Token(); ok {
		_spec.SetField(agenttoken.FieldToken, field.TypeString, value)
	}
	if value, ok := atuo.mutation.Name(); ok {
		_spec.SetField(agenttoken.FieldName, field.TypeString, value)
	}
	if value, ok := atuo.mutation.Status(); ok {
		_spec.SetField(agenttoken.FieldStatus, field.TypeString, value)
	}
	if value, ok := atuo.mutation.ExpiresAt(); ok {
		_spec.SetField(agenttoken.FieldExpiresAt, field.TypeTime, value)
	}
	if atuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(agenttoken.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.SetField(agenttoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.LastUsed(); ok {
		_spec.SetField(agenttoken.FieldLastUsed, field.TypeTime, value)
	}
	if atuo.mutation.LastUsedCleared() {
		_spec.ClearField(agenttoken.FieldLastUsed, field.TypeTime)
	}
	if atuo.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agenttoken.NodeTable,
			Columns: []string{agenttoken.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agenttoken.NodeTable,
			Columns: []string{agenttoken.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AgentToken{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agenttoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
