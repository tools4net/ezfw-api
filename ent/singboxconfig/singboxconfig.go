// Code generated by ent, DO NOT EDIT.

package singboxconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the singboxconfig type in the database.
	Label = "sing_box_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLogConfig holds the string denoting the log_config field in the database.
	FieldLogConfig = "log_config"
	// FieldDNSConfig holds the string denoting the dns_config field in the database.
	FieldDNSConfig = "dns_config"
	// FieldNtpConfig holds the string denoting the ntp_config field in the database.
	FieldNtpConfig = "ntp_config"
	// FieldInbounds holds the string denoting the inbounds field in the database.
	FieldInbounds = "inbounds"
	// FieldOutbounds holds the string denoting the outbounds field in the database.
	FieldOutbounds = "outbounds"
	// FieldRouteConfig holds the string denoting the route_config field in the database.
	FieldRouteConfig = "route_config"
	// FieldExperimentalConfig holds the string denoting the experimental_config field in the database.
	FieldExperimentalConfig = "experimental_config"
	// FieldEndpoints holds the string denoting the endpoints field in the database.
	FieldEndpoints = "endpoints"
	// FieldCertificateConfig holds the string denoting the certificate_config field in the database.
	FieldCertificateConfig = "certificate_config"
	// Table holds the table name of the singboxconfig in the database.
	Table = "sing_box_configs"
)

// Columns holds all SQL columns for singboxconfig fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldLogConfig,
	FieldDNSConfig,
	FieldNtpConfig,
	FieldInbounds,
	FieldOutbounds,
	FieldRouteConfig,
	FieldExperimentalConfig,
	FieldEndpoints,
	FieldCertificateConfig,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the SingBoxConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
