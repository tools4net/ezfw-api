// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/haproxyconfig"
	"github.com/tools4net/ezfw/backend/ent/predicate"
)

// HAProxyConfigDelete is the builder for deleting a HAProxyConfig entity.
type HAProxyConfigDelete struct {
	config
	hooks    []Hook
	mutation *HAProxyConfigMutation
}

// Where appends a list predicates to the HAProxyConfigDelete builder.
func (hpcd *HAProxyConfigDelete) Where(ps ...predicate.HAProxyConfig) *HAProxyConfigDelete {
	hpcd.mutation.Where(ps...)
	return hpcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hpcd *HAProxyConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, hpcd.sqlExec, hpcd.mutation, hpcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hpcd *HAProxyConfigDelete) ExecX(ctx context.Context) int {
	n, err := hpcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hpcd *HAProxyConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(haproxyconfig.Table, sqlgraph.NewFieldSpec(haproxyconfig.FieldID, field.TypeString))
	if ps := hpcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hpcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hpcd.mutation.done = true
	return affected, err
}

// HAProxyConfigDeleteOne is the builder for deleting a single HAProxyConfig entity.
type HAProxyConfigDeleteOne struct {
	hpcd *HAProxyConfigDelete
}

// Where appends a list predicates to the HAProxyConfigDelete builder.
func (hpcdo *HAProxyConfigDeleteOne) Where(ps ...predicate.HAProxyConfig) *HAProxyConfigDeleteOne {
	hpcdo.hpcd.mutation.Where(ps...)
	return hpcdo
}

// Exec executes the deletion query.
func (hpcdo *HAProxyConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := hpcdo.hpcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{haproxyconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hpcdo *HAProxyConfigDeleteOne) ExecX(ctx context.Context) {
	if err := hpcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
