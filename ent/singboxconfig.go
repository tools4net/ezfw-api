// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tools4net/ezfw/backend/ent/singboxconfig"
	"github.com/tools4net/ezfw/backend/internal/models"
)

// SingBoxConfig is the model entity for the SingBoxConfig schema.
type SingBoxConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// LogConfig holds the value of the "log_config" field.
	LogConfig *models.SingBoxLogConfig `json:"log_config,omitempty"`
	// DNSConfig holds the value of the "dns_config" field.
	DNSConfig *models.SingBoxDNSConfig `json:"dns_config,omitempty"`
	// NtpConfig holds the value of the "ntp_config" field.
	NtpConfig *models.SingBoxNTPConfig `json:"ntp_config,omitempty"`
	// Inbounds holds the value of the "inbounds" field.
	Inbounds []interface{} `json:"inbounds,omitempty"`
	// Outbounds holds the value of the "outbounds" field.
	Outbounds []interface{} `json:"outbounds,omitempty"`
	// RouteConfig holds the value of the "route_config" field.
	RouteConfig *models.SingBoxRouteConfig `json:"route_config,omitempty"`
	// ExperimentalConfig holds the value of the "experimental_config" field.
	ExperimentalConfig map[string]interface{} `json:"experimental_config,omitempty"`
	// Endpoints holds the value of the "endpoints" field.
	Endpoints []interface{} `json:"endpoints,omitempty"`
	// CertificateConfig holds the value of the "certificate_config" field.
	CertificateConfig map[string]interface{} `json:"certificate_config,omitempty"`
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SingBoxConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case singboxconfig.FieldLogConfig, singboxconfig.FieldDNSConfig, singboxconfig.FieldNtpConfig, singboxconfig.FieldInbounds, singboxconfig.FieldOutbounds, singboxconfig.FieldRouteConfig, singboxconfig.FieldExperimentalConfig, singboxconfig.FieldEndpoints, singboxconfig.FieldCertificateConfig:
			values[i] = new([]byte)
		case singboxconfig.FieldID, singboxconfig.FieldName, singboxconfig.FieldDescription:
			values[i] = new(sql.NullString)
		case singboxconfig.FieldCreatedAt, singboxconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SingBoxConfig fields.
func (sbc *SingBoxConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case singboxconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sbc.ID = value.String
			}
		case singboxconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sbc.Name = value.String
			}
		case singboxconfig.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sbc.Description = value.String
			}
		case singboxconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sbc.CreatedAt = value.Time
			}
		case singboxconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sbc.UpdatedAt = value.Time
			}
		case singboxconfig.FieldLogConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field log_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sbc.LogConfig); err != nil {
					return fmt.Errorf("unmarshal field log_config: %w", err)
				}
			}
		case singboxconfig.FieldDNSConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dns_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sbc.DNSConfig); err != nil {
					return fmt.Errorf("unmarshal field dns_config: %w", err)
				}
			}
		case singboxconfig.FieldNtpConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ntp_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sbc.NtpConfig); err != nil {
					return fmt.Errorf("unmarshal field ntp_config: %w", err)
				}
			}
		case singboxconfig.FieldInbounds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field inbounds", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sbc.Inbounds); err != nil {
					return fmt.Errorf("unmarshal field inbounds: %w", err)
				}
			}
		case singboxconfig.FieldOutbounds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field outbounds", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sbc.Outbounds); err != nil {
					return fmt.Errorf("unmarshal field outbounds: %w", err)
				}
			}
		case singboxconfig.FieldRouteConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field route_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sbc.RouteConfig); err != nil {
					return fmt.Errorf("unmarshal field route_config: %w", err)
				}
			}
		case singboxconfig.FieldExperimentalConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field experimental_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sbc.ExperimentalConfig); err != nil {
					return fmt.Errorf("unmarshal field experimental_config: %w", err)
				}
			}
		case singboxconfig.FieldEndpoints:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field endpoints", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sbc.Endpoints); err != nil {
					return fmt.Errorf("unmarshal field endpoints: %w", err)
				}
			}
		case singboxconfig.FieldCertificateConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field certificate_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sbc.CertificateConfig); err != nil {
					return fmt.Errorf("unmarshal field certificate_config: %w", err)
				}
			}
		default:
			sbc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SingBoxConfig.
// This includes values selected through modifiers, order, etc.
func (sbc *SingBoxConfig) Value(name string) (ent.Value, error) {
	return sbc.selectValues.Get(name)
}

// Update returns a builder for updating this SingBoxConfig.
// Note that you need to call SingBoxConfig.Unwrap() before calling this method if this SingBoxConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (sbc *SingBoxConfig) Update() *SingBoxConfigUpdateOne {
	return NewSingBoxConfigClient(sbc.config).UpdateOne(sbc)
}

// Unwrap unwraps the SingBoxConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sbc *SingBoxConfig) Unwrap() *SingBoxConfig {
	_tx, ok := sbc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SingBoxConfig is not a transactional entity")
	}
	sbc.config.driver = _tx.drv
	return sbc
}

// String implements the fmt.Stringer.
func (sbc *SingBoxConfig) String() string {
	var builder strings.Builder
	builder.WriteString("SingBoxConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sbc.ID))
	builder.WriteString("name=")
	builder.WriteString(sbc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sbc.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sbc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sbc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("log_config=")
	builder.WriteString(fmt.Sprintf("%v", sbc.LogConfig))
	builder.WriteString(", ")
	builder.WriteString("dns_config=")
	builder.WriteString(fmt.Sprintf("%v", sbc.DNSConfig))
	builder.WriteString(", ")
	builder.WriteString("ntp_config=")
	builder.WriteString(fmt.Sprintf("%v", sbc.NtpConfig))
	builder.WriteString(", ")
	builder.WriteString("inbounds=")
	builder.WriteString(fmt.Sprintf("%v", sbc.Inbounds))
	builder.WriteString(", ")
	builder.WriteString("outbounds=")
	builder.WriteString(fmt.Sprintf("%v", sbc.Outbounds))
	builder.WriteString(", ")
	builder.WriteString("route_config=")
	builder.WriteString(fmt.Sprintf("%v", sbc.RouteConfig))
	builder.WriteString(", ")
	builder.WriteString("experimental_config=")
	builder.WriteString(fmt.Sprintf("%v", sbc.ExperimentalConfig))
	builder.WriteString(", ")
	builder.WriteString("endpoints=")
	builder.WriteString(fmt.Sprintf("%v", sbc.Endpoints))
	builder.WriteString(", ")
	builder.WriteString("certificate_config=")
	builder.WriteString(fmt.Sprintf("%v", sbc.CertificateConfig))
	builder.WriteByte(')')
	return builder.String()
}

// SingBoxConfigs is a parsable slice of SingBoxConfig.
type SingBoxConfigs []*SingBoxConfig
