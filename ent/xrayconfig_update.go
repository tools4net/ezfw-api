// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/predicate"
	"github.com/tools4net/ezfw/backend/ent/xrayconfig"
	"github.com/tools4net/ezfw/backend/internal/models"
)

// XrayConfigUpdate is the builder for updating XrayConfig entities.
type XrayConfigUpdate struct {
	config
	hooks    []Hook
	mutation *XrayConfigMutation
}

// Where appends a list predicates to the XrayConfigUpdate builder.
func (xcu *XrayConfigUpdate) Where(ps ...predicate.XrayConfig) *XrayConfigUpdate {
	xcu.mutation.Where(ps...)
	return xcu
}

// SetName sets the "name" field.
func (xcu *XrayConfigUpdate) SetName(s string) *XrayConfigUpdate {
	xcu.mutation.SetName(s)
	return xcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (xcu *XrayConfigUpdate) SetNillableName(s *string) *XrayConfigUpdate {
	if s != nil {
		xcu.SetName(*s)
	}
	return xcu
}

// SetDescription sets the "description" field.
func (xcu *XrayConfigUpdate) SetDescription(s string) *XrayConfigUpdate {
	xcu.mutation.SetDescription(s)
	return xcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (xcu *XrayConfigUpdate) SetNillableDescription(s *string) *XrayConfigUpdate {
	if s != nil {
		xcu.SetDescription(*s)
	}
	return xcu
}

// ClearDescription clears the value of the "description" field.
func (xcu *XrayConfigUpdate) ClearDescription() *XrayConfigUpdate {
	xcu.mutation.ClearDescription()
	return xcu
}

// SetUpdatedAt sets the "updated_at" field.
func (xcu *XrayConfigUpdate) SetUpdatedAt(t time.Time) *XrayConfigUpdate {
	xcu.mutation.SetUpdatedAt(t)
	return xcu
}

// SetLog sets the "log" field.
func (xcu *XrayConfigUpdate) SetLog(mo *models.LogObject) *XrayConfigUpdate {
	xcu.mutation.SetLog(mo)
	return xcu
}

// ClearLog clears the value of the "log" field.
func (xcu *XrayConfigUpdate) ClearLog() *XrayConfigUpdate {
	xcu.mutation.ClearLog()
	return xcu
}

// SetAPI sets the "api" field.
func (xcu *XrayConfigUpdate) SetAPI(mo *models.APIObject) *XrayConfigUpdate {
	xcu.mutation.SetAPI(mo)
	return xcu
}

// ClearAPI clears the value of the "api" field.
func (xcu *XrayConfigUpdate) ClearAPI() *XrayConfigUpdate {
	xcu.mutation.ClearAPI()
	return xcu
}

// SetDNS sets the "dns" field.
func (xcu *XrayConfigUpdate) SetDNS(mo *models.DNSObject) *XrayConfigUpdate {
	xcu.mutation.SetDNS(mo)
	return xcu
}

// ClearDNS clears the value of the "dns" field.
func (xcu *XrayConfigUpdate) ClearDNS() *XrayConfigUpdate {
	xcu.mutation.ClearDNS()
	return xcu
}

// SetRouting sets the "routing" field.
func (xcu *XrayConfigUpdate) SetRouting(mo *models.RoutingObject) *XrayConfigUpdate {
	xcu.mutation.SetRouting(mo)
	return xcu
}

// ClearRouting clears the value of the "routing" field.
func (xcu *XrayConfigUpdate) ClearRouting() *XrayConfigUpdate {
	xcu.mutation.ClearRouting()
	return xcu
}

// SetPolicy sets the "policy" field.
func (xcu *XrayConfigUpdate) SetPolicy(mo *models.PolicyObject) *XrayConfigUpdate {
	xcu.mutation.SetPolicy(mo)
	return xcu
}

// ClearPolicy clears the value of the "policy" field.
func (xcu *XrayConfigUpdate) ClearPolicy() *XrayConfigUpdate {
	xcu.mutation.ClearPolicy()
	return xcu
}

// SetInbounds sets the "inbounds" field.
func (xcu *XrayConfigUpdate) SetInbounds(mo []models.InboundObject) *XrayConfigUpdate {
	xcu.mutation.SetInbounds(mo)
	return xcu
}

// AppendInbounds appends mo to the "inbounds" field.
func (xcu *XrayConfigUpdate) AppendInbounds(mo []models.InboundObject) *XrayConfigUpdate {
	xcu.mutation.AppendInbounds(mo)
	return xcu
}

// ClearInbounds clears the value of the "inbounds" field.
func (xcu *XrayConfigUpdate) ClearInbounds() *XrayConfigUpdate {
	xcu.mutation.ClearInbounds()
	return xcu
}

// SetOutbounds sets the "outbounds" field.
func (xcu *XrayConfigUpdate) SetOutbounds(mo []models.OutboundObject) *XrayConfigUpdate {
	xcu.mutation.SetOutbounds(mo)
	return xcu
}

// AppendOutbounds appends mo to the "outbounds" field.
func (xcu *XrayConfigUpdate) AppendOutbounds(mo []models.OutboundObject) *XrayConfigUpdate {
	xcu.mutation.AppendOutbounds(mo)
	return xcu
}

// ClearOutbounds clears the value of the "outbounds" field.
func (xcu *XrayConfigUpdate) ClearOutbounds() *XrayConfigUpdate {
	xcu.mutation.ClearOutbounds()
	return xcu
}

// SetTransport sets the "transport" field.
func (xcu *XrayConfigUpdate) SetTransport(mo *models.TransportObject) *XrayConfigUpdate {
	xcu.mutation.SetTransport(mo)
	return xcu
}

// ClearTransport clears the value of the "transport" field.
func (xcu *XrayConfigUpdate) ClearTransport() *XrayConfigUpdate {
	xcu.mutation.ClearTransport()
	return xcu
}

// SetStats sets the "stats" field.
func (xcu *XrayConfigUpdate) SetStats(mo *models.StatsObject) *XrayConfigUpdate {
	xcu.mutation.SetStats(mo)
	return xcu
}

// ClearStats clears the value of the "stats" field.
func (xcu *XrayConfigUpdate) ClearStats() *XrayConfigUpdate {
	xcu.mutation.ClearStats()
	return xcu
}

// SetReverse sets the "reverse" field.
func (xcu *XrayConfigUpdate) SetReverse(mo *models.ReverseObject) *XrayConfigUpdate {
	xcu.mutation.SetReverse(mo)
	return xcu
}

// ClearReverse clears the value of the "reverse" field.
func (xcu *XrayConfigUpdate) ClearReverse() *XrayConfigUpdate {
	xcu.mutation.ClearReverse()
	return xcu
}

// SetFakedns sets the "fakedns" field.
func (xcu *XrayConfigUpdate) SetFakedns(mdo *models.FakeDNSObject) *XrayConfigUpdate {
	xcu.mutation.SetFakedns(mdo)
	return xcu
}

// ClearFakedns clears the value of the "fakedns" field.
func (xcu *XrayConfigUpdate) ClearFakedns() *XrayConfigUpdate {
	xcu.mutation.ClearFakedns()
	return xcu
}

// SetMetrics sets the "metrics" field.
func (xcu *XrayConfigUpdate) SetMetrics(mo *models.MetricsObject) *XrayConfigUpdate {
	xcu.mutation.SetMetrics(mo)
	return xcu
}

// ClearMetrics clears the value of the "metrics" field.
func (xcu *XrayConfigUpdate) ClearMetrics() *XrayConfigUpdate {
	xcu.mutation.ClearMetrics()
	return xcu
}

// SetObservatory sets the "observatory" field.
func (xcu *XrayConfigUpdate) SetObservatory(mo *models.ObservatoryObject) *XrayConfigUpdate {
	xcu.mutation.SetObservatory(mo)
	return xcu
}

// ClearObservatory clears the value of the "observatory" field.
func (xcu *XrayConfigUpdate) ClearObservatory() *XrayConfigUpdate {
	xcu.mutation.ClearObservatory()
	return xcu
}

// SetBurstObservatory sets the "burst_observatory" field.
func (xcu *XrayConfigUpdate) SetBurstObservatory(moo *models.BurstObservatoryObject) *XrayConfigUpdate {
	xcu.mutation.SetBurstObservatory(moo)
	return xcu
}

// ClearBurstObservatory clears the value of the "burst_observatory" field.
func (xcu *XrayConfigUpdate) ClearBurstObservatory() *XrayConfigUpdate {
	xcu.mutation.ClearBurstObservatory()
	return xcu
}

// SetServices sets the "services" field.
func (xcu *XrayConfigUpdate) SetServices(m map[string]interface{}) *XrayConfigUpdate {
	xcu.mutation.SetServices(m)
	return xcu
}

// ClearServices clears the value of the "services" field.
func (xcu *XrayConfigUpdate) ClearServices() *XrayConfigUpdate {
	xcu.mutation.ClearServices()
	return xcu
}

// Mutation returns the XrayConfigMutation object of the builder.
func (xcu *XrayConfigUpdate) Mutation() *XrayConfigMutation {
	return xcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (xcu *XrayConfigUpdate) Save(ctx context.Context) (int, error) {
	xcu.defaults()
	return withHooks(ctx, xcu.sqlSave, xcu.mutation, xcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (xcu *XrayConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := xcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (xcu *XrayConfigUpdate) Exec(ctx context.Context) error {
	_, err := xcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xcu *XrayConfigUpdate) ExecX(ctx context.Context) {
	if err := xcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xcu *XrayConfigUpdate) defaults() {
	if _, ok := xcu.mutation.UpdatedAt(); !ok {
		v := xrayconfig.UpdateDefaultUpdatedAt()
		xcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (xcu *XrayConfigUpdate) check() error {
	if v, ok := xcu.mutation.Name(); ok {
		if err := xrayconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "XrayConfig.name": %w`, err)}
		}
	}
	return nil
}

func (xcu *XrayConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := xcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(xrayconfig.Table, xrayconfig.Columns, sqlgraph.NewFieldSpec(xrayconfig.FieldID, field.TypeString))
	if ps := xcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xcu.mutation.Name(); ok {
		_spec.SetField(xrayconfig.FieldName, field.TypeString, value)
	}
	if value, ok := xcu.mutation.Description(); ok {
		_spec.SetField(xrayconfig.FieldDescription, field.TypeString, value)
	}
	if xcu.mutation.DescriptionCleared() {
		_spec.ClearField(xrayconfig.FieldDescription, field.TypeString)
	}
	if value, ok := xcu.mutation.UpdatedAt(); ok {
		_spec.SetField(xrayconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := xcu.mutation.Log(); ok {
		_spec.SetField(xrayconfig.FieldLog, field.TypeJSON, value)
	}
	if xcu.mutation.LogCleared() {
		_spec.ClearField(xrayconfig.FieldLog, field.TypeJSON)
	}
	if value, ok := xcu.mutation.API(); ok {
		_spec.SetField(xrayconfig.FieldAPI, field.TypeJSON, value)
	}
	if xcu.mutation.APICleared() {
		_spec.ClearField(xrayconfig.FieldAPI, field.TypeJSON)
	}
	if value, ok := xcu.mutation.DNS(); ok {
		_spec.SetField(xrayconfig.FieldDNS, field.TypeJSON, value)
	}
	if xcu.mutation.DNSCleared() {
		_spec.ClearField(xrayconfig.FieldDNS, field.TypeJSON)
	}
	if value, ok := xcu.mutation.Routing(); ok {
		_spec.SetField(xrayconfig.FieldRouting, field.TypeJSON, value)
	}
	if xcu.mutation.RoutingCleared() {
		_spec.ClearField(xrayconfig.FieldRouting, field.TypeJSON)
	}
	if value, ok := xcu.mutation.Policy(); ok {
		_spec.SetField(xrayconfig.FieldPolicy, field.TypeJSON, value)
	}
	if xcu.mutation.PolicyCleared() {
		_spec.ClearField(xrayconfig.FieldPolicy, field.TypeJSON)
	}
	if value, ok := xcu.mutation.Inbounds(); ok {
		_spec.SetField(xrayconfig.FieldInbounds, field.TypeJSON, value)
	}
	if value, ok := xcu.mutation.AppendedInbounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, xrayconfig.FieldInbounds, value)
		})
	}
	if xcu.mutation.InboundsCleared() {
		_spec.ClearField(xrayconfig.FieldInbounds, field.TypeJSON)
	}
	if value, ok := xcu.mutation.Outbounds(); ok {
		_spec.SetField(xrayconfig.FieldOutbounds, field.TypeJSON, value)
	}
	if value, ok := xcu.mutation.AppendedOutbounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, xrayconfig.FieldOutbounds, value)
		})
	}
	if xcu.mutation.OutboundsCleared() {
		_spec.ClearField(xrayconfig.FieldOutbounds, field.TypeJSON)
	}
	if value, ok := xcu.mutation.Transport(); ok {
		_spec.SetField(xrayconfig.FieldTransport, field.TypeJSON, value)
	}
	if xcu.mutation.TransportCleared() {
		_spec.ClearField(xrayconfig.FieldTransport, field.TypeJSON)
	}
	if value, ok := xcu.mutation.Stats(); ok {
		_spec.SetField(xrayconfig.FieldStats, field.TypeJSON, value)
	}
	if xcu.mutation.StatsCleared() {
		_spec.ClearField(xrayconfig.FieldStats, field.TypeJSON)
	}
	if value, ok := xcu.mutation.Reverse(); ok {
		_spec.SetField(xrayconfig.FieldReverse, field.TypeJSON, value)
	}
	if xcu.mutation.ReverseCleared() {
		_spec.ClearField(xrayconfig.FieldReverse, field.TypeJSON)
	}
	if value, ok := xcu.mutation.Fakedns(); ok {
		_spec.SetField(xrayconfig.FieldFakedns, field.TypeJSON, value)
	}
	if xcu.mutation.FakednsCleared() {
		_spec.ClearField(xrayconfig.FieldFakedns, field.TypeJSON)
	}
	if value, ok := xcu.mutation.Metrics(); ok {
		_spec.SetField(xrayconfig.FieldMetrics, field.TypeJSON, value)
	}
	if xcu.mutation.MetricsCleared() {
		_spec.ClearField(xrayconfig.FieldMetrics, field.TypeJSON)
	}
	if value, ok := xcu.mutation.Observatory(); ok {
		_spec.SetField(xrayconfig.FieldObservatory, field.TypeJSON, value)
	}
	if xcu.mutation.ObservatoryCleared() {
		_spec.ClearField(xrayconfig.FieldObservatory, field.TypeJSON)
	}
	if value, ok := xcu.mutation.BurstObservatory(); ok {
		_spec.SetField(xrayconfig.FieldBurstObservatory, field.TypeJSON, value)
	}
	if xcu.mutation.BurstObservatoryCleared() {
		_spec.ClearField(xrayconfig.FieldBurstObservatory, field.TypeJSON)
	}
	if value, ok := xcu.mutation.Services(); ok {
		_spec.SetField(xrayconfig.FieldServices, field.TypeJSON, value)
	}
	if xcu.mutation.ServicesCleared() {
		_spec.ClearField(xrayconfig.FieldServices, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, xcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{xrayconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	xcu.mutation.done = true
	return n, nil
}

// XrayConfigUpdateOne is the builder for updating a single XrayConfig entity.
type XrayConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *XrayConfigMutation
}

// SetName sets the "name" field.
func (xcuo *XrayConfigUpdateOne) SetName(s string) *XrayConfigUpdateOne {
	xcuo.mutation.SetName(s)
	return xcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (xcuo *XrayConfigUpdateOne) SetNillableName(s *string) *XrayConfigUpdateOne {
	if s != nil {
		xcuo.SetName(*s)
	}
	return xcuo
}

// SetDescription sets the "description" field.
func (xcuo *XrayConfigUpdateOne) SetDescription(s string) *XrayConfigUpdateOne {
	xcuo.mutation.SetDescription(s)
	return xcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (xcuo *XrayConfigUpdateOne) SetNillableDescription(s *string) *XrayConfigUpdateOne {
	if s != nil {
		xcuo.SetDescription(*s)
	}
	return xcuo
}

// ClearDescription clears the value of the "description" field.
func (xcuo *XrayConfigUpdateOne) ClearDescription() *XrayConfigUpdateOne {
	xcuo.mutation.ClearDescription()
	return xcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (xcuo *XrayConfigUpdateOne) SetUpdatedAt(t time.Time) *XrayConfigUpdateOne {
	xcuo.mutation.SetUpdatedAt(t)
	return xcuo
}

// SetLog sets the "log" field.
func (xcuo *XrayConfigUpdateOne) SetLog(mo *models.LogObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetLog(mo)
	return xcuo
}

// ClearLog clears the value of the "log" field.
func (xcuo *XrayConfigUpdateOne) ClearLog() *XrayConfigUpdateOne {
	xcuo.mutation.ClearLog()
	return xcuo
}

// SetAPI sets the "api" field.
func (xcuo *XrayConfigUpdateOne) SetAPI(mo *models.APIObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetAPI(mo)
	return xcuo
}

// ClearAPI clears the value of the "api" field.
func (xcuo *XrayConfigUpdateOne) ClearAPI() *XrayConfigUpdateOne {
	xcuo.mutation.ClearAPI()
	return xcuo
}

// SetDNS sets the "dns" field.
func (xcuo *XrayConfigUpdateOne) SetDNS(mo *models.DNSObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetDNS(mo)
	return xcuo
}

// ClearDNS clears the value of the "dns" field.
func (xcuo *XrayConfigUpdateOne) ClearDNS() *XrayConfigUpdateOne {
	xcuo.mutation.ClearDNS()
	return xcuo
}

// SetRouting sets the "routing" field.
func (xcuo *XrayConfigUpdateOne) SetRouting(mo *models.RoutingObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetRouting(mo)
	return xcuo
}

// ClearRouting clears the value of the "routing" field.
func (xcuo *XrayConfigUpdateOne) ClearRouting() *XrayConfigUpdateOne {
	xcuo.mutation.ClearRouting()
	return xcuo
}

// SetPolicy sets the "policy" field.
func (xcuo *XrayConfigUpdateOne) SetPolicy(mo *models.PolicyObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetPolicy(mo)
	return xcuo
}

// ClearPolicy clears the value of the "policy" field.
func (xcuo *XrayConfigUpdateOne) ClearPolicy() *XrayConfigUpdateOne {
	xcuo.mutation.ClearPolicy()
	return xcuo
}

// SetInbounds sets the "inbounds" field.
func (xcuo *XrayConfigUpdateOne) SetInbounds(mo []models.InboundObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetInbounds(mo)
	return xcuo
}

// AppendInbounds appends mo to the "inbounds" field.
func (xcuo *XrayConfigUpdateOne) AppendInbounds(mo []models.InboundObject) *XrayConfigUpdateOne {
	xcuo.mutation.AppendInbounds(mo)
	return xcuo
}

// ClearInbounds clears the value of the "inbounds" field.
func (xcuo *XrayConfigUpdateOne) ClearInbounds() *XrayConfigUpdateOne {
	xcuo.mutation.ClearInbounds()
	return xcuo
}

// SetOutbounds sets the "outbounds" field.
func (xcuo *XrayConfigUpdateOne) SetOutbounds(mo []models.OutboundObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetOutbounds(mo)
	return xcuo
}

// AppendOutbounds appends mo to the "outbounds" field.
func (xcuo *XrayConfigUpdateOne) AppendOutbounds(mo []models.OutboundObject) *XrayConfigUpdateOne {
	xcuo.mutation.AppendOutbounds(mo)
	return xcuo
}

// ClearOutbounds clears the value of the "outbounds" field.
func (xcuo *XrayConfigUpdateOne) ClearOutbounds() *XrayConfigUpdateOne {
	xcuo.mutation.ClearOutbounds()
	return xcuo
}

// SetTransport sets the "transport" field.
func (xcuo *XrayConfigUpdateOne) SetTransport(mo *models.TransportObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetTransport(mo)
	return xcuo
}

// ClearTransport clears the value of the "transport" field.
func (xcuo *XrayConfigUpdateOne) ClearTransport() *XrayConfigUpdateOne {
	xcuo.mutation.ClearTransport()
	return xcuo
}

// SetStats sets the "stats" field.
func (xcuo *XrayConfigUpdateOne) SetStats(mo *models.StatsObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetStats(mo)
	return xcuo
}

// ClearStats clears the value of the "stats" field.
func (xcuo *XrayConfigUpdateOne) ClearStats() *XrayConfigUpdateOne {
	xcuo.mutation.ClearStats()
	return xcuo
}

// SetReverse sets the "reverse" field.
func (xcuo *XrayConfigUpdateOne) SetReverse(mo *models.ReverseObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetReverse(mo)
	return xcuo
}

// ClearReverse clears the value of the "reverse" field.
func (xcuo *XrayConfigUpdateOne) ClearReverse() *XrayConfigUpdateOne {
	xcuo.mutation.ClearReverse()
	return xcuo
}

// SetFakedns sets the "fakedns" field.
func (xcuo *XrayConfigUpdateOne) SetFakedns(mdo *models.FakeDNSObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetFakedns(mdo)
	return xcuo
}

// ClearFakedns clears the value of the "fakedns" field.
func (xcuo *XrayConfigUpdateOne) ClearFakedns() *XrayConfigUpdateOne {
	xcuo.mutation.ClearFakedns()
	return xcuo
}

// SetMetrics sets the "metrics" field.
func (xcuo *XrayConfigUpdateOne) SetMetrics(mo *models.MetricsObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetMetrics(mo)
	return xcuo
}

// ClearMetrics clears the value of the "metrics" field.
func (xcuo *XrayConfigUpdateOne) ClearMetrics() *XrayConfigUpdateOne {
	xcuo.mutation.ClearMetrics()
	return xcuo
}

// SetObservatory sets the "observatory" field.
func (xcuo *XrayConfigUpdateOne) SetObservatory(mo *models.ObservatoryObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetObservatory(mo)
	return xcuo
}

// ClearObservatory clears the value of the "observatory" field.
func (xcuo *XrayConfigUpdateOne) ClearObservatory() *XrayConfigUpdateOne {
	xcuo.mutation.ClearObservatory()
	return xcuo
}

// SetBurstObservatory sets the "burst_observatory" field.
func (xcuo *XrayConfigUpdateOne) SetBurstObservatory(moo *models.BurstObservatoryObject) *XrayConfigUpdateOne {
	xcuo.mutation.SetBurstObservatory(moo)
	return xcuo
}

// ClearBurstObservatory clears the value of the "burst_observatory" field.
func (xcuo *XrayConfigUpdateOne) ClearBurstObservatory() *XrayConfigUpdateOne {
	xcuo.mutation.ClearBurstObservatory()
	return xcuo
}

// SetServices sets the "services" field.
func (xcuo *XrayConfigUpdateOne) SetServices(m map[string]interface{}) *XrayConfigUpdateOne {
	xcuo.mutation.SetServices(m)
	return xcuo
}

// ClearServices clears the value of the "services" field.
func (xcuo *XrayConfigUpdateOne) ClearServices() *XrayConfigUpdateOne {
	xcuo.mutation.ClearServices()
	return xcuo
}

// Mutation returns the XrayConfigMutation object of the builder.
func (xcuo *XrayConfigUpdateOne) Mutation() *XrayConfigMutation {
	return xcuo.mutation
}

// Where appends a list predicates to the XrayConfigUpdate builder.
func (xcuo *XrayConfigUpdateOne) Where(ps ...predicate.XrayConfig) *XrayConfigUpdateOne {
	xcuo.mutation.Where(ps...)
	return xcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (xcuo *XrayConfigUpdateOne) Select(field string, fields ...string) *XrayConfigUpdateOne {
	xcuo.fields = append([]string{field}, fields...)
	return xcuo
}

// Save executes the query and returns the updated XrayConfig entity.
func (xcuo *XrayConfigUpdateOne) Save(ctx context.Context) (*XrayConfig, error) {
	xcuo.defaults()
	return withHooks(ctx, xcuo.sqlSave, xcuo.mutation, xcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (xcuo *XrayConfigUpdateOne) SaveX(ctx context.Context) *XrayConfig {
	node, err := xcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (xcuo *XrayConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := xcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xcuo *XrayConfigUpdateOne) ExecX(ctx context.Context) {
	if err := xcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xcuo *XrayConfigUpdateOne) defaults() {
	if _, ok := xcuo.mutation.UpdatedAt(); !ok {
		v := xrayconfig.UpdateDefaultUpdatedAt()
		xcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (xcuo *XrayConfigUpdateOne) check() error {
	if v, ok := xcuo.mutation.Name(); ok {
		if err := xrayconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "XrayConfig.name": %w`, err)}
		}
	}
	return nil
}

func (xcuo *XrayConfigUpdateOne) sqlSave(ctx context.Context) (_node *XrayConfig, err error) {
	if err := xcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(xrayconfig.Table, xrayconfig.Columns, sqlgraph.NewFieldSpec(xrayconfig.FieldID, field.TypeString))
	id, ok := xcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "XrayConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := xcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, xrayconfig.FieldID)
		for _, f := range fields {
			if !xrayconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != xrayconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := xcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xcuo.mutation.Name(); ok {
		_spec.SetField(xrayconfig.FieldName, field.TypeString, value)
	}
	if value, ok := xcuo.mutation.Description(); ok {
		_spec.SetField(xrayconfig.FieldDescription, field.TypeString, value)
	}
	if xcuo.mutation.DescriptionCleared() {
		_spec.ClearField(xrayconfig.FieldDescription, field.TypeString)
	}
	if value, ok := xcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(xrayconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := xcuo.mutation.Log(); ok {
		_spec.SetField(xrayconfig.FieldLog, field.TypeJSON, value)
	}
	if xcuo.mutation.LogCleared() {
		_spec.ClearField(xrayconfig.FieldLog, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.API(); ok {
		_spec.SetField(xrayconfig.FieldAPI, field.TypeJSON, value)
	}
	if xcuo.mutation.APICleared() {
		_spec.ClearField(xrayconfig.FieldAPI, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.DNS(); ok {
		_spec.SetField(xrayconfig.FieldDNS, field.TypeJSON, value)
	}
	if xcuo.mutation.DNSCleared() {
		_spec.ClearField(xrayconfig.FieldDNS, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.Routing(); ok {
		_spec.SetField(xrayconfig.FieldRouting, field.TypeJSON, value)
	}
	if xcuo.mutation.RoutingCleared() {
		_spec.ClearField(xrayconfig.FieldRouting, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.Policy(); ok {
		_spec.SetField(xrayconfig.FieldPolicy, field.TypeJSON, value)
	}
	if xcuo.mutation.PolicyCleared() {
		_spec.ClearField(xrayconfig.FieldPolicy, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.Inbounds(); ok {
		_spec.SetField(xrayconfig.FieldInbounds, field.TypeJSON, value)
	}
	if value, ok := xcuo.mutation.AppendedInbounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, xrayconfig.FieldInbounds, value)
		})
	}
	if xcuo.mutation.InboundsCleared() {
		_spec.ClearField(xrayconfig.FieldInbounds, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.Outbounds(); ok {
		_spec.SetField(xrayconfig.FieldOutbounds, field.TypeJSON, value)
	}
	if value, ok := xcuo.mutation.AppendedOutbounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, xrayconfig.FieldOutbounds, value)
		})
	}
	if xcuo.mutation.OutboundsCleared() {
		_spec.ClearField(xrayconfig.FieldOutbounds, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.Transport(); ok {
		_spec.SetField(xrayconfig.FieldTransport, field.TypeJSON, value)
	}
	if xcuo.mutation.TransportCleared() {
		_spec.ClearField(xrayconfig.FieldTransport, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.Stats(); ok {
		_spec.SetField(xrayconfig.FieldStats, field.TypeJSON, value)
	}
	if xcuo.mutation.StatsCleared() {
		_spec.ClearField(xrayconfig.FieldStats, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.Reverse(); ok {
		_spec.SetField(xrayconfig.FieldReverse, field.TypeJSON, value)
	}
	if xcuo.mutation.ReverseCleared() {
		_spec.ClearField(xrayconfig.FieldReverse, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.Fakedns(); ok {
		_spec.SetField(xrayconfig.FieldFakedns, field.TypeJSON, value)
	}
	if xcuo.mutation.FakednsCleared() {
		_spec.ClearField(xrayconfig.FieldFakedns, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.Metrics(); ok {
		_spec.SetField(xrayconfig.FieldMetrics, field.TypeJSON, value)
	}
	if xcuo.mutation.MetricsCleared() {
		_spec.ClearField(xrayconfig.FieldMetrics, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.Observatory(); ok {
		_spec.SetField(xrayconfig.FieldObservatory, field.TypeJSON, value)
	}
	if xcuo.mutation.ObservatoryCleared() {
		_spec.ClearField(xrayconfig.FieldObservatory, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.BurstObservatory(); ok {
		_spec.SetField(xrayconfig.FieldBurstObservatory, field.TypeJSON, value)
	}
	if xcuo.mutation.BurstObservatoryCleared() {
		_spec.ClearField(xrayconfig.FieldBurstObservatory, field.TypeJSON)
	}
	if value, ok := xcuo.mutation.Services(); ok {
		_spec.SetField(xrayconfig.FieldServices, field.TypeJSON, value)
	}
	if xcuo.mutation.ServicesCleared() {
		_spec.ClearField(xrayconfig.FieldServices, field.TypeJSON)
	}
	_node = &XrayConfig{config: xcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, xcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{xrayconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	xcuo.mutation.done = true
	return _node, nil
}
