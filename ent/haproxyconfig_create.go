// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/haproxyconfig"
	"github.com/tools4net/ezfw/backend/internal/models"
)

// HAProxyConfigCreate is the builder for creating a HAProxyConfig entity.
type HAProxyConfigCreate struct {
	config
	mutation *HAProxyConfigMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (hpcc *HAProxyConfigCreate) SetName(s string) *HAProxyConfigCreate {
	hpcc.mutation.SetName(s)
	return hpcc
}

// SetDescription sets the "description" field.
func (hpcc *HAProxyConfigCreate) SetDescription(s string) *HAProxyConfigCreate {
	hpcc.mutation.SetDescription(s)
	return hpcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hpcc *HAProxyConfigCreate) SetNillableDescription(s *string) *HAProxyConfigCreate {
	if s != nil {
		hpcc.SetDescription(*s)
	}
	return hpcc
}

// SetCreatedAt sets the "created_at" field.
func (hpcc *HAProxyConfigCreate) SetCreatedAt(t time.Time) *HAProxyConfigCreate {
	hpcc.mutation.SetCreatedAt(t)
	return hpcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hpcc *HAProxyConfigCreate) SetNillableCreatedAt(t *time.Time) *HAProxyConfigCreate {
	if t != nil {
		hpcc.SetCreatedAt(*t)
	}
	return hpcc
}

// SetUpdatedAt sets the "updated_at" field.
func (hpcc *HAProxyConfigCreate) SetUpdatedAt(t time.Time) *HAProxyConfigCreate {
	hpcc.mutation.SetUpdatedAt(t)
	return hpcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hpcc *HAProxyConfigCreate) SetNillableUpdatedAt(t *time.Time) *HAProxyConfigCreate {
	if t != nil {
		hpcc.SetUpdatedAt(*t)
	}
	return hpcc
}

// SetGlobalConfig sets the "global_config" field.
func (hpcc *HAProxyConfigCreate) SetGlobalConfig(mpg *models.HAProxyGlobal) *HAProxyConfigCreate {
	hpcc.mutation.SetGlobalConfig(mpg)
	return hpcc
}

// SetDefaultsConfig sets the "defaults_config" field.
func (hpcc *HAProxyConfigCreate) SetDefaultsConfig(mpd *models.HAProxyDefaults) *HAProxyConfigCreate {
	hpcc.mutation.SetDefaultsConfig(mpd)
	return hpcc
}

// SetFrontends sets the "frontends" field.
func (hpcc *HAProxyConfigCreate) SetFrontends(mpf []models.HAProxyFrontend) *HAProxyConfigCreate {
	hpcc.mutation.SetFrontends(mpf)
	return hpcc
}

// SetBackends sets the "backends" field.
func (hpcc *HAProxyConfigCreate) SetBackends(mpb []models.HAProxyBackend) *HAProxyConfigCreate {
	hpcc.mutation.SetBackends(mpb)
	return hpcc
}

// SetListens sets the "listens" field.
func (hpcc *HAProxyConfigCreate) SetListens(mpl []models.HAProxyListen) *HAProxyConfigCreate {
	hpcc.mutation.SetListens(mpl)
	return hpcc
}

// SetStatsConfig sets the "stats_config" field.
func (hpcc *HAProxyConfigCreate) SetStatsConfig(mps *models.HAProxyStats) *HAProxyConfigCreate {
	hpcc.mutation.SetStatsConfig(mps)
	return hpcc
}

// SetID sets the "id" field.
func (hpcc *HAProxyConfigCreate) SetID(s string) *HAProxyConfigCreate {
	hpcc.mutation.SetID(s)
	return hpcc
}

// Mutation returns the HAProxyConfigMutation object of the builder.
func (hpcc *HAProxyConfigCreate) Mutation() *HAProxyConfigMutation {
	return hpcc.mutation
}

// Save creates the HAProxyConfig in the database.
func (hpcc *HAProxyConfigCreate) Save(ctx context.Context) (*HAProxyConfig, error) {
	hpcc.defaults()
	return withHooks(ctx, hpcc.sqlSave, hpcc.mutation, hpcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hpcc *HAProxyConfigCreate) SaveX(ctx context.Context) *HAProxyConfig {
	v, err := hpcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hpcc *HAProxyConfigCreate) Exec(ctx context.Context) error {
	_, err := hpcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hpcc *HAProxyConfigCreate) ExecX(ctx context.Context) {
	if err := hpcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hpcc *HAProxyConfigCreate) defaults() {
	if _, ok := hpcc.mutation.CreatedAt(); !ok {
		v := haproxyconfig.DefaultCreatedAt()
		hpcc.mutation.SetCreatedAt(v)
	}
	if _, ok := hpcc.mutation.UpdatedAt(); !ok {
		v := haproxyconfig.DefaultUpdatedAt()
		hpcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hpcc *HAProxyConfigCreate) check() error {
	if _, ok := hpcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "HAProxyConfig.name"`)}
	}
	if v, ok := hpcc.mutation.Name(); ok {
		if err := haproxyconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "HAProxyConfig.name": %w`, err)}
		}
	}
	if _, ok := hpcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "HAProxyConfig.created_at"`)}
	}
	if _, ok := hpcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "HAProxyConfig.updated_at"`)}
	}
	return nil
}

func (hpcc *HAProxyConfigCreate) sqlSave(ctx context.Context) (*HAProxyConfig, error) {
	if err := hpcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hpcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hpcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected HAProxyConfig.ID type: %T", _spec.ID.Value)
		}
	}
	hpcc.mutation.id = &_node.ID
	hpcc.mutation.done = true
	return _node, nil
}

func (hpcc *HAProxyConfigCreate) createSpec() (*HAProxyConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &HAProxyConfig{config: hpcc.config}
		_spec = sqlgraph.NewCreateSpec(haproxyconfig.Table, sqlgraph.NewFieldSpec(haproxyconfig.FieldID, field.TypeString))
	)
	if id, ok := hpcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hpcc.mutation.Name(); ok {
		_spec.SetField(haproxyconfig.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := hpcc.mutation.Description(); ok {
		_spec.SetField(haproxyconfig.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := hpcc.mutation.CreatedAt(); ok {
		_spec.SetField(haproxyconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hpcc.mutation.UpdatedAt(); ok {
		_spec.SetField(haproxyconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hpcc.mutation.GlobalConfig(); ok {
		_spec.SetField(haproxyconfig.FieldGlobalConfig, field.TypeJSON, value)
		_node.GlobalConfig = value
	}
	if value, ok := hpcc.mutation.DefaultsConfig(); ok {
		_spec.SetField(haproxyconfig.FieldDefaultsConfig, field.TypeJSON, value)
		_node.DefaultsConfig = value
	}
	if value, ok := hpcc.mutation.Frontends(); ok {
		_spec.SetField(haproxyconfig.FieldFrontends, field.TypeJSON, value)
		_node.Frontends = value
	}
	if value, ok := hpcc.mutation.Backends(); ok {
		_spec.SetField(haproxyconfig.FieldBackends, field.TypeJSON, value)
		_node.Backends = value
	}
	if value, ok := hpcc.mutation.Listens(); ok {
		_spec.SetField(haproxyconfig.FieldListens, field.TypeJSON, value)
		_node.Listens = value
	}
	if value, ok := hpcc.mutation.StatsConfig(); ok {
		_spec.SetField(haproxyconfig.FieldStatsConfig, field.TypeJSON, value)
		_node.StatsConfig = value
	}
	return _node, _spec
}

// HAProxyConfigCreateBulk is the builder for creating many HAProxyConfig entities in bulk.
type HAProxyConfigCreateBulk struct {
	config
	err      error
	builders []*HAProxyConfigCreate
}

// Save creates the HAProxyConfig entities in the database.
func (hpccb *HAProxyConfigCreateBulk) Save(ctx context.Context) ([]*HAProxyConfig, error) {
	if hpccb.err != nil {
		return nil, hpccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hpccb.builders))
	nodes := make([]*HAProxyConfig, len(hpccb.builders))
	mutators := make([]Mutator, len(hpccb.builders))
	for i := range hpccb.builders {
		func(i int, root context.Context) {
			builder := hpccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HAProxyConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hpccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hpccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hpccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hpccb *HAProxyConfigCreateBulk) SaveX(ctx context.Context) []*HAProxyConfig {
	v, err := hpccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hpccb *HAProxyConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := hpccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hpccb *HAProxyConfigCreateBulk) ExecX(ctx context.Context) {
	if err := hpccb.Exec(ctx); err != nil {
		panic(err)
	}
}
