// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/tools4net/ezfw/backend/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tools4net/ezfw/backend/ent/agenttoken"
	"github.com/tools4net/ezfw/backend/ent/haproxyconfig"
	"github.com/tools4net/ezfw/backend/ent/node"
	"github.com/tools4net/ezfw/backend/ent/serviceinstance"
	"github.com/tools4net/ezfw/backend/ent/singboxconfig"
	"github.com/tools4net/ezfw/backend/ent/xrayconfig"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AgentToken is the client for interacting with the AgentToken builders.
	AgentToken *AgentTokenClient
	// HAProxyConfig is the client for interacting with the HAProxyConfig builders.
	HAProxyConfig *HAProxyConfigClient
	// Node is the client for interacting with the Node builders.
	Node *NodeClient
	// ServiceInstance is the client for interacting with the ServiceInstance builders.
	ServiceInstance *ServiceInstanceClient
	// SingBoxConfig is the client for interacting with the SingBoxConfig builders.
	SingBoxConfig *SingBoxConfigClient
	// XrayConfig is the client for interacting with the XrayConfig builders.
	XrayConfig *XrayConfigClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AgentToken = NewAgentTokenClient(c.config)
	c.HAProxyConfig = NewHAProxyConfigClient(c.config)
	c.Node = NewNodeClient(c.config)
	c.ServiceInstance = NewServiceInstanceClient(c.config)
	c.SingBoxConfig = NewSingBoxConfigClient(c.config)
	c.XrayConfig = NewXrayConfigClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		AgentToken:      NewAgentTokenClient(cfg),
		HAProxyConfig:   NewHAProxyConfigClient(cfg),
		Node:            NewNodeClient(cfg),
		ServiceInstance: NewServiceInstanceClient(cfg),
		SingBoxConfig:   NewSingBoxConfigClient(cfg),
		XrayConfig:      NewXrayConfigClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		AgentToken:      NewAgentTokenClient(cfg),
		HAProxyConfig:   NewHAProxyConfigClient(cfg),
		Node:            NewNodeClient(cfg),
		ServiceInstance: NewServiceInstanceClient(cfg),
		SingBoxConfig:   NewSingBoxConfigClient(cfg),
		XrayConfig:      NewXrayConfigClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AgentToken.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AgentToken, c.HAProxyConfig, c.Node, c.ServiceInstance, c.SingBoxConfig,
		c.XrayConfig,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AgentToken, c.HAProxyConfig, c.Node, c.ServiceInstance, c.SingBoxConfig,
		c.XrayConfig,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AgentTokenMutation:
		return c.AgentToken.mutate(ctx, m)
	case *HAProxyConfigMutation:
		return c.HAProxyConfig.mutate(ctx, m)
	case *NodeMutation:
		return c.Node.mutate(ctx, m)
	case *ServiceInstanceMutation:
		return c.ServiceInstance.mutate(ctx, m)
	case *SingBoxConfigMutation:
		return c.SingBoxConfig.mutate(ctx, m)
	case *XrayConfigMutation:
		return c.XrayConfig.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AgentTokenClient is a client for the AgentToken schema.
type AgentTokenClient struct {
	config
}

// NewAgentTokenClient returns a client for the AgentToken from the given config.
func NewAgentTokenClient(c config) *AgentTokenClient {
	return &AgentTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agenttoken.Hooks(f(g(h())))`.
func (c *AgentTokenClient) Use(hooks ...Hook) {
	c.hooks.AgentToken = append(c.hooks.AgentToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `agenttoken.Intercept(f(g(h())))`.
func (c *AgentTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.AgentToken = append(c.inters.AgentToken, interceptors...)
}

// Create returns a builder for creating a AgentToken entity.
func (c *AgentTokenClient) Create() *AgentTokenCreate {
	mutation := newAgentTokenMutation(c.config, OpCreate)
	return &AgentTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AgentToken entities.
func (c *AgentTokenClient) CreateBulk(builders ...*AgentTokenCreate) *AgentTokenCreateBulk {
	return &AgentTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AgentTokenClient) MapCreateBulk(slice any, setFunc func(*AgentTokenCreate, int)) *AgentTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AgentTokenCreateBulk{err: fmt.Errorf("calling to AgentTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AgentTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AgentTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AgentToken.
func (c *AgentTokenClient) Update() *AgentTokenUpdate {
	mutation := newAgentTokenMutation(c.config, OpUpdate)
	return &AgentTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgentTokenClient) UpdateOne(at *AgentToken) *AgentTokenUpdateOne {
	mutation := newAgentTokenMutation(c.config, OpUpdateOne, withAgentToken(at))
	return &AgentTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgentTokenClient) UpdateOneID(id string) *AgentTokenUpdateOne {
	mutation := newAgentTokenMutation(c.config, OpUpdateOne, withAgentTokenID(id))
	return &AgentTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AgentToken.
func (c *AgentTokenClient) Delete() *AgentTokenDelete {
	mutation := newAgentTokenMutation(c.config, OpDelete)
	return &AgentTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AgentTokenClient) DeleteOne(at *AgentToken) *AgentTokenDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AgentTokenClient) DeleteOneID(id string) *AgentTokenDeleteOne {
	builder := c.Delete().Where(agenttoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgentTokenDeleteOne{builder}
}

// Query returns a query builder for AgentToken.
func (c *AgentTokenClient) Query() *AgentTokenQuery {
	return &AgentTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAgentToken},
		inters: c.Interceptors(),
	}
}

// Get returns a AgentToken entity by its id.
func (c *AgentTokenClient) Get(ctx context.Context, id string) (*AgentToken, error) {
	return c.Query().Where(agenttoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgentTokenClient) GetX(ctx context.Context, id string) *AgentToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNode queries the node edge of a AgentToken.
func (c *AgentTokenClient) QueryNode(at *AgentToken) *NodeQuery {
	query := (&NodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agenttoken.Table, agenttoken.FieldID, id),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, agenttoken.NodeTable, agenttoken.NodeColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AgentTokenClient) Hooks() []Hook {
	return c.hooks.AgentToken
}

// Interceptors returns the client interceptors.
func (c *AgentTokenClient) Interceptors() []Interceptor {
	return c.inters.AgentToken
}

func (c *AgentTokenClient) mutate(ctx context.Context, m *AgentTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AgentTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AgentTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AgentTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AgentTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AgentToken mutation op: %q", m.Op())
	}
}

// HAProxyConfigClient is a client for the HAProxyConfig schema.
type HAProxyConfigClient struct {
	config
}

// NewHAProxyConfigClient returns a client for the HAProxyConfig from the given config.
func NewHAProxyConfigClient(c config) *HAProxyConfigClient {
	return &HAProxyConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `haproxyconfig.Hooks(f(g(h())))`.
func (c *HAProxyConfigClient) Use(hooks ...Hook) {
	c.hooks.HAProxyConfig = append(c.hooks.HAProxyConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `haproxyconfig.Intercept(f(g(h())))`.
func (c *HAProxyConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.HAProxyConfig = append(c.inters.HAProxyConfig, interceptors...)
}

// Create returns a builder for creating a HAProxyConfig entity.
func (c *HAProxyConfigClient) Create() *HAProxyConfigCreate {
	mutation := newHAProxyConfigMutation(c.config, OpCreate)
	return &HAProxyConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HAProxyConfig entities.
func (c *HAProxyConfigClient) CreateBulk(builders ...*HAProxyConfigCreate) *HAProxyConfigCreateBulk {
	return &HAProxyConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HAProxyConfigClient) MapCreateBulk(slice any, setFunc func(*HAProxyConfigCreate, int)) *HAProxyConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HAProxyConfigCreateBulk{err: fmt.Errorf("calling to HAProxyConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HAProxyConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HAProxyConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HAProxyConfig.
func (c *HAProxyConfigClient) Update() *HAProxyConfigUpdate {
	mutation := newHAProxyConfigMutation(c.config, OpUpdate)
	return &HAProxyConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HAProxyConfigClient) UpdateOne(hpc *HAProxyConfig) *HAProxyConfigUpdateOne {
	mutation := newHAProxyConfigMutation(c.config, OpUpdateOne, withHAProxyConfig(hpc))
	return &HAProxyConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HAProxyConfigClient) UpdateOneID(id string) *HAProxyConfigUpdateOne {
	mutation := newHAProxyConfigMutation(c.config, OpUpdateOne, withHAProxyConfigID(id))
	return &HAProxyConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HAProxyConfig.
func (c *HAProxyConfigClient) Delete() *HAProxyConfigDelete {
	mutation := newHAProxyConfigMutation(c.config, OpDelete)
	return &HAProxyConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HAProxyConfigClient) DeleteOne(hpc *HAProxyConfig) *HAProxyConfigDeleteOne {
	return c.DeleteOneID(hpc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HAProxyConfigClient) DeleteOneID(id string) *HAProxyConfigDeleteOne {
	builder := c.Delete().Where(haproxyconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HAProxyConfigDeleteOne{builder}
}

// Query returns a query builder for HAProxyConfig.
func (c *HAProxyConfigClient) Query() *HAProxyConfigQuery {
	return &HAProxyConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHAProxyConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a HAProxyConfig entity by its id.
func (c *HAProxyConfigClient) Get(ctx context.Context, id string) (*HAProxyConfig, error) {
	return c.Query().Where(haproxyconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HAProxyConfigClient) GetX(ctx context.Context, id string) *HAProxyConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HAProxyConfigClient) Hooks() []Hook {
	return c.hooks.HAProxyConfig
}

// Interceptors returns the client interceptors.
func (c *HAProxyConfigClient) Interceptors() []Interceptor {
	return c.inters.HAProxyConfig
}

func (c *HAProxyConfigClient) mutate(ctx context.Context, m *HAProxyConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HAProxyConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HAProxyConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HAProxyConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HAProxyConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HAProxyConfig mutation op: %q", m.Op())
	}
}

// NodeClient is a client for the Node schema.
type NodeClient struct {
	config
}

// NewNodeClient returns a client for the Node from the given config.
func NewNodeClient(c config) *NodeClient {
	return &NodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `node.Hooks(f(g(h())))`.
func (c *NodeClient) Use(hooks ...Hook) {
	c.hooks.Node = append(c.hooks.Node, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `node.Intercept(f(g(h())))`.
func (c *NodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Node = append(c.inters.Node, interceptors...)
}

// Create returns a builder for creating a Node entity.
func (c *NodeClient) Create() *NodeCreate {
	mutation := newNodeMutation(c.config, OpCreate)
	return &NodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Node entities.
func (c *NodeClient) CreateBulk(builders ...*NodeCreate) *NodeCreateBulk {
	return &NodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NodeClient) MapCreateBulk(slice any, setFunc func(*NodeCreate, int)) *NodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NodeCreateBulk{err: fmt.Errorf("calling to NodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Node.
func (c *NodeClient) Update() *NodeUpdate {
	mutation := newNodeMutation(c.config, OpUpdate)
	return &NodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NodeClient) UpdateOne(n *Node) *NodeUpdateOne {
	mutation := newNodeMutation(c.config, OpUpdateOne, withNode(n))
	return &NodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NodeClient) UpdateOneID(id string) *NodeUpdateOne {
	mutation := newNodeMutation(c.config, OpUpdateOne, withNodeID(id))
	return &NodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Node.
func (c *NodeClient) Delete() *NodeDelete {
	mutation := newNodeMutation(c.config, OpDelete)
	return &NodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NodeClient) DeleteOne(n *Node) *NodeDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NodeClient) DeleteOneID(id string) *NodeDeleteOne {
	builder := c.Delete().Where(node.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NodeDeleteOne{builder}
}

// Query returns a query builder for Node.
func (c *NodeClient) Query() *NodeQuery {
	return &NodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNode},
		inters: c.Interceptors(),
	}
}

// Get returns a Node entity by its id.
func (c *NodeClient) Get(ctx context.Context, id string) (*Node, error) {
	return c.Query().Where(node.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NodeClient) GetX(ctx context.Context, id string) *Node {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServiceInstances queries the service_instances edge of a Node.
func (c *NodeClient) QueryServiceInstances(n *Node) *ServiceInstanceQuery {
	query := (&ServiceInstanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(node.Table, node.FieldID, id),
			sqlgraph.To(serviceinstance.Table, serviceinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, node.ServiceInstancesTable, node.ServiceInstancesColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgentTokens queries the agent_tokens edge of a Node.
func (c *NodeClient) QueryAgentTokens(n *Node) *AgentTokenQuery {
	query := (&AgentTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(node.Table, node.FieldID, id),
			sqlgraph.To(agenttoken.Table, agenttoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, node.AgentTokensTable, node.AgentTokensColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NodeClient) Hooks() []Hook {
	return c.hooks.Node
}

// Interceptors returns the client interceptors.
func (c *NodeClient) Interceptors() []Interceptor {
	return c.inters.Node
}

func (c *NodeClient) mutate(ctx context.Context, m *NodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Node mutation op: %q", m.Op())
	}
}

// ServiceInstanceClient is a client for the ServiceInstance schema.
type ServiceInstanceClient struct {
	config
}

// NewServiceInstanceClient returns a client for the ServiceInstance from the given config.
func NewServiceInstanceClient(c config) *ServiceInstanceClient {
	return &ServiceInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serviceinstance.Hooks(f(g(h())))`.
func (c *ServiceInstanceClient) Use(hooks ...Hook) {
	c.hooks.ServiceInstance = append(c.hooks.ServiceInstance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `serviceinstance.Intercept(f(g(h())))`.
func (c *ServiceInstanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServiceInstance = append(c.inters.ServiceInstance, interceptors...)
}

// Create returns a builder for creating a ServiceInstance entity.
func (c *ServiceInstanceClient) Create() *ServiceInstanceCreate {
	mutation := newServiceInstanceMutation(c.config, OpCreate)
	return &ServiceInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceInstance entities.
func (c *ServiceInstanceClient) CreateBulk(builders ...*ServiceInstanceCreate) *ServiceInstanceCreateBulk {
	return &ServiceInstanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServiceInstanceClient) MapCreateBulk(slice any, setFunc func(*ServiceInstanceCreate, int)) *ServiceInstanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServiceInstanceCreateBulk{err: fmt.Errorf("calling to ServiceInstanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServiceInstanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServiceInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceInstance.
func (c *ServiceInstanceClient) Update() *ServiceInstanceUpdate {
	mutation := newServiceInstanceMutation(c.config, OpUpdate)
	return &ServiceInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceInstanceClient) UpdateOne(si *ServiceInstance) *ServiceInstanceUpdateOne {
	mutation := newServiceInstanceMutation(c.config, OpUpdateOne, withServiceInstance(si))
	return &ServiceInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceInstanceClient) UpdateOneID(id string) *ServiceInstanceUpdateOne {
	mutation := newServiceInstanceMutation(c.config, OpUpdateOne, withServiceInstanceID(id))
	return &ServiceInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceInstance.
func (c *ServiceInstanceClient) Delete() *ServiceInstanceDelete {
	mutation := newServiceInstanceMutation(c.config, OpDelete)
	return &ServiceInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceInstanceClient) DeleteOne(si *ServiceInstance) *ServiceInstanceDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceInstanceClient) DeleteOneID(id string) *ServiceInstanceDeleteOne {
	builder := c.Delete().Where(serviceinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceInstanceDeleteOne{builder}
}

// Query returns a query builder for ServiceInstance.
func (c *ServiceInstanceClient) Query() *ServiceInstanceQuery {
	return &ServiceInstanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServiceInstance},
		inters: c.Interceptors(),
	}
}

// Get returns a ServiceInstance entity by its id.
func (c *ServiceInstanceClient) Get(ctx context.Context, id string) (*ServiceInstance, error) {
	return c.Query().Where(serviceinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceInstanceClient) GetX(ctx context.Context, id string) *ServiceInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNode queries the node edge of a ServiceInstance.
func (c *ServiceInstanceClient) QueryNode(si *ServiceInstance) *NodeQuery {
	query := (&NodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceinstance.Table, serviceinstance.FieldID, id),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serviceinstance.NodeTable, serviceinstance.NodeColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceInstanceClient) Hooks() []Hook {
	return c.hooks.ServiceInstance
}

// Interceptors returns the client interceptors.
func (c *ServiceInstanceClient) Interceptors() []Interceptor {
	return c.inters.ServiceInstance
}

func (c *ServiceInstanceClient) mutate(ctx context.Context, m *ServiceInstanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ServiceInstance mutation op: %q", m.Op())
	}
}

// SingBoxConfigClient is a client for the SingBoxConfig schema.
type SingBoxConfigClient struct {
	config
}

// NewSingBoxConfigClient returns a client for the SingBoxConfig from the given config.
func NewSingBoxConfigClient(c config) *SingBoxConfigClient {
	return &SingBoxConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `singboxconfig.Hooks(f(g(h())))`.
func (c *SingBoxConfigClient) Use(hooks ...Hook) {
	c.hooks.SingBoxConfig = append(c.hooks.SingBoxConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `singboxconfig.Intercept(f(g(h())))`.
func (c *SingBoxConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.SingBoxConfig = append(c.inters.SingBoxConfig, interceptors...)
}

// Create returns a builder for creating a SingBoxConfig entity.
func (c *SingBoxConfigClient) Create() *SingBoxConfigCreate {
	mutation := newSingBoxConfigMutation(c.config, OpCreate)
	return &SingBoxConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SingBoxConfig entities.
func (c *SingBoxConfigClient) CreateBulk(builders ...*SingBoxConfigCreate) *SingBoxConfigCreateBulk {
	return &SingBoxConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SingBoxConfigClient) MapCreateBulk(slice any, setFunc func(*SingBoxConfigCreate, int)) *SingBoxConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SingBoxConfigCreateBulk{err: fmt.Errorf("calling to SingBoxConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SingBoxConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SingBoxConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SingBoxConfig.
func (c *SingBoxConfigClient) Update() *SingBoxConfigUpdate {
	mutation := newSingBoxConfigMutation(c.config, OpUpdate)
	return &SingBoxConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SingBoxConfigClient) UpdateOne(sbc *SingBoxConfig) *SingBoxConfigUpdateOne {
	mutation := newSingBoxConfigMutation(c.config, OpUpdateOne, withSingBoxConfig(sbc))
	return &SingBoxConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SingBoxConfigClient) UpdateOneID(id string) *SingBoxConfigUpdateOne {
	mutation := newSingBoxConfigMutation(c.config, OpUpdateOne, withSingBoxConfigID(id))
	return &SingBoxConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SingBoxConfig.
func (c *SingBoxConfigClient) Delete() *SingBoxConfigDelete {
	mutation := newSingBoxConfigMutation(c.config, OpDelete)
	return &SingBoxConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SingBoxConfigClient) DeleteOne(sbc *SingBoxConfig) *SingBoxConfigDeleteOne {
	return c.DeleteOneID(sbc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SingBoxConfigClient) DeleteOneID(id string) *SingBoxConfigDeleteOne {
	builder := c.Delete().Where(singboxconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SingBoxConfigDeleteOne{builder}
}

// Query returns a query builder for SingBoxConfig.
func (c *SingBoxConfigClient) Query() *SingBoxConfigQuery {
	return &SingBoxConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSingBoxConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a SingBoxConfig entity by its id.
func (c *SingBoxConfigClient) Get(ctx context.Context, id string) (*SingBoxConfig, error) {
	return c.Query().Where(singboxconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SingBoxConfigClient) GetX(ctx context.Context, id string) *SingBoxConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SingBoxConfigClient) Hooks() []Hook {
	return c.hooks.SingBoxConfig
}

// Interceptors returns the client interceptors.
func (c *SingBoxConfigClient) Interceptors() []Interceptor {
	return c.inters.SingBoxConfig
}

func (c *SingBoxConfigClient) mutate(ctx context.Context, m *SingBoxConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SingBoxConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SingBoxConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SingBoxConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SingBoxConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SingBoxConfig mutation op: %q", m.Op())
	}
}

// XrayConfigClient is a client for the XrayConfig schema.
type XrayConfigClient struct {
	config
}

// NewXrayConfigClient returns a client for the XrayConfig from the given config.
func NewXrayConfigClient(c config) *XrayConfigClient {
	return &XrayConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `xrayconfig.Hooks(f(g(h())))`.
func (c *XrayConfigClient) Use(hooks ...Hook) {
	c.hooks.XrayConfig = append(c.hooks.XrayConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `xrayconfig.Intercept(f(g(h())))`.
func (c *XrayConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.XrayConfig = append(c.inters.XrayConfig, interceptors...)
}

// Create returns a builder for creating a XrayConfig entity.
func (c *XrayConfigClient) Create() *XrayConfigCreate {
	mutation := newXrayConfigMutation(c.config, OpCreate)
	return &XrayConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of XrayConfig entities.
func (c *XrayConfigClient) CreateBulk(builders ...*XrayConfigCreate) *XrayConfigCreateBulk {
	return &XrayConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *XrayConfigClient) MapCreateBulk(slice any, setFunc func(*XrayConfigCreate, int)) *XrayConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &XrayConfigCreateBulk{err: fmt.Errorf("calling to XrayConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*XrayConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &XrayConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for XrayConfig.
func (c *XrayConfigClient) Update() *XrayConfigUpdate {
	mutation := newXrayConfigMutation(c.config, OpUpdate)
	return &XrayConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *XrayConfigClient) UpdateOne(xc *XrayConfig) *XrayConfigUpdateOne {
	mutation := newXrayConfigMutation(c.config, OpUpdateOne, withXrayConfig(xc))
	return &XrayConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *XrayConfigClient) UpdateOneID(id string) *XrayConfigUpdateOne {
	mutation := newXrayConfigMutation(c.config, OpUpdateOne, withXrayConfigID(id))
	return &XrayConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for XrayConfig.
func (c *XrayConfigClient) Delete() *XrayConfigDelete {
	mutation := newXrayConfigMutation(c.config, OpDelete)
	return &XrayConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *XrayConfigClient) DeleteOne(xc *XrayConfig) *XrayConfigDeleteOne {
	return c.DeleteOneID(xc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *XrayConfigClient) DeleteOneID(id string) *XrayConfigDeleteOne {
	builder := c.Delete().Where(xrayconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &XrayConfigDeleteOne{builder}
}

// Query returns a query builder for XrayConfig.
func (c *XrayConfigClient) Query() *XrayConfigQuery {
	return &XrayConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeXrayConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a XrayConfig entity by its id.
func (c *XrayConfigClient) Get(ctx context.Context, id string) (*XrayConfig, error) {
	return c.Query().Where(xrayconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *XrayConfigClient) GetX(ctx context.Context, id string) *XrayConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *XrayConfigClient) Hooks() []Hook {
	return c.hooks.XrayConfig
}

// Interceptors returns the client interceptors.
func (c *XrayConfigClient) Interceptors() []Interceptor {
	return c.inters.XrayConfig
}

func (c *XrayConfigClient) mutate(ctx context.Context, m *XrayConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&XrayConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&XrayConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&XrayConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&XrayConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown XrayConfig mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AgentToken, HAProxyConfig, Node, ServiceInstance, SingBoxConfig,
		XrayConfig []ent.Hook
	}
	inters struct {
		AgentToken, HAProxyConfig, Node, ServiceInstance, SingBoxConfig,
		XrayConfig []ent.Interceptor
	}
)
