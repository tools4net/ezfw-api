// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/haproxyconfig"
	"github.com/tools4net/ezfw/backend/ent/predicate"
	"github.com/tools4net/ezfw/backend/internal/models"
)

// HAProxyConfigUpdate is the builder for updating HAProxyConfig entities.
type HAProxyConfigUpdate struct {
	config
	hooks    []Hook
	mutation *HAProxyConfigMutation
}

// Where appends a list predicates to the HAProxyConfigUpdate builder.
func (hpcu *HAProxyConfigUpdate) Where(ps ...predicate.HAProxyConfig) *HAProxyConfigUpdate {
	hpcu.mutation.Where(ps...)
	return hpcu
}

// SetName sets the "name" field.
func (hpcu *HAProxyConfigUpdate) SetName(s string) *HAProxyConfigUpdate {
	hpcu.mutation.SetName(s)
	return hpcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hpcu *HAProxyConfigUpdate) SetNillableName(s *string) *HAProxyConfigUpdate {
	if s != nil {
		hpcu.SetName(*s)
	}
	return hpcu
}

// SetDescription sets the "description" field.
func (hpcu *HAProxyConfigUpdate) SetDescription(s string) *HAProxyConfigUpdate {
	hpcu.mutation.SetDescription(s)
	return hpcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hpcu *HAProxyConfigUpdate) SetNillableDescription(s *string) *HAProxyConfigUpdate {
	if s != nil {
		hpcu.SetDescription(*s)
	}
	return hpcu
}

// ClearDescription clears the value of the "description" field.
func (hpcu *HAProxyConfigUpdate) ClearDescription() *HAProxyConfigUpdate {
	hpcu.mutation.ClearDescription()
	return hpcu
}

// SetUpdatedAt sets the "updated_at" field.
func (hpcu *HAProxyConfigUpdate) SetUpdatedAt(t time.Time) *HAProxyConfigUpdate {
	hpcu.mutation.SetUpdatedAt(t)
	return hpcu
}

// SetGlobalConfig sets the "global_config" field.
func (hpcu *HAProxyConfigUpdate) SetGlobalConfig(mpg *models.HAProxyGlobal) *HAProxyConfigUpdate {
	hpcu.mutation.SetGlobalConfig(mpg)
	return hpcu
}

// ClearGlobalConfig clears the value of the "global_config" field.
func (hpcu *HAProxyConfigUpdate) ClearGlobalConfig() *HAProxyConfigUpdate {
	hpcu.mutation.ClearGlobalConfig()
	return hpcu
}

// SetDefaultsConfig sets the "defaults_config" field.
func (hpcu *HAProxyConfigUpdate) SetDefaultsConfig(mpd *models.HAProxyDefaults) *HAProxyConfigUpdate {
	hpcu.mutation.SetDefaultsConfig(mpd)
	return hpcu
}

// ClearDefaultsConfig clears the value of the "defaults_config" field.
func (hpcu *HAProxyConfigUpdate) ClearDefaultsConfig() *HAProxyConfigUpdate {
	hpcu.mutation.ClearDefaultsConfig()
	return hpcu
}

// SetFrontends sets the "frontends" field.
func (hpcu *HAProxyConfigUpdate) SetFrontends(mpf []models.HAProxyFrontend) *HAProxyConfigUpdate {
	hpcu.mutation.SetFrontends(mpf)
	return hpcu
}

// AppendFrontends appends mpf to the "frontends" field.
func (hpcu *HAProxyConfigUpdate) AppendFrontends(mpf []models.HAProxyFrontend) *HAProxyConfigUpdate {
	hpcu.mutation.AppendFrontends(mpf)
	return hpcu
}

// ClearFrontends clears the value of the "frontends" field.
func (hpcu *HAProxyConfigUpdate) ClearFrontends() *HAProxyConfigUpdate {
	hpcu.mutation.ClearFrontends()
	return hpcu
}

// SetBackends sets the "backends" field.
func (hpcu *HAProxyConfigUpdate) SetBackends(mpb []models.HAProxyBackend) *HAProxyConfigUpdate {
	hpcu.mutation.SetBackends(mpb)
	return hpcu
}

// AppendBackends appends mpb to the "backends" field.
func (hpcu *HAProxyConfigUpdate) AppendBackends(mpb []models.HAProxyBackend) *HAProxyConfigUpdate {
	hpcu.mutation.AppendBackends(mpb)
	return hpcu
}

// ClearBackends clears the value of the "backends" field.
func (hpcu *HAProxyConfigUpdate) ClearBackends() *HAProxyConfigUpdate {
	hpcu.mutation.ClearBackends()
	return hpcu
}

// SetListens sets the "listens" field.
func (hpcu *HAProxyConfigUpdate) SetListens(mpl []models.HAProxyListen) *HAProxyConfigUpdate {
	hpcu.mutation.SetListens(mpl)
	return hpcu
}

// AppendListens appends mpl to the "listens" field.
func (hpcu *HAProxyConfigUpdate) AppendListens(mpl []models.HAProxyListen) *HAProxyConfigUpdate {
	hpcu.mutation.AppendListens(mpl)
	return hpcu
}

// ClearListens clears the value of the "listens" field.
func (hpcu *HAProxyConfigUpdate) ClearListens() *HAProxyConfigUpdate {
	hpcu.mutation.ClearListens()
	return hpcu
}

// SetStatsConfig sets the "stats_config" field.
func (hpcu *HAProxyConfigUpdate) SetStatsConfig(mps *models.HAProxyStats) *HAProxyConfigUpdate {
	hpcu.mutation.SetStatsConfig(mps)
	return hpcu
}

// ClearStatsConfig clears the value of the "stats_config" field.
func (hpcu *HAProxyConfigUpdate) ClearStatsConfig() *HAProxyConfigUpdate {
	hpcu.mutation.ClearStatsConfig()
	return hpcu
}

// Mutation returns the HAProxyConfigMutation object of the builder.
func (hpcu *HAProxyConfigUpdate) Mutation() *HAProxyConfigMutation {
	return hpcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hpcu *HAProxyConfigUpdate) Save(ctx context.Context) (int, error) {
	hpcu.defaults()
	return withHooks(ctx, hpcu.sqlSave, hpcu.mutation, hpcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hpcu *HAProxyConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := hpcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hpcu *HAProxyConfigUpdate) Exec(ctx context.Context) error {
	_, err := hpcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hpcu *HAProxyConfigUpdate) ExecX(ctx context.Context) {
	if err := hpcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hpcu *HAProxyConfigUpdate) defaults() {
	if _, ok := hpcu.mutation.UpdatedAt(); !ok {
		v := haproxyconfig.UpdateDefaultUpdatedAt()
		hpcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hpcu *HAProxyConfigUpdate) check() error {
	if v, ok := hpcu.mutation.Name(); ok {
		if err := haproxyconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "HAProxyConfig.name": %w`, err)}
		}
	}
	return nil
}

func (hpcu *HAProxyConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hpcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(haproxyconfig.Table, haproxyconfig.Columns, sqlgraph.NewFieldSpec(haproxyconfig.FieldID, field.TypeString))
	if ps := hpcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hpcu.mutation.Name(); ok {
		_spec.SetField(haproxyconfig.FieldName, field.TypeString, value)
	}
	if value, ok := hpcu.mutation.Description(); ok {
		_spec.SetField(haproxyconfig.FieldDescription, field.TypeString, value)
	}
	if hpcu.mutation.DescriptionCleared() {
		_spec.ClearField(haproxyconfig.FieldDescription, field.TypeString)
	}
	if value, ok := hpcu.mutation.UpdatedAt(); ok {
		_spec.SetField(haproxyconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hpcu.mutation.GlobalConfig(); ok {
		_spec.SetField(haproxyconfig.FieldGlobalConfig, field.TypeJSON, value)
	}
	if hpcu.mutation.GlobalConfigCleared() {
		_spec.ClearField(haproxyconfig.FieldGlobalConfig, field.TypeJSON)
	}
	if value, ok := hpcu.mutation.DefaultsConfig(); ok {
		_spec.SetField(haproxyconfig.FieldDefaultsConfig, field.TypeJSON, value)
	}
	if hpcu.mutation.DefaultsConfigCleared() {
		_spec.ClearField(haproxyconfig.FieldDefaultsConfig, field.TypeJSON)
	}
	if value, ok := hpcu.mutation.Frontends(); ok {
		_spec.SetField(haproxyconfig.FieldFrontends, field.TypeJSON, value)
	}
	if value, ok := hpcu.mutation.AppendedFrontends(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, haproxyconfig.FieldFrontends, value)
		})
	}
	if hpcu.mutation.FrontendsCleared() {
		_spec.ClearField(haproxyconfig.FieldFrontends, field.TypeJSON)
	}
	if value, ok := hpcu.mutation.Backends(); ok {
		_spec.SetField(haproxyconfig.FieldBackends, field.TypeJSON, value)
	}
	if value, ok := hpcu.mutation.AppendedBackends(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, haproxyconfig.FieldBackends, value)
		})
	}
	if hpcu.mutation.BackendsCleared() {
		_spec.ClearField(haproxyconfig.FieldBackends, field.TypeJSON)
	}
	if value, ok := hpcu.mutation.Listens(); ok {
		_spec.SetField(haproxyconfig.FieldListens, field.TypeJSON, value)
	}
	if value, ok := hpcu.mutation.AppendedListens(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, haproxyconfig.FieldListens, value)
		})
	}
	if hpcu.mutation.ListensCleared() {
		_spec.ClearField(haproxyconfig.FieldListens, field.TypeJSON)
	}
	if value, ok := hpcu.mutation.StatsConfig(); ok {
		_spec.SetField(haproxyconfig.FieldStatsConfig, field.TypeJSON, value)
	}
	if hpcu.mutation.StatsConfigCleared() {
		_spec.ClearField(haproxyconfig.FieldStatsConfig, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hpcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{haproxyconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hpcu.mutation.done = true
	return n, nil
}

// HAProxyConfigUpdateOne is the builder for updating a single HAProxyConfig entity.
type HAProxyConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HAProxyConfigMutation
}

// SetName sets the "name" field.
func (hpcuo *HAProxyConfigUpdateOne) SetName(s string) *HAProxyConfigUpdateOne {
	hpcuo.mutation.SetName(s)
	return hpcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hpcuo *HAProxyConfigUpdateOne) SetNillableName(s *string) *HAProxyConfigUpdateOne {
	if s != nil {
		hpcuo.SetName(*s)
	}
	return hpcuo
}

// SetDescription sets the "description" field.
func (hpcuo *HAProxyConfigUpdateOne) SetDescription(s string) *HAProxyConfigUpdateOne {
	hpcuo.mutation.SetDescription(s)
	return hpcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hpcuo *HAProxyConfigUpdateOne) SetNillableDescription(s *string) *HAProxyConfigUpdateOne {
	if s != nil {
		hpcuo.SetDescription(*s)
	}
	return hpcuo
}

// ClearDescription clears the value of the "description" field.
func (hpcuo *HAProxyConfigUpdateOne) ClearDescription() *HAProxyConfigUpdateOne {
	hpcuo.mutation.ClearDescription()
	return hpcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (hpcuo *HAProxyConfigUpdateOne) SetUpdatedAt(t time.Time) *HAProxyConfigUpdateOne {
	hpcuo.mutation.SetUpdatedAt(t)
	return hpcuo
}

// SetGlobalConfig sets the "global_config" field.
func (hpcuo *HAProxyConfigUpdateOne) SetGlobalConfig(mpg *models.HAProxyGlobal) *HAProxyConfigUpdateOne {
	hpcuo.mutation.SetGlobalConfig(mpg)
	return hpcuo
}

// ClearGlobalConfig clears the value of the "global_config" field.
func (hpcuo *HAProxyConfigUpdateOne) ClearGlobalConfig() *HAProxyConfigUpdateOne {
	hpcuo.mutation.ClearGlobalConfig()
	return hpcuo
}

// SetDefaultsConfig sets the "defaults_config" field.
func (hpcuo *HAProxyConfigUpdateOne) SetDefaultsConfig(mpd *models.HAProxyDefaults) *HAProxyConfigUpdateOne {
	hpcuo.mutation.SetDefaultsConfig(mpd)
	return hpcuo
}

// ClearDefaultsConfig clears the value of the "defaults_config" field.
func (hpcuo *HAProxyConfigUpdateOne) ClearDefaultsConfig() *HAProxyConfigUpdateOne {
	hpcuo.mutation.ClearDefaultsConfig()
	return hpcuo
}

// SetFrontends sets the "frontends" field.
func (hpcuo *HAProxyConfigUpdateOne) SetFrontends(mpf []models.HAProxyFrontend) *HAProxyConfigUpdateOne {
	hpcuo.mutation.SetFrontends(mpf)
	return hpcuo
}

// AppendFrontends appends mpf to the "frontends" field.
func (hpcuo *HAProxyConfigUpdateOne) AppendFrontends(mpf []models.HAProxyFrontend) *HAProxyConfigUpdateOne {
	hpcuo.mutation.AppendFrontends(mpf)
	return hpcuo
}

// ClearFrontends clears the value of the "frontends" field.
func (hpcuo *HAProxyConfigUpdateOne) ClearFrontends() *HAProxyConfigUpdateOne {
	hpcuo.mutation.ClearFrontends()
	return hpcuo
}

// SetBackends sets the "backends" field.
func (hpcuo *HAProxyConfigUpdateOne) SetBackends(mpb []models.HAProxyBackend) *HAProxyConfigUpdateOne {
	hpcuo.mutation.SetBackends(mpb)
	return hpcuo
}

// AppendBackends appends mpb to the "backends" field.
func (hpcuo *HAProxyConfigUpdateOne) AppendBackends(mpb []models.HAProxyBackend) *HAProxyConfigUpdateOne {
	hpcuo.mutation.AppendBackends(mpb)
	return hpcuo
}

// ClearBackends clears the value of the "backends" field.
func (hpcuo *HAProxyConfigUpdateOne) ClearBackends() *HAProxyConfigUpdateOne {
	hpcuo.mutation.ClearBackends()
	return hpcuo
}

// SetListens sets the "listens" field.
func (hpcuo *HAProxyConfigUpdateOne) SetListens(mpl []models.HAProxyListen) *HAProxyConfigUpdateOne {
	hpcuo.mutation.SetListens(mpl)
	return hpcuo
}

// AppendListens appends mpl to the "listens" field.
func (hpcuo *HAProxyConfigUpdateOne) AppendListens(mpl []models.HAProxyListen) *HAProxyConfigUpdateOne {
	hpcuo.mutation.AppendListens(mpl)
	return hpcuo
}

// ClearListens clears the value of the "listens" field.
func (hpcuo *HAProxyConfigUpdateOne) ClearListens() *HAProxyConfigUpdateOne {
	hpcuo.mutation.ClearListens()
	return hpcuo
}

// SetStatsConfig sets the "stats_config" field.
func (hpcuo *HAProxyConfigUpdateOne) SetStatsConfig(mps *models.HAProxyStats) *HAProxyConfigUpdateOne {
	hpcuo.mutation.SetStatsConfig(mps)
	return hpcuo
}

// ClearStatsConfig clears the value of the "stats_config" field.
func (hpcuo *HAProxyConfigUpdateOne) ClearStatsConfig() *HAProxyConfigUpdateOne {
	hpcuo.mutation.ClearStatsConfig()
	return hpcuo
}

// Mutation returns the HAProxyConfigMutation object of the builder.
func (hpcuo *HAProxyConfigUpdateOne) Mutation() *HAProxyConfigMutation {
	return hpcuo.mutation
}

// Where appends a list predicates to the HAProxyConfigUpdate builder.
func (hpcuo *HAProxyConfigUpdateOne) Where(ps ...predicate.HAProxyConfig) *HAProxyConfigUpdateOne {
	hpcuo.mutation.Where(ps...)
	return hpcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hpcuo *HAProxyConfigUpdateOne) Select(field string, fields ...string) *HAProxyConfigUpdateOne {
	hpcuo.fields = append([]string{field}, fields...)
	return hpcuo
}

// Save executes the query and returns the updated HAProxyConfig entity.
func (hpcuo *HAProxyConfigUpdateOne) Save(ctx context.Context) (*HAProxyConfig, error) {
	hpcuo.defaults()
	return withHooks(ctx, hpcuo.sqlSave, hpcuo.mutation, hpcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hpcuo *HAProxyConfigUpdateOne) SaveX(ctx context.Context) *HAProxyConfig {
	node, err := hpcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hpcuo *HAProxyConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := hpcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hpcuo *HAProxyConfigUpdateOne) ExecX(ctx context.Context) {
	if err := hpcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hpcuo *HAProxyConfigUpdateOne) defaults() {
	if _, ok := hpcuo.mutation.UpdatedAt(); !ok {
		v := haproxyconfig.UpdateDefaultUpdatedAt()
		hpcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hpcuo *HAProxyConfigUpdateOne) check() error {
	if v, ok := hpcuo.mutation.Name(); ok {
		if err := haproxyconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "HAProxyConfig.name": %w`, err)}
		}
	}
	return nil
}

func (hpcuo *HAProxyConfigUpdateOne) sqlSave(ctx context.Context) (_node *HAProxyConfig, err error) {
	if err := hpcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(haproxyconfig.Table, haproxyconfig.Columns, sqlgraph.NewFieldSpec(haproxyconfig.FieldID, field.TypeString))
	id, ok := hpcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HAProxyConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hpcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, haproxyconfig.FieldID)
		for _, f := range fields {
			if !haproxyconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != haproxyconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hpcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hpcuo.mutation.Name(); ok {
		_spec.SetField(haproxyconfig.FieldName, field.TypeString, value)
	}
	if value, ok := hpcuo.mutation.Description(); ok {
		_spec.SetField(haproxyconfig.FieldDescription, field.TypeString, value)
	}
	if hpcuo.mutation.DescriptionCleared() {
		_spec.ClearField(haproxyconfig.FieldDescription, field.TypeString)
	}
	if value, ok := hpcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(haproxyconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hpcuo.mutation.GlobalConfig(); ok {
		_spec.SetField(haproxyconfig.FieldGlobalConfig, field.TypeJSON, value)
	}
	if hpcuo.mutation.GlobalConfigCleared() {
		_spec.ClearField(haproxyconfig.FieldGlobalConfig, field.TypeJSON)
	}
	if value, ok := hpcuo.mutation.DefaultsConfig(); ok {
		_spec.SetField(haproxyconfig.FieldDefaultsConfig, field.TypeJSON, value)
	}
	if hpcuo.mutation.DefaultsConfigCleared() {
		_spec.ClearField(haproxyconfig.FieldDefaultsConfig, field.TypeJSON)
	}
	if value, ok := hpcuo.mutation.Frontends(); ok {
		_spec.SetField(haproxyconfig.FieldFrontends, field.TypeJSON, value)
	}
	if value, ok := hpcuo.mutation.AppendedFrontends(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, haproxyconfig.FieldFrontends, value)
		})
	}
	if hpcuo.mutation.FrontendsCleared() {
		_spec.ClearField(haproxyconfig.FieldFrontends, field.TypeJSON)
	}
	if value, ok := hpcuo.mutation.Backends(); ok {
		_spec.SetField(haproxyconfig.FieldBackends, field.TypeJSON, value)
	}
	if value, ok := hpcuo.mutation.AppendedBackends(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, haproxyconfig.FieldBackends, value)
		})
	}
	if hpcuo.mutation.BackendsCleared() {
		_spec.ClearField(haproxyconfig.FieldBackends, field.TypeJSON)
	}
	if value, ok := hpcuo.mutation.Listens(); ok {
		_spec.SetField(haproxyconfig.FieldListens, field.TypeJSON, value)
	}
	if value, ok := hpcuo.mutation.AppendedListens(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, haproxyconfig.FieldListens, value)
		})
	}
	if hpcuo.mutation.ListensCleared() {
		_spec.ClearField(haproxyconfig.FieldListens, field.TypeJSON)
	}
	if value, ok := hpcuo.mutation.StatsConfig(); ok {
		_spec.SetField(haproxyconfig.FieldStatsConfig, field.TypeJSON, value)
	}
	if hpcuo.mutation.StatsConfigCleared() {
		_spec.ClearField(haproxyconfig.FieldStatsConfig, field.TypeJSON)
	}
	_node = &HAProxyConfig{config: hpcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hpcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{haproxyconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hpcuo.mutation.done = true
	return _node, nil
}
