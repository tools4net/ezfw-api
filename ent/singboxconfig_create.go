// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/singboxconfig"
	"github.com/tools4net/ezfw/backend/internal/models"
)

// SingBoxConfigCreate is the builder for creating a SingBoxConfig entity.
type SingBoxConfigCreate struct {
	config
	mutation *SingBoxConfigMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sbcc *SingBoxConfigCreate) SetName(s string) *SingBoxConfigCreate {
	sbcc.mutation.SetName(s)
	return sbcc
}

// SetDescription sets the "description" field.
func (sbcc *SingBoxConfigCreate) SetDescription(s string) *SingBoxConfigCreate {
	sbcc.mutation.SetDescription(s)
	return sbcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sbcc *SingBoxConfigCreate) SetNillableDescription(s *string) *SingBoxConfigCreate {
	if s != nil {
		sbcc.SetDescription(*s)
	}
	return sbcc
}

// SetCreatedAt sets the "created_at" field.
func (sbcc *SingBoxConfigCreate) SetCreatedAt(t time.Time) *SingBoxConfigCreate {
	sbcc.mutation.SetCreatedAt(t)
	return sbcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sbcc *SingBoxConfigCreate) SetNillableCreatedAt(t *time.Time) *SingBoxConfigCreate {
	if t != nil {
		sbcc.SetCreatedAt(*t)
	}
	return sbcc
}

// SetUpdatedAt sets the "updated_at" field.
func (sbcc *SingBoxConfigCreate) SetUpdatedAt(t time.Time) *SingBoxConfigCreate {
	sbcc.mutation.SetUpdatedAt(t)
	return sbcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sbcc *SingBoxConfigCreate) SetNillableUpdatedAt(t *time.Time) *SingBoxConfigCreate {
	if t != nil {
		sbcc.SetUpdatedAt(*t)
	}
	return sbcc
}

// SetLogConfig sets the "log_config" field.
func (sbcc *SingBoxConfigCreate) SetLogConfig(mblc *models.SingBoxLogConfig) *SingBoxConfigCreate {
	sbcc.mutation.SetLogConfig(mblc)
	return sbcc
}

// SetDNSConfig sets the "dns_config" field.
func (sbcc *SingBoxConfigCreate) SetDNSConfig(mbdc *models.SingBoxDNSConfig) *SingBoxConfigCreate {
	sbcc.mutation.SetDNSConfig(mbdc)
	return sbcc
}

// SetNtpConfig sets the "ntp_config" field.
func (sbcc *SingBoxConfigCreate) SetNtpConfig(mbnc *models.SingBoxNTPConfig) *SingBoxConfigCreate {
	sbcc.mutation.SetNtpConfig(mbnc)
	return sbcc
}

// SetInbounds sets the "inbounds" field.
func (sbcc *SingBoxConfigCreate) SetInbounds(i []interface{}) *SingBoxConfigCreate {
	sbcc.mutation.SetInbounds(i)
	return sbcc
}

// SetOutbounds sets the "outbounds" field.
func (sbcc *SingBoxConfigCreate) SetOutbounds(i []interface{}) *SingBoxConfigCreate {
	sbcc.mutation.SetOutbounds(i)
	return sbcc
}

// SetRouteConfig sets the "route_config" field.
func (sbcc *SingBoxConfigCreate) SetRouteConfig(mbrc *models.SingBoxRouteConfig) *SingBoxConfigCreate {
	sbcc.mutation.SetRouteConfig(mbrc)
	return sbcc
}

// SetExperimentalConfig sets the "experimental_config" field.
func (sbcc *SingBoxConfigCreate) SetExperimentalConfig(m map[string]interface{}) *SingBoxConfigCreate {
	sbcc.mutation.SetExperimentalConfig(m)
	return sbcc
}

// SetEndpoints sets the "endpoints" field.
func (sbcc *SingBoxConfigCreate) SetEndpoints(i []interface{}) *SingBoxConfigCreate {
	sbcc.mutation.SetEndpoints(i)
	return sbcc
}

// SetCertificateConfig sets the "certificate_config" field.
func (sbcc *SingBoxConfigCreate) SetCertificateConfig(m map[string]interface{}) *SingBoxConfigCreate {
	sbcc.mutation.SetCertificateConfig(m)
	return sbcc
}

// SetID sets the "id" field.
func (sbcc *SingBoxConfigCreate) SetID(s string) *SingBoxConfigCreate {
	sbcc.mutation.SetID(s)
	return sbcc
}

// Mutation returns the SingBoxConfigMutation object of the builder.
func (sbcc *SingBoxConfigCreate) Mutation() *SingBoxConfigMutation {
	return sbcc.mutation
}

// Save creates the SingBoxConfig in the database.
func (sbcc *SingBoxConfigCreate) Save(ctx context.Context) (*SingBoxConfig, error) {
	sbcc.defaults()
	return withHooks(ctx, sbcc.sqlSave, sbcc.mutation, sbcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sbcc *SingBoxConfigCreate) SaveX(ctx context.Context) *SingBoxConfig {
	v, err := sbcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbcc *SingBoxConfigCreate) Exec(ctx context.Context) error {
	_, err := sbcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbcc *SingBoxConfigCreate) ExecX(ctx context.Context) {
	if err := sbcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sbcc *SingBoxConfigCreate) defaults() {
	if _, ok := sbcc.mutation.CreatedAt(); !ok {
		v := singboxconfig.DefaultCreatedAt()
		sbcc.mutation.SetCreatedAt(v)
	}
	if _, ok := sbcc.mutation.UpdatedAt(); !ok {
		v := singboxconfig.DefaultUpdatedAt()
		sbcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbcc *SingBoxConfigCreate) check() error {
	if _, ok := sbcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SingBoxConfig.name"`)}
	}
	if v, ok := sbcc.mutation.Name(); ok {
		if err := singboxconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SingBoxConfig.name": %w`, err)}
		}
	}
	if _, ok := sbcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SingBoxConfig.created_at"`)}
	}
	if _, ok := sbcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SingBoxConfig.updated_at"`)}
	}
	return nil
}

func (sbcc *SingBoxConfigCreate) sqlSave(ctx context.Context) (*SingBoxConfig, error) {
	if err := sbcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sbcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sbcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SingBoxConfig.ID type: %T", _spec.ID.Value)
		}
	}
	sbcc.mutation.id = &_node.ID
	sbcc.mutation.done = true
	return _node, nil
}

func (sbcc *SingBoxConfigCreate) createSpec() (*SingBoxConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &SingBoxConfig{config: sbcc.config}
		_spec = sqlgraph.NewCreateSpec(singboxconfig.Table, sqlgraph.NewFieldSpec(singboxconfig.FieldID, field.TypeString))
	)
	if id, ok := sbcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sbcc.mutation.Name(); ok {
		_spec.SetField(singboxconfig.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sbcc.mutation.Description(); ok {
		_spec.SetField(singboxconfig.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sbcc.mutation.CreatedAt(); ok {
		_spec.SetField(singboxconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sbcc.mutation.UpdatedAt(); ok {
		_spec.SetField(singboxconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sbcc.mutation.LogConfig(); ok {
		_spec.SetField(singboxconfig.FieldLogConfig, field.TypeJSON, value)
		_node.LogConfig = value
	}
	if value, ok := sbcc.mutation.DNSConfig(); ok {
		_spec.SetField(singboxconfig.FieldDNSConfig, field.TypeJSON, value)
		_node.DNSConfig = value
	}
	if value, ok := sbcc.mutation.NtpConfig(); ok {
		_spec.SetField(singboxconfig.FieldNtpConfig, field.TypeJSON, value)
		_node.NtpConfig = value
	}
	if value, ok := sbcc.mutation.Inbounds(); ok {
		_spec.SetField(singboxconfig.FieldInbounds, field.TypeJSON, value)
		_node.Inbounds = value
	}
	if value, ok := sbcc.mutation.Outbounds(); ok {
		_spec.SetField(singboxconfig.FieldOutbounds, field.TypeJSON, value)
		_node.Outbounds = value
	}
	if value, ok := sbcc.mutation.RouteConfig(); ok {
		_spec.SetField(singboxconfig.FieldRouteConfig, field.TypeJSON, value)
		_node.RouteConfig = value
	}
	if value, ok := sbcc.mutation.ExperimentalConfig(); ok {
		_spec.SetField(singboxconfig.FieldExperimentalConfig, field.TypeJSON, value)
		_node.ExperimentalConfig = value
	}
	if value, ok := sbcc.mutation.Endpoints(); ok {
		_spec.SetField(singboxconfig.FieldEndpoints, field.TypeJSON, value)
		_node.Endpoints = value
	}
	if value, ok := sbcc.mutation.CertificateConfig(); ok {
		_spec.SetField(singboxconfig.FieldCertificateConfig, field.TypeJSON, value)
		_node.CertificateConfig = value
	}
	return _node, _spec
}

// SingBoxConfigCreateBulk is the builder for creating many SingBoxConfig entities in bulk.
type SingBoxConfigCreateBulk struct {
	config
	err      error
	builders []*SingBoxConfigCreate
}

// Save creates the SingBoxConfig entities in the database.
func (sbccb *SingBoxConfigCreateBulk) Save(ctx context.Context) ([]*SingBoxConfig, error) {
	if sbccb.err != nil {
		return nil, sbccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sbccb.builders))
	nodes := make([]*SingBoxConfig, len(sbccb.builders))
	mutators := make([]Mutator, len(sbccb.builders))
	for i := range sbccb.builders {
		func(i int, root context.Context) {
			builder := sbccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SingBoxConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sbccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sbccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sbccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sbccb *SingBoxConfigCreateBulk) SaveX(ctx context.Context) []*SingBoxConfig {
	v, err := sbccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbccb *SingBoxConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := sbccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbccb *SingBoxConfigCreateBulk) ExecX(ctx context.Context) {
	if err := sbccb.Exec(ctx); err != nil {
		panic(err)
	}
}
