// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/agenttoken"
	"github.com/tools4net/ezfw/backend/ent/node"
	"github.com/tools4net/ezfw/backend/ent/serviceinstance"
	"github.com/tools4net/ezfw/backend/internal/models"
)

// NodeCreate is the builder for creating a Node entity.
type NodeCreate struct {
	config
	mutation *NodeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (nc *NodeCreate) SetName(s string) *NodeCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetDescription sets the "description" field.
func (nc *NodeCreate) SetDescription(s string) *NodeCreate {
	nc.mutation.SetDescription(s)
	return nc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nc *NodeCreate) SetNillableDescription(s *string) *NodeCreate {
	if s != nil {
		nc.SetDescription(*s)
	}
	return nc
}

// SetHostname sets the "hostname" field.
func (nc *NodeCreate) SetHostname(s string) *NodeCreate {
	nc.mutation.SetHostname(s)
	return nc
}

// SetIPAddress sets the "ip_address" field.
func (nc *NodeCreate) SetIPAddress(s string) *NodeCreate {
	nc.mutation.SetIPAddress(s)
	return nc
}

// SetPort sets the "port" field.
func (nc *NodeCreate) SetPort(i int) *NodeCreate {
	nc.mutation.SetPort(i)
	return nc
}

// SetStatus sets the "status" field.
func (nc *NodeCreate) SetStatus(s string) *NodeCreate {
	nc.mutation.SetStatus(s)
	return nc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nc *NodeCreate) SetNillableStatus(s *string) *NodeCreate {
	if s != nil {
		nc.SetStatus(*s)
	}
	return nc
}

// SetOsInfo sets the "os_info" field.
func (nc *NodeCreate) SetOsInfo(mi *models.OSInfo) *NodeCreate {
	nc.mutation.SetOsInfo(mi)
	return nc
}

// SetAgentInfo sets the "agent_info" field.
func (nc *NodeCreate) SetAgentInfo(mi *models.AgentInfo) *NodeCreate {
	nc.mutation.SetAgentInfo(mi)
	return nc
}

// SetTags sets the "tags" field.
func (nc *NodeCreate) SetTags(s []string) *NodeCreate {
	nc.mutation.SetTags(s)
	return nc
}

// SetCreatedAt sets the "created_at" field.
func (nc *NodeCreate) SetCreatedAt(t time.Time) *NodeCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NodeCreate) SetNillableCreatedAt(t *time.Time) *NodeCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NodeCreate) SetUpdatedAt(t time.Time) *NodeCreate {
	nc.mutation.SetUpdatedAt(t)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NodeCreate) SetNillableUpdatedAt(t *time.Time) *NodeCreate {
	if t != nil {
		nc.SetUpdatedAt(*t)
	}
	return nc
}

// SetLastSeen sets the "last_seen" field.
func (nc *NodeCreate) SetLastSeen(t time.Time) *NodeCreate {
	nc.mutation.SetLastSeen(t)
	return nc
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (nc *NodeCreate) SetNillableLastSeen(t *time.Time) *NodeCreate {
	if t != nil {
		nc.SetLastSeen(*t)
	}
	return nc
}

// SetID sets the "id" field.
func (nc *NodeCreate) SetID(s string) *NodeCreate {
	nc.mutation.SetID(s)
	return nc
}

// AddServiceInstanceIDs adds the "service_instances" edge to the ServiceInstance entity by IDs.
func (nc *NodeCreate) AddServiceInstanceIDs(ids ...string) *NodeCreate {
	nc.mutation.AddServiceInstanceIDs(ids...)
	return nc
}

// AddServiceInstances adds the "service_instances" edges to the ServiceInstance entity.
func (nc *NodeCreate) AddServiceInstances(s ...*ServiceInstance) *NodeCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nc.AddServiceInstanceIDs(ids...)
}

// AddAgentTokenIDs adds the "agent_tokens" edge to the AgentToken entity by IDs.
func (nc *NodeCreate) AddAgentTokenIDs(ids ...string) *NodeCreate {
	nc.mutation.AddAgentTokenIDs(ids...)
	return nc
}

// AddAgentTokens adds the "agent_tokens" edges to the AgentToken entity.
func (nc *NodeCreate) AddAgentTokens(a ...*AgentToken) *NodeCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nc.AddAgentTokenIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nc *NodeCreate) Mutation() *NodeMutation {
	return nc.mutation
}

// Save creates the Node in the database.
func (nc *NodeCreate) Save(ctx context.Context) (*Node, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NodeCreate) SaveX(ctx context.Context) *Node {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NodeCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NodeCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NodeCreate) defaults() {
	if _, ok := nc.mutation.Status(); !ok {
		v := node.DefaultStatus
		nc.mutation.SetStatus(v)
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		v := node.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		v := node.DefaultUpdatedAt()
		nc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NodeCreate) check() error {
	if _, ok := nc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Node.name"`)}
	}
	if v, ok := nc.mutation.Name(); ok {
		if err := node.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Node.name": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Hostname(); !ok {
		return &ValidationError{Name: "hostname", err: errors.New(`ent: missing required field "Node.hostname"`)}
	}
	if v, ok := nc.mutation.Hostname(); ok {
		if err := node.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Node.hostname": %w`, err)}
		}
	}
	if _, ok := nc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "Node.ip_address"`)}
	}
	if v, ok := nc.mutation.IPAddress(); ok {
		if err := node.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Node.ip_address": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New(`ent: missing required field "Node.port"`)}
	}
	if v, ok := nc.mutation.Port(); ok {
		if err := node.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "Node.port": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Node.status"`)}
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Node.created_at"`)}
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Node.updated_at"`)}
	}
	return nil
}

func (nc *NodeCreate) sqlSave(ctx context.Context) (*Node, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Node.ID type: %T", _spec.ID.Value)
		}
	}
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NodeCreate) createSpec() (*Node, *sqlgraph.CreateSpec) {
	var (
		_node = &Node{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(node.Table, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	)
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nc.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nc.mutation.Hostname(); ok {
		_spec.SetField(node.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if value, ok := nc.mutation.IPAddress(); ok {
		_spec.SetField(node.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := nc.mutation.Port(); ok {
		_spec.SetField(node.FieldPort, field.TypeInt, value)
		_node.Port = value
	}
	if value, ok := nc.mutation.Status(); ok {
		_spec.SetField(node.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := nc.mutation.OsInfo(); ok {
		_spec.SetField(node.FieldOsInfo, field.TypeJSON, value)
		_node.OsInfo = value
	}
	if value, ok := nc.mutation.AgentInfo(); ok {
		_spec.SetField(node.FieldAgentInfo, field.TypeJSON, value)
		_node.AgentInfo = value
	}
	if value, ok := nc.mutation.Tags(); ok {
		_spec.SetField(node.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.SetField(node.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.SetField(node.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := nc.mutation.LastSeen(); ok {
		_spec.SetField(node.FieldLastSeen, field.TypeTime, value)
		_node.LastSeen = &value
	}
	if nodes := nc.mutation.ServiceInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ServiceInstancesTable,
			Columns: []string{node.ServiceInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceinstance.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.AgentTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.AgentTokensTable,
			Columns: []string{node.AgentTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NodeCreateBulk is the builder for creating many Node entities in bulk.
type NodeCreateBulk struct {
	config
	err      error
	builders []*NodeCreate
}

// Save creates the Node entities in the database.
func (ncb *NodeCreateBulk) Save(ctx context.Context) ([]*Node, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Node, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NodeCreateBulk) SaveX(ctx context.Context) []*Node {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NodeCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NodeCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
