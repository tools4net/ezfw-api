// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/node"
	"github.com/tools4net/ezfw/backend/ent/predicate"
	"github.com/tools4net/ezfw/backend/ent/serviceinstance"
)

// ServiceInstanceUpdate is the builder for updating ServiceInstance entities.
type ServiceInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceInstanceMutation
}

// Where appends a list predicates to the ServiceInstanceUpdate builder.
func (siu *ServiceInstanceUpdate) Where(ps ...predicate.ServiceInstance) *ServiceInstanceUpdate {
	siu.mutation.Where(ps...)
	return siu
}

// SetNodeID sets the "node_id" field.
func (siu *ServiceInstanceUpdate) SetNodeID(s string) *ServiceInstanceUpdate {
	siu.mutation.SetNodeID(s)
	return siu
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (siu *ServiceInstanceUpdate) SetNillableNodeID(s *string) *ServiceInstanceUpdate {
	if s != nil {
		siu.SetNodeID(*s)
	}
	return siu
}

// SetName sets the "name" field.
func (siu *ServiceInstanceUpdate) SetName(s string) *ServiceInstanceUpdate {
	siu.mutation.SetName(s)
	return siu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (siu *ServiceInstanceUpdate) SetNillableName(s *string) *ServiceInstanceUpdate {
	if s != nil {
		siu.SetName(*s)
	}
	return siu
}

// SetDescription sets the "description" field.
func (siu *ServiceInstanceUpdate) SetDescription(s string) *ServiceInstanceUpdate {
	siu.mutation.SetDescription(s)
	return siu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (siu *ServiceInstanceUpdate) SetNillableDescription(s *string) *ServiceInstanceUpdate {
	if s != nil {
		siu.SetDescription(*s)
	}
	return siu
}

// ClearDescription clears the value of the "description" field.
func (siu *ServiceInstanceUpdate) ClearDescription() *ServiceInstanceUpdate {
	siu.mutation.ClearDescription()
	return siu
}

// SetServiceType sets the "service_type" field.
func (siu *ServiceInstanceUpdate) SetServiceType(s string) *ServiceInstanceUpdate {
	siu.mutation.SetServiceType(s)
	return siu
}

// SetNillableServiceType sets the "service_type" field if the given value is not nil.
func (siu *ServiceInstanceUpdate) SetNillableServiceType(s *string) *ServiceInstanceUpdate {
	if s != nil {
		siu.SetServiceType(*s)
	}
	return siu
}

// SetStatus sets the "status" field.
func (siu *ServiceInstanceUpdate) SetStatus(s string) *ServiceInstanceUpdate {
	siu.mutation.SetStatus(s)
	return siu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (siu *ServiceInstanceUpdate) SetNillableStatus(s *string) *ServiceInstanceUpdate {
	if s != nil {
		siu.SetStatus(*s)
	}
	return siu
}

// SetPort sets the "port" field.
func (siu *ServiceInstanceUpdate) SetPort(i int) *ServiceInstanceUpdate {
	siu.mutation.ResetPort()
	siu.mutation.SetPort(i)
	return siu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (siu *ServiceInstanceUpdate) SetNillablePort(i *int) *ServiceInstanceUpdate {
	if i != nil {
		siu.SetPort(*i)
	}
	return siu
}

// AddPort adds i to the "port" field.
func (siu *ServiceInstanceUpdate) AddPort(i int) *ServiceInstanceUpdate {
	siu.mutation.AddPort(i)
	return siu
}

// SetProtocol sets the "protocol" field.
func (siu *ServiceInstanceUpdate) SetProtocol(s string) *ServiceInstanceUpdate {
	siu.mutation.SetProtocol(s)
	return siu
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (siu *ServiceInstanceUpdate) SetNillableProtocol(s *string) *ServiceInstanceUpdate {
	if s != nil {
		siu.SetProtocol(*s)
	}
	return siu
}

// SetConfig sets the "config" field.
func (siu *ServiceInstanceUpdate) SetConfig(m map[string]interface{}) *ServiceInstanceUpdate {
	siu.mutation.SetConfig(m)
	return siu
}

// ClearConfig clears the value of the "config" field.
func (siu *ServiceInstanceUpdate) ClearConfig() *ServiceInstanceUpdate {
	siu.mutation.ClearConfig()
	return siu
}

// SetTags sets the "tags" field.
func (siu *ServiceInstanceUpdate) SetTags(s []string) *ServiceInstanceUpdate {
	siu.mutation.SetTags(s)
	return siu
}

// AppendTags appends s to the "tags" field.
func (siu *ServiceInstanceUpdate) AppendTags(s []string) *ServiceInstanceUpdate {
	siu.mutation.AppendTags(s)
	return siu
}

// ClearTags clears the value of the "tags" field.
func (siu *ServiceInstanceUpdate) ClearTags() *ServiceInstanceUpdate {
	siu.mutation.ClearTags()
	return siu
}

// SetUpdatedAt sets the "updated_at" field.
func (siu *ServiceInstanceUpdate) SetUpdatedAt(t time.Time) *ServiceInstanceUpdate {
	siu.mutation.SetUpdatedAt(t)
	return siu
}

// SetLastSeen sets the "last_seen" field.
func (siu *ServiceInstanceUpdate) SetLastSeen(t time.Time) *ServiceInstanceUpdate {
	siu.mutation.SetLastSeen(t)
	return siu
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (siu *ServiceInstanceUpdate) SetNillableLastSeen(t *time.Time) *ServiceInstanceUpdate {
	if t != nil {
		siu.SetLastSeen(*t)
	}
	return siu
}

// ClearLastSeen clears the value of the "last_seen" field.
func (siu *ServiceInstanceUpdate) ClearLastSeen() *ServiceInstanceUpdate {
	siu.mutation.ClearLastSeen()
	return siu
}

// SetNode sets the "node" edge to the Node entity.
func (siu *ServiceInstanceUpdate) SetNode(n *Node) *ServiceInstanceUpdate {
	return siu.SetNodeID(n.ID)
}

// Mutation returns the ServiceInstanceMutation object of the builder.
func (siu *ServiceInstanceUpdate) Mutation() *ServiceInstanceMutation {
	return siu.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (siu *ServiceInstanceUpdate) ClearNode() *ServiceInstanceUpdate {
	siu.mutation.ClearNode()
	return siu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *ServiceInstanceUpdate) Save(ctx context.Context) (int, error) {
	siu.defaults()
	return withHooks(ctx, siu.sqlSave, siu.mutation, siu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siu *ServiceInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *ServiceInstanceUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *ServiceInstanceUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siu *ServiceInstanceUpdate) defaults() {
	if _, ok := siu.mutation.UpdatedAt(); !ok {
		v := serviceinstance.UpdateDefaultUpdatedAt()
		siu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siu *ServiceInstanceUpdate) check() error {
	if v, ok := siu.mutation.NodeID(); ok {
		if err := serviceinstance.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.node_id": %w`, err)}
		}
	}
	if v, ok := siu.mutation.Name(); ok {
		if err := serviceinstance.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.name": %w`, err)}
		}
	}
	if v, ok := siu.mutation.ServiceType(); ok {
		if err := serviceinstance.ServiceTypeValidator(v); err != nil {
			return &ValidationError{Name: "service_type", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.service_type": %w`, err)}
		}
	}
	if v, ok := siu.mutation.Port(); ok {
		if err := serviceinstance.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.port": %w`, err)}
		}
	}
	if v, ok := siu.mutation.Protocol(); ok {
		if err := serviceinstance.ProtocolValidator(v); err != nil {
			return &ValidationError{Name: "protocol", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.protocol": %w`, err)}
		}
	}
	if siu.mutation.NodeCleared() && len(siu.mutation.NodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceInstance.node"`)
	}
	return nil
}

func (siu *ServiceInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := siu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceinstance.Table, serviceinstance.Columns, sqlgraph.NewFieldSpec(serviceinstance.FieldID, field.TypeString))
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.Name(); ok {
		_spec.SetField(serviceinstance.FieldName, field.TypeString, value)
	}
	if value, ok := siu.mutation.Description(); ok {
		_spec.SetField(serviceinstance.FieldDescription, field.TypeString, value)
	}
	if siu.mutation.DescriptionCleared() {
		_spec.ClearField(serviceinstance.FieldDescription, field.TypeString)
	}
	if value, ok := siu.mutation.ServiceType(); ok {
		_spec.SetField(serviceinstance.FieldServiceType, field.TypeString, value)
	}
	if value, ok := siu.mutation.Status(); ok {
		_spec.SetField(serviceinstance.FieldStatus, field.TypeString, value)
	}
	if value, ok := siu.mutation.Port(); ok {
		_spec.SetField(serviceinstance.FieldPort, field.TypeInt, value)
	}
	if value, ok := siu.mutation.AddedPort(); ok {
		_spec.AddField(serviceinstance.FieldPort, field.TypeInt, value)
	}
	if value, ok := siu.mutation.Protocol(); ok {
		_spec.SetField(serviceinstance.FieldProtocol, field.TypeString, value)
	}
	if value, ok := siu.mutation.Config(); ok {
		_spec.SetField(serviceinstance.FieldConfig, field.TypeJSON, value)
	}
	if siu.mutation.ConfigCleared() {
		_spec.ClearField(serviceinstance.FieldConfig, field.TypeJSON)
	}
	if value, ok := siu.mutation.Tags(); ok {
		_spec.SetField(serviceinstance.FieldTags, field.TypeJSON, value)
	}
	if value, ok := siu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceinstance.FieldTags, value)
		})
	}
	if siu.mutation.TagsCleared() {
		_spec.ClearField(serviceinstance.FieldTags, field.TypeJSON)
	}
	if value, ok := siu.mutation.UpdatedAt(); ok {
		_spec.SetField(serviceinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := siu.mutation.LastSeen(); ok {
		_spec.SetField(serviceinstance.FieldLastSeen, field.TypeTime, value)
	}
	if siu.mutation.LastSeenCleared() {
		_spec.ClearField(serviceinstance.FieldLastSeen, field.TypeTime)
	}
	if siu.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceinstance.NodeTable,
			Columns: []string{serviceinstance.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceinstance.NodeTable,
			Columns: []string{serviceinstance.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	siu.mutation.done = true
	return n, nil
}

// ServiceInstanceUpdateOne is the builder for updating a single ServiceInstance entity.
type ServiceInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceInstanceMutation
}

// SetNodeID sets the "node_id" field.
func (siuo *ServiceInstanceUpdateOne) SetNodeID(s string) *ServiceInstanceUpdateOne {
	siuo.mutation.SetNodeID(s)
	return siuo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (siuo *ServiceInstanceUpdateOne) SetNillableNodeID(s *string) *ServiceInstanceUpdateOne {
	if s != nil {
		siuo.SetNodeID(*s)
	}
	return siuo
}

// SetName sets the "name" field.
func (siuo *ServiceInstanceUpdateOne) SetName(s string) *ServiceInstanceUpdateOne {
	siuo.mutation.SetName(s)
	return siuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (siuo *ServiceInstanceUpdateOne) SetNillableName(s *string) *ServiceInstanceUpdateOne {
	if s != nil {
		siuo.SetName(*s)
	}
	return siuo
}

// SetDescription sets the "description" field.
func (siuo *ServiceInstanceUpdateOne) SetDescription(s string) *ServiceInstanceUpdateOne {
	siuo.mutation.SetDescription(s)
	return siuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (siuo *ServiceInstanceUpdateOne) SetNillableDescription(s *string) *ServiceInstanceUpdateOne {
	if s != nil {
		siuo.SetDescription(*s)
	}
	return siuo
}

// ClearDescription clears the value of the "description" field.
func (siuo *ServiceInstanceUpdateOne) ClearDescription() *ServiceInstanceUpdateOne {
	siuo.mutation.ClearDescription()
	return siuo
}

// SetServiceType sets the "service_type" field.
func (siuo *ServiceInstanceUpdateOne) SetServiceType(s string) *ServiceInstanceUpdateOne {
	siuo.mutation.SetServiceType(s)
	return siuo
}

// SetNillableServiceType sets the "service_type" field if the given value is not nil.
func (siuo *ServiceInstanceUpdateOne) SetNillableServiceType(s *string) *ServiceInstanceUpdateOne {
	if s != nil {
		siuo.SetServiceType(*s)
	}
	return siuo
}

// SetStatus sets the "status" field.
func (siuo *ServiceInstanceUpdateOne) SetStatus(s string) *ServiceInstanceUpdateOne {
	siuo.mutation.SetStatus(s)
	return siuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (siuo *ServiceInstanceUpdateOne) SetNillableStatus(s *string) *ServiceInstanceUpdateOne {
	if s != nil {
		siuo.SetStatus(*s)
	}
	return siuo
}

// SetPort sets the "port" field.
func (siuo *ServiceInstanceUpdateOne) SetPort(i int) *ServiceInstanceUpdateOne {
	siuo.mutation.ResetPort()
	siuo.mutation.SetPort(i)
	return siuo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (siuo *ServiceInstanceUpdateOne) SetNillablePort(i *int) *ServiceInstanceUpdateOne {
	if i != nil {
		siuo.SetPort(*i)
	}
	return siuo
}

// AddPort adds i to the "port" field.
func (siuo *ServiceInstanceUpdateOne) AddPort(i int) *ServiceInstanceUpdateOne {
	siuo.mutation.AddPort(i)
	return siuo
}

// SetProtocol sets the "protocol" field.
func (siuo *ServiceInstanceUpdateOne) SetProtocol(s string) *ServiceInstanceUpdateOne {
	siuo.mutation.SetProtocol(s)
	return siuo
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (siuo *ServiceInstanceUpdateOne) SetNillableProtocol(s *string) *ServiceInstanceUpdateOne {
	if s != nil {
		siuo.SetProtocol(*s)
	}
	return siuo
}

// SetConfig sets the "config" field.
func (siuo *ServiceInstanceUpdateOne) SetConfig(m map[string]interface{}) *ServiceInstanceUpdateOne {
	siuo.mutation.SetConfig(m)
	return siuo
}

// ClearConfig clears the value of the "config" field.
func (siuo *ServiceInstanceUpdateOne) ClearConfig() *ServiceInstanceUpdateOne {
	siuo.mutation.ClearConfig()
	return siuo
}

// SetTags sets the "tags" field.
func (siuo *ServiceInstanceUpdateOne) SetTags(s []string) *ServiceInstanceUpdateOne {
	siuo.mutation.SetTags(s)
	return siuo
}

// AppendTags appends s to the "tags" field.
func (siuo *ServiceInstanceUpdateOne) AppendTags(s []string) *ServiceInstanceUpdateOne {
	siuo.mutation.AppendTags(s)
	return siuo
}

// ClearTags clears the value of the "tags" field.
func (siuo *ServiceInstanceUpdateOne) ClearTags() *ServiceInstanceUpdateOne {
	siuo.mutation.ClearTags()
	return siuo
}

// SetUpdatedAt sets the "updated_at" field.
func (siuo *ServiceInstanceUpdateOne) SetUpdatedAt(t time.Time) *ServiceInstanceUpdateOne {
	siuo.mutation.SetUpdatedAt(t)
	return siuo
}

// SetLastSeen sets the "last_seen" field.
func (siuo *ServiceInstanceUpdateOne) SetLastSeen(t time.Time) *ServiceInstanceUpdateOne {
	siuo.mutation.SetLastSeen(t)
	return siuo
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (siuo *ServiceInstanceUpdateOne) SetNillableLastSeen(t *time.Time) *ServiceInstanceUpdateOne {
	if t != nil {
		siuo.SetLastSeen(*t)
	}
	return siuo
}

// ClearLastSeen clears the value of the "last_seen" field.
func (siuo *ServiceInstanceUpdateOne) ClearLastSeen() *ServiceInstanceUpdateOne {
	siuo.mutation.ClearLastSeen()
	return siuo
}

// SetNode sets the "node" edge to the Node entity.
func (siuo *ServiceInstanceUpdateOne) SetNode(n *Node) *ServiceInstanceUpdateOne {
	return siuo.SetNodeID(n.ID)
}

// Mutation returns the ServiceInstanceMutation object of the builder.
func (siuo *ServiceInstanceUpdateOne) Mutation() *ServiceInstanceMutation {
	return siuo.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (siuo *ServiceInstanceUpdateOne) ClearNode() *ServiceInstanceUpdateOne {
	siuo.mutation.ClearNode()
	return siuo
}

// Where appends a list predicates to the ServiceInstanceUpdate builder.
func (siuo *ServiceInstanceUpdateOne) Where(ps ...predicate.ServiceInstance) *ServiceInstanceUpdateOne {
	siuo.mutation.Where(ps...)
	return siuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *ServiceInstanceUpdateOne) Select(field string, fields ...string) *ServiceInstanceUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated ServiceInstance entity.
func (siuo *ServiceInstanceUpdateOne) Save(ctx context.Context) (*ServiceInstance, error) {
	siuo.defaults()
	return withHooks(ctx, siuo.sqlSave, siuo.mutation, siuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *ServiceInstanceUpdateOne) SaveX(ctx context.Context) *ServiceInstance {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *ServiceInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *ServiceInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siuo *ServiceInstanceUpdateOne) defaults() {
	if _, ok := siuo.mutation.UpdatedAt(); !ok {
		v := serviceinstance.UpdateDefaultUpdatedAt()
		siuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siuo *ServiceInstanceUpdateOne) check() error {
	if v, ok := siuo.mutation.NodeID(); ok {
		if err := serviceinstance.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.node_id": %w`, err)}
		}
	}
	if v, ok := siuo.mutation.Name(); ok {
		if err := serviceinstance.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.name": %w`, err)}
		}
	}
	if v, ok := siuo.mutation.ServiceType(); ok {
		if err := serviceinstance.ServiceTypeValidator(v); err != nil {
			return &ValidationError{Name: "service_type", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.service_type": %w`, err)}
		}
	}
	if v, ok := siuo.mutation.Port(); ok {
		if err := serviceinstance.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.port": %w`, err)}
		}
	}
	if v, ok := siuo.mutation.Protocol(); ok {
		if err := serviceinstance.ProtocolValidator(v); err != nil {
			return &ValidationError{Name: "protocol", err: fmt.Errorf(`ent: validator failed for field "ServiceInstance.protocol": %w`, err)}
		}
	}
	if siuo.mutation.NodeCleared() && len(siuo.mutation.NodeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceInstance.node"`)
	}
	return nil
}

func (siuo *ServiceInstanceUpdateOne) sqlSave(ctx context.Context) (_node *ServiceInstance, err error) {
	if err := siuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceinstance.Table, serviceinstance.Columns, sqlgraph.NewFieldSpec(serviceinstance.FieldID, field.TypeString))
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceinstance.FieldID)
		for _, f := range fields {
			if !serviceinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serviceinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.Name(); ok {
		_spec.SetField(serviceinstance.FieldName, field.TypeString, value)
	}
	if value, ok := siuo.mutation.Description(); ok {
		_spec.SetField(serviceinstance.FieldDescription, field.TypeString, value)
	}
	if siuo.mutation.DescriptionCleared() {
		_spec.ClearField(serviceinstance.FieldDescription, field.TypeString)
	}
	if value, ok := siuo.mutation.ServiceType(); ok {
		_spec.SetField(serviceinstance.FieldServiceType, field.TypeString, value)
	}
	if value, ok := siuo.mutation.Status(); ok {
		_spec.SetField(serviceinstance.FieldStatus, field.TypeString, value)
	}
	if value, ok := siuo.mutation.Port(); ok {
		_spec.SetField(serviceinstance.FieldPort, field.TypeInt, value)
	}
	if value, ok := siuo.mutation.AddedPort(); ok {
		_spec.AddField(serviceinstance.FieldPort, field.TypeInt, value)
	}
	if value, ok := siuo.mutation.Protocol(); ok {
		_spec.SetField(serviceinstance.FieldProtocol, field.TypeString, value)
	}
	if value, ok := siuo.mutation.Config(); ok {
		_spec.SetField(serviceinstance.FieldConfig, field.TypeJSON, value)
	}
	if siuo.mutation.ConfigCleared() {
		_spec.ClearField(serviceinstance.FieldConfig, field.TypeJSON)
	}
	if value, ok := siuo.mutation.Tags(); ok {
		_spec.SetField(serviceinstance.FieldTags, field.TypeJSON, value)
	}
	if value, ok := siuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceinstance.FieldTags, value)
		})
	}
	if siuo.mutation.TagsCleared() {
		_spec.ClearField(serviceinstance.FieldTags, field.TypeJSON)
	}
	if value, ok := siuo.mutation.UpdatedAt(); ok {
		_spec.SetField(serviceinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := siuo.mutation.LastSeen(); ok {
		_spec.SetField(serviceinstance.FieldLastSeen, field.TypeTime, value)
	}
	if siuo.mutation.LastSeenCleared() {
		_spec.ClearField(serviceinstance.FieldLastSeen, field.TypeTime)
	}
	if siuo.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceinstance.NodeTable,
			Columns: []string{serviceinstance.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceinstance.NodeTable,
			Columns: []string{serviceinstance.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceInstance{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	siuo.mutation.done = true
	return _node, nil
}
