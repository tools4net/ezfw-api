// Code generated by ent, DO NOT EDIT.

package serviceinstance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tools4net/ezfw/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContainsFold(FieldID, id))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldNodeID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldDescription, v))
}

// ServiceType applies equality check predicate on the "service_type" field. It's identical to ServiceTypeEQ.
func ServiceType(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldServiceType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldStatus, v))
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v int) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldPort, v))
}

// Protocol applies equality check predicate on the "protocol" field. It's identical to ProtocolEQ.
func Protocol(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldProtocol, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldUpdatedAt, v))
}

// LastSeen applies equality check predicate on the "last_seen" field. It's identical to LastSeenEQ.
func LastSeen(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldLastSeen, v))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContains(FieldNodeID, v))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldHasPrefix(FieldNodeID, v))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldHasSuffix(FieldNodeID, v))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEqualFold(FieldNodeID, v))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContainsFold(FieldNodeID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContainsFold(FieldDescription, v))
}

// ServiceTypeEQ applies the EQ predicate on the "service_type" field.
func ServiceTypeEQ(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldServiceType, v))
}

// ServiceTypeNEQ applies the NEQ predicate on the "service_type" field.
func ServiceTypeNEQ(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNEQ(FieldServiceType, v))
}

// ServiceTypeIn applies the In predicate on the "service_type" field.
func ServiceTypeIn(vs ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIn(FieldServiceType, vs...))
}

// ServiceTypeNotIn applies the NotIn predicate on the "service_type" field.
func ServiceTypeNotIn(vs ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotIn(FieldServiceType, vs...))
}

// ServiceTypeGT applies the GT predicate on the "service_type" field.
func ServiceTypeGT(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGT(FieldServiceType, v))
}

// ServiceTypeGTE applies the GTE predicate on the "service_type" field.
func ServiceTypeGTE(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGTE(FieldServiceType, v))
}

// ServiceTypeLT applies the LT predicate on the "service_type" field.
func ServiceTypeLT(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLT(FieldServiceType, v))
}

// ServiceTypeLTE applies the LTE predicate on the "service_type" field.
func ServiceTypeLTE(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLTE(FieldServiceType, v))
}

// ServiceTypeContains applies the Contains predicate on the "service_type" field.
func ServiceTypeContains(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContains(FieldServiceType, v))
}

// ServiceTypeHasPrefix applies the HasPrefix predicate on the "service_type" field.
func ServiceTypeHasPrefix(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldHasPrefix(FieldServiceType, v))
}

// ServiceTypeHasSuffix applies the HasSuffix predicate on the "service_type" field.
func ServiceTypeHasSuffix(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldHasSuffix(FieldServiceType, v))
}

// ServiceTypeEqualFold applies the EqualFold predicate on the "service_type" field.
func ServiceTypeEqualFold(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEqualFold(FieldServiceType, v))
}

// ServiceTypeContainsFold applies the ContainsFold predicate on the "service_type" field.
func ServiceTypeContainsFold(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContainsFold(FieldServiceType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContainsFold(FieldStatus, v))
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v int) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldPort, v))
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v int) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNEQ(FieldPort, v))
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...int) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIn(FieldPort, vs...))
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...int) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotIn(FieldPort, vs...))
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v int) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGT(FieldPort, v))
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v int) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGTE(FieldPort, v))
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v int) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLT(FieldPort, v))
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v int) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLTE(FieldPort, v))
}

// ProtocolEQ applies the EQ predicate on the "protocol" field.
func ProtocolEQ(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldProtocol, v))
}

// ProtocolNEQ applies the NEQ predicate on the "protocol" field.
func ProtocolNEQ(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNEQ(FieldProtocol, v))
}

// ProtocolIn applies the In predicate on the "protocol" field.
func ProtocolIn(vs ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIn(FieldProtocol, vs...))
}

// ProtocolNotIn applies the NotIn predicate on the "protocol" field.
func ProtocolNotIn(vs ...string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotIn(FieldProtocol, vs...))
}

// ProtocolGT applies the GT predicate on the "protocol" field.
func ProtocolGT(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGT(FieldProtocol, v))
}

// ProtocolGTE applies the GTE predicate on the "protocol" field.
func ProtocolGTE(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGTE(FieldProtocol, v))
}

// ProtocolLT applies the LT predicate on the "protocol" field.
func ProtocolLT(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLT(FieldProtocol, v))
}

// ProtocolLTE applies the LTE predicate on the "protocol" field.
func ProtocolLTE(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLTE(FieldProtocol, v))
}

// ProtocolContains applies the Contains predicate on the "protocol" field.
func ProtocolContains(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContains(FieldProtocol, v))
}

// ProtocolHasPrefix applies the HasPrefix predicate on the "protocol" field.
func ProtocolHasPrefix(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldHasPrefix(FieldProtocol, v))
}

// ProtocolHasSuffix applies the HasSuffix predicate on the "protocol" field.
func ProtocolHasSuffix(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldHasSuffix(FieldProtocol, v))
}

// ProtocolEqualFold applies the EqualFold predicate on the "protocol" field.
func ProtocolEqualFold(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEqualFold(FieldProtocol, v))
}

// ProtocolContainsFold applies the ContainsFold predicate on the "protocol" field.
func ProtocolContainsFold(v string) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldContainsFold(FieldProtocol, v))
}

// ConfigIsNil applies the IsNil predicate on the "config" field.
func ConfigIsNil() predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIsNull(FieldConfig))
}

// ConfigNotNil applies the NotNil predicate on the "config" field.
func ConfigNotNil() predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotNull(FieldConfig))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotNull(FieldTags))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLTE(FieldUpdatedAt, v))
}

// LastSeenEQ applies the EQ predicate on the "last_seen" field.
func LastSeenEQ(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldEQ(FieldLastSeen, v))
}

// LastSeenNEQ applies the NEQ predicate on the "last_seen" field.
func LastSeenNEQ(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNEQ(FieldLastSeen, v))
}

// LastSeenIn applies the In predicate on the "last_seen" field.
func LastSeenIn(vs ...time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIn(FieldLastSeen, vs...))
}

// LastSeenNotIn applies the NotIn predicate on the "last_seen" field.
func LastSeenNotIn(vs ...time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotIn(FieldLastSeen, vs...))
}

// LastSeenGT applies the GT predicate on the "last_seen" field.
func LastSeenGT(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGT(FieldLastSeen, v))
}

// LastSeenGTE applies the GTE predicate on the "last_seen" field.
func LastSeenGTE(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldGTE(FieldLastSeen, v))
}

// LastSeenLT applies the LT predicate on the "last_seen" field.
func LastSeenLT(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLT(FieldLastSeen, v))
}

// LastSeenLTE applies the LTE predicate on the "last_seen" field.
func LastSeenLTE(v time.Time) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldLTE(FieldLastSeen, v))
}

// LastSeenIsNil applies the IsNil predicate on the "last_seen" field.
func LastSeenIsNil() predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldIsNull(FieldLastSeen))
}

// LastSeenNotNil applies the NotNil predicate on the "last_seen" field.
func LastSeenNotNil() predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.FieldNotNull(FieldLastSeen))
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.ServiceInstance {
	return predicate.ServiceInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.Node) predicate.ServiceInstance {
	return predicate.ServiceInstance(func(s *sql.Selector) {
		step := newNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceInstance) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceInstance) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceInstance) predicate.ServiceInstance {
	return predicate.ServiceInstance(sql.NotPredicates(p))
}
