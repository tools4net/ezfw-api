// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/predicate"
	"github.com/tools4net/ezfw/backend/ent/singboxconfig"
	"github.com/tools4net/ezfw/backend/internal/models"
)

// SingBoxConfigUpdate is the builder for updating SingBoxConfig entities.
type SingBoxConfigUpdate struct {
	config
	hooks    []Hook
	mutation *SingBoxConfigMutation
}

// Where appends a list predicates to the SingBoxConfigUpdate builder.
func (sbcu *SingBoxConfigUpdate) Where(ps ...predicate.SingBoxConfig) *SingBoxConfigUpdate {
	sbcu.mutation.Where(ps...)
	return sbcu
}

// SetName sets the "name" field.
func (sbcu *SingBoxConfigUpdate) SetName(s string) *SingBoxConfigUpdate {
	sbcu.mutation.SetName(s)
	return sbcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sbcu *SingBoxConfigUpdate) SetNillableName(s *string) *SingBoxConfigUpdate {
	if s != nil {
		sbcu.SetName(*s)
	}
	return sbcu
}

// SetDescription sets the "description" field.
func (sbcu *SingBoxConfigUpdate) SetDescription(s string) *SingBoxConfigUpdate {
	sbcu.mutation.SetDescription(s)
	return sbcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sbcu *SingBoxConfigUpdate) SetNillableDescription(s *string) *SingBoxConfigUpdate {
	if s != nil {
		sbcu.SetDescription(*s)
	}
	return sbcu
}

// ClearDescription clears the value of the "description" field.
func (sbcu *SingBoxConfigUpdate) ClearDescription() *SingBoxConfigUpdate {
	sbcu.mutation.ClearDescription()
	return sbcu
}

// SetUpdatedAt sets the "updated_at" field.
func (sbcu *SingBoxConfigUpdate) SetUpdatedAt(t time.Time) *SingBoxConfigUpdate {
	sbcu.mutation.SetUpdatedAt(t)
	return sbcu
}

// SetLogConfig sets the "log_config" field.
func (sbcu *SingBoxConfigUpdate) SetLogConfig(mblc *models.SingBoxLogConfig) *SingBoxConfigUpdate {
	sbcu.mutation.SetLogConfig(mblc)
	return sbcu
}

// ClearLogConfig clears the value of the "log_config" field.
func (sbcu *SingBoxConfigUpdate) ClearLogConfig() *SingBoxConfigUpdate {
	sbcu.mutation.ClearLogConfig()
	return sbcu
}

// SetDNSConfig sets the "dns_config" field.
func (sbcu *SingBoxConfigUpdate) SetDNSConfig(mbdc *models.SingBoxDNSConfig) *SingBoxConfigUpdate {
	sbcu.mutation.SetDNSConfig(mbdc)
	return sbcu
}

// ClearDNSConfig clears the value of the "dns_config" field.
func (sbcu *SingBoxConfigUpdate) ClearDNSConfig() *SingBoxConfigUpdate {
	sbcu.mutation.ClearDNSConfig()
	return sbcu
}

// SetNtpConfig sets the "ntp_config" field.
func (sbcu *SingBoxConfigUpdate) SetNtpConfig(mbnc *models.SingBoxNTPConfig) *SingBoxConfigUpdate {
	sbcu.mutation.SetNtpConfig(mbnc)
	return sbcu
}

// ClearNtpConfig clears the value of the "ntp_config" field.
func (sbcu *SingBoxConfigUpdate) ClearNtpConfig() *SingBoxConfigUpdate {
	sbcu.mutation.ClearNtpConfig()
	return sbcu
}

// SetInbounds sets the "inbounds" field.
func (sbcu *SingBoxConfigUpdate) SetInbounds(i []interface{}) *SingBoxConfigUpdate {
	sbcu.mutation.SetInbounds(i)
	return sbcu
}

// AppendInbounds appends i to the "inbounds" field.
func (sbcu *SingBoxConfigUpdate) AppendInbounds(i []interface{}) *SingBoxConfigUpdate {
	sbcu.mutation.AppendInbounds(i)
	return sbcu
}

// ClearInbounds clears the value of the "inbounds" field.
func (sbcu *SingBoxConfigUpdate) ClearInbounds() *SingBoxConfigUpdate {
	sbcu.mutation.ClearInbounds()
	return sbcu
}

// SetOutbounds sets the "outbounds" field.
func (sbcu *SingBoxConfigUpdate) SetOutbounds(i []interface{}) *SingBoxConfigUpdate {
	sbcu.mutation.SetOutbounds(i)
	return sbcu
}

// AppendOutbounds appends i to the "outbounds" field.
func (sbcu *SingBoxConfigUpdate) AppendOutbounds(i []interface{}) *SingBoxConfigUpdate {
	sbcu.mutation.AppendOutbounds(i)
	return sbcu
}

// ClearOutbounds clears the value of the "outbounds" field.
func (sbcu *SingBoxConfigUpdate) ClearOutbounds() *SingBoxConfigUpdate {
	sbcu.mutation.ClearOutbounds()
	return sbcu
}

// SetRouteConfig sets the "route_config" field.
func (sbcu *SingBoxConfigUpdate) SetRouteConfig(mbrc *models.SingBoxRouteConfig) *SingBoxConfigUpdate {
	sbcu.mutation.SetRouteConfig(mbrc)
	return sbcu
}

// ClearRouteConfig clears the value of the "route_config" field.
func (sbcu *SingBoxConfigUpdate) ClearRouteConfig() *SingBoxConfigUpdate {
	sbcu.mutation.ClearRouteConfig()
	return sbcu
}

// SetExperimentalConfig sets the "experimental_config" field.
func (sbcu *SingBoxConfigUpdate) SetExperimentalConfig(m map[string]interface{}) *SingBoxConfigUpdate {
	sbcu.mutation.SetExperimentalConfig(m)
	return sbcu
}

// ClearExperimentalConfig clears the value of the "experimental_config" field.
func (sbcu *SingBoxConfigUpdate) ClearExperimentalConfig() *SingBoxConfigUpdate {
	sbcu.mutation.ClearExperimentalConfig()
	return sbcu
}

// SetEndpoints sets the "endpoints" field.
func (sbcu *SingBoxConfigUpdate) SetEndpoints(i []interface{}) *SingBoxConfigUpdate {
	sbcu.mutation.SetEndpoints(i)
	return sbcu
}

// AppendEndpoints appends i to the "endpoints" field.
func (sbcu *SingBoxConfigUpdate) AppendEndpoints(i []interface{}) *SingBoxConfigUpdate {
	sbcu.mutation.AppendEndpoints(i)
	return sbcu
}

// ClearEndpoints clears the value of the "endpoints" field.
func (sbcu *SingBoxConfigUpdate) ClearEndpoints() *SingBoxConfigUpdate {
	sbcu.mutation.ClearEndpoints()
	return sbcu
}

// SetCertificateConfig sets the "certificate_config" field.
func (sbcu *SingBoxConfigUpdate) SetCertificateConfig(m map[string]interface{}) *SingBoxConfigUpdate {
	sbcu.mutation.SetCertificateConfig(m)
	return sbcu
}

// ClearCertificateConfig clears the value of the "certificate_config" field.
func (sbcu *SingBoxConfigUpdate) ClearCertificateConfig() *SingBoxConfigUpdate {
	sbcu.mutation.ClearCertificateConfig()
	return sbcu
}

// Mutation returns the SingBoxConfigMutation object of the builder.
func (sbcu *SingBoxConfigUpdate) Mutation() *SingBoxConfigMutation {
	return sbcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sbcu *SingBoxConfigUpdate) Save(ctx context.Context) (int, error) {
	sbcu.defaults()
	return withHooks(ctx, sbcu.sqlSave, sbcu.mutation, sbcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbcu *SingBoxConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := sbcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sbcu *SingBoxConfigUpdate) Exec(ctx context.Context) error {
	_, err := sbcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbcu *SingBoxConfigUpdate) ExecX(ctx context.Context) {
	if err := sbcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sbcu *SingBoxConfigUpdate) defaults() {
	if _, ok := sbcu.mutation.UpdatedAt(); !ok {
		v := singboxconfig.UpdateDefaultUpdatedAt()
		sbcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbcu *SingBoxConfigUpdate) check() error {
	if v, ok := sbcu.mutation.Name(); ok {
		if err := singboxconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SingBoxConfig.name": %w`, err)}
		}
	}
	return nil
}

func (sbcu *SingBoxConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sbcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(singboxconfig.Table, singboxconfig.Columns, sqlgraph.NewFieldSpec(singboxconfig.FieldID, field.TypeString))
	if ps := sbcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbcu.mutation.Name(); ok {
		_spec.SetField(singboxconfig.FieldName, field.TypeString, value)
	}
	if value, ok := sbcu.mutation.Description(); ok {
		_spec.SetField(singboxconfig.FieldDescription, field.TypeString, value)
	}
	if sbcu.mutation.DescriptionCleared() {
		_spec.ClearField(singboxconfig.FieldDescription, field.TypeString)
	}
	if value, ok := sbcu.mutation.UpdatedAt(); ok {
		_spec.SetField(singboxconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sbcu.mutation.LogConfig(); ok {
		_spec.SetField(singboxconfig.FieldLogConfig, field.TypeJSON, value)
	}
	if sbcu.mutation.LogConfigCleared() {
		_spec.ClearField(singboxconfig.FieldLogConfig, field.TypeJSON)
	}
	if value, ok := sbcu.mutation.DNSConfig(); ok {
		_spec.SetField(singboxconfig.FieldDNSConfig, field.TypeJSON, value)
	}
	if sbcu.mutation.DNSConfigCleared() {
		_spec.ClearField(singboxconfig.FieldDNSConfig, field.TypeJSON)
	}
	if value, ok := sbcu.mutation.NtpConfig(); ok {
		_spec.SetField(singboxconfig.FieldNtpConfig, field.TypeJSON, value)
	}
	if sbcu.mutation.NtpConfigCleared() {
		_spec.ClearField(singboxconfig.FieldNtpConfig, field.TypeJSON)
	}
	if value, ok := sbcu.mutation.Inbounds(); ok {
		_spec.SetField(singboxconfig.FieldInbounds, field.TypeJSON, value)
	}
	if value, ok := sbcu.mutation.AppendedInbounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, singboxconfig.FieldInbounds, value)
		})
	}
	if sbcu.mutation.InboundsCleared() {
		_spec.ClearField(singboxconfig.FieldInbounds, field.TypeJSON)
	}
	if value, ok := sbcu.mutation.Outbounds(); ok {
		_spec.SetField(singboxconfig.FieldOutbounds, field.TypeJSON, value)
	}
	if value, ok := sbcu.mutation.AppendedOutbounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, singboxconfig.FieldOutbounds, value)
		})
	}
	if sbcu.mutation.OutboundsCleared() {
		_spec.ClearField(singboxconfig.FieldOutbounds, field.TypeJSON)
	}
	if value, ok := sbcu.mutation.RouteConfig(); ok {
		_spec.SetField(singboxconfig.FieldRouteConfig, field.TypeJSON, value)
	}
	if sbcu.mutation.RouteConfigCleared() {
		_spec.ClearField(singboxconfig.FieldRouteConfig, field.TypeJSON)
	}
	if value, ok := sbcu.mutation.ExperimentalConfig(); ok {
		_spec.SetField(singboxconfig.FieldExperimentalConfig, field.TypeJSON, value)
	}
	if sbcu.mutation.ExperimentalConfigCleared() {
		_spec.ClearField(singboxconfig.FieldExperimentalConfig, field.TypeJSON)
	}
	if value, ok := sbcu.mutation.Endpoints(); ok {
		_spec.SetField(singboxconfig.FieldEndpoints, field.TypeJSON, value)
	}
	if value, ok := sbcu.mutation.AppendedEndpoints(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, singboxconfig.FieldEndpoints, value)
		})
	}
	if sbcu.mutation.EndpointsCleared() {
		_spec.ClearField(singboxconfig.FieldEndpoints, field.TypeJSON)
	}
	if value, ok := sbcu.mutation.CertificateConfig(); ok {
		_spec.SetField(singboxconfig.FieldCertificateConfig, field.TypeJSON, value)
	}
	if sbcu.mutation.CertificateConfigCleared() {
		_spec.ClearField(singboxconfig.FieldCertificateConfig, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sbcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{singboxconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sbcu.mutation.done = true
	return n, nil
}

// SingBoxConfigUpdateOne is the builder for updating a single SingBoxConfig entity.
type SingBoxConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SingBoxConfigMutation
}

// SetName sets the "name" field.
func (sbcuo *SingBoxConfigUpdateOne) SetName(s string) *SingBoxConfigUpdateOne {
	sbcuo.mutation.SetName(s)
	return sbcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sbcuo *SingBoxConfigUpdateOne) SetNillableName(s *string) *SingBoxConfigUpdateOne {
	if s != nil {
		sbcuo.SetName(*s)
	}
	return sbcuo
}

// SetDescription sets the "description" field.
func (sbcuo *SingBoxConfigUpdateOne) SetDescription(s string) *SingBoxConfigUpdateOne {
	sbcuo.mutation.SetDescription(s)
	return sbcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sbcuo *SingBoxConfigUpdateOne) SetNillableDescription(s *string) *SingBoxConfigUpdateOne {
	if s != nil {
		sbcuo.SetDescription(*s)
	}
	return sbcuo
}

// ClearDescription clears the value of the "description" field.
func (sbcuo *SingBoxConfigUpdateOne) ClearDescription() *SingBoxConfigUpdateOne {
	sbcuo.mutation.ClearDescription()
	return sbcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sbcuo *SingBoxConfigUpdateOne) SetUpdatedAt(t time.Time) *SingBoxConfigUpdateOne {
	sbcuo.mutation.SetUpdatedAt(t)
	return sbcuo
}

// SetLogConfig sets the "log_config" field.
func (sbcuo *SingBoxConfigUpdateOne) SetLogConfig(mblc *models.SingBoxLogConfig) *SingBoxConfigUpdateOne {
	sbcuo.mutation.SetLogConfig(mblc)
	return sbcuo
}

// ClearLogConfig clears the value of the "log_config" field.
func (sbcuo *SingBoxConfigUpdateOne) ClearLogConfig() *SingBoxConfigUpdateOne {
	sbcuo.mutation.ClearLogConfig()
	return sbcuo
}

// SetDNSConfig sets the "dns_config" field.
func (sbcuo *SingBoxConfigUpdateOne) SetDNSConfig(mbdc *models.SingBoxDNSConfig) *SingBoxConfigUpdateOne {
	sbcuo.mutation.SetDNSConfig(mbdc)
	return sbcuo
}

// ClearDNSConfig clears the value of the "dns_config" field.
func (sbcuo *SingBoxConfigUpdateOne) ClearDNSConfig() *SingBoxConfigUpdateOne {
	sbcuo.mutation.ClearDNSConfig()
	return sbcuo
}

// SetNtpConfig sets the "ntp_config" field.
func (sbcuo *SingBoxConfigUpdateOne) SetNtpConfig(mbnc *models.SingBoxNTPConfig) *SingBoxConfigUpdateOne {
	sbcuo.mutation.SetNtpConfig(mbnc)
	return sbcuo
}

// ClearNtpConfig clears the value of the "ntp_config" field.
func (sbcuo *SingBoxConfigUpdateOne) ClearNtpConfig() *SingBoxConfigUpdateOne {
	sbcuo.mutation.ClearNtpConfig()
	return sbcuo
}

// SetInbounds sets the "inbounds" field.
func (sbcuo *SingBoxConfigUpdateOne) SetInbounds(i []interface{}) *SingBoxConfigUpdateOne {
	sbcuo.mutation.SetInbounds(i)
	return sbcuo
}

// AppendInbounds appends i to the "inbounds" field.
func (sbcuo *SingBoxConfigUpdateOne) AppendInbounds(i []interface{}) *SingBoxConfigUpdateOne {
	sbcuo.mutation.AppendInbounds(i)
	return sbcuo
}

// ClearInbounds clears the value of the "inbounds" field.
func (sbcuo *SingBoxConfigUpdateOne) ClearInbounds() *SingBoxConfigUpdateOne {
	sbcuo.mutation.ClearInbounds()
	return sbcuo
}

// SetOutbounds sets the "outbounds" field.
func (sbcuo *SingBoxConfigUpdateOne) SetOutbounds(i []interface{}) *SingBoxConfigUpdateOne {
	sbcuo.mutation.SetOutbounds(i)
	return sbcuo
}

// AppendOutbounds appends i to the "outbounds" field.
func (sbcuo *SingBoxConfigUpdateOne) AppendOutbounds(i []interface{}) *SingBoxConfigUpdateOne {
	sbcuo.mutation.AppendOutbounds(i)
	return sbcuo
}

// ClearOutbounds clears the value of the "outbounds" field.
func (sbcuo *SingBoxConfigUpdateOne) ClearOutbounds() *SingBoxConfigUpdateOne {
	sbcuo.mutation.ClearOutbounds()
	return sbcuo
}

// SetRouteConfig sets the "route_config" field.
func (sbcuo *SingBoxConfigUpdateOne) SetRouteConfig(mbrc *models.SingBoxRouteConfig) *SingBoxConfigUpdateOne {
	sbcuo.mutation.SetRouteConfig(mbrc)
	return sbcuo
}

// ClearRouteConfig clears the value of the "route_config" field.
func (sbcuo *SingBoxConfigUpdateOne) ClearRouteConfig() *SingBoxConfigUpdateOne {
	sbcuo.mutation.ClearRouteConfig()
	return sbcuo
}

// SetExperimentalConfig sets the "experimental_config" field.
func (sbcuo *SingBoxConfigUpdateOne) SetExperimentalConfig(m map[string]interface{}) *SingBoxConfigUpdateOne {
	sbcuo.mutation.SetExperimentalConfig(m)
	return sbcuo
}

// ClearExperimentalConfig clears the value of the "experimental_config" field.
func (sbcuo *SingBoxConfigUpdateOne) ClearExperimentalConfig() *SingBoxConfigUpdateOne {
	sbcuo.mutation.ClearExperimentalConfig()
	return sbcuo
}

// SetEndpoints sets the "endpoints" field.
func (sbcuo *SingBoxConfigUpdateOne) SetEndpoints(i []interface{}) *SingBoxConfigUpdateOne {
	sbcuo.mutation.SetEndpoints(i)
	return sbcuo
}

// AppendEndpoints appends i to the "endpoints" field.
func (sbcuo *SingBoxConfigUpdateOne) AppendEndpoints(i []interface{}) *SingBoxConfigUpdateOne {
	sbcuo.mutation.AppendEndpoints(i)
	return sbcuo
}

// ClearEndpoints clears the value of the "endpoints" field.
func (sbcuo *SingBoxConfigUpdateOne) ClearEndpoints() *SingBoxConfigUpdateOne {
	sbcuo.mutation.ClearEndpoints()
	return sbcuo
}

// SetCertificateConfig sets the "certificate_config" field.
func (sbcuo *SingBoxConfigUpdateOne) SetCertificateConfig(m map[string]interface{}) *SingBoxConfigUpdateOne {
	sbcuo.mutation.SetCertificateConfig(m)
	return sbcuo
}

// ClearCertificateConfig clears the value of the "certificate_config" field.
func (sbcuo *SingBoxConfigUpdateOne) ClearCertificateConfig() *SingBoxConfigUpdateOne {
	sbcuo.mutation.ClearCertificateConfig()
	return sbcuo
}

// Mutation returns the SingBoxConfigMutation object of the builder.
func (sbcuo *SingBoxConfigUpdateOne) Mutation() *SingBoxConfigMutation {
	return sbcuo.mutation
}

// Where appends a list predicates to the SingBoxConfigUpdate builder.
func (sbcuo *SingBoxConfigUpdateOne) Where(ps ...predicate.SingBoxConfig) *SingBoxConfigUpdateOne {
	sbcuo.mutation.Where(ps...)
	return sbcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sbcuo *SingBoxConfigUpdateOne) Select(field string, fields ...string) *SingBoxConfigUpdateOne {
	sbcuo.fields = append([]string{field}, fields...)
	return sbcuo
}

// Save executes the query and returns the updated SingBoxConfig entity.
func (sbcuo *SingBoxConfigUpdateOne) Save(ctx context.Context) (*SingBoxConfig, error) {
	sbcuo.defaults()
	return withHooks(ctx, sbcuo.sqlSave, sbcuo.mutation, sbcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbcuo *SingBoxConfigUpdateOne) SaveX(ctx context.Context) *SingBoxConfig {
	node, err := sbcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sbcuo *SingBoxConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := sbcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbcuo *SingBoxConfigUpdateOne) ExecX(ctx context.Context) {
	if err := sbcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sbcuo *SingBoxConfigUpdateOne) defaults() {
	if _, ok := sbcuo.mutation.UpdatedAt(); !ok {
		v := singboxconfig.UpdateDefaultUpdatedAt()
		sbcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbcuo *SingBoxConfigUpdateOne) check() error {
	if v, ok := sbcuo.mutation.Name(); ok {
		if err := singboxconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SingBoxConfig.name": %w`, err)}
		}
	}
	return nil
}

func (sbcuo *SingBoxConfigUpdateOne) sqlSave(ctx context.Context) (_node *SingBoxConfig, err error) {
	if err := sbcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(singboxconfig.Table, singboxconfig.Columns, sqlgraph.NewFieldSpec(singboxconfig.FieldID, field.TypeString))
	id, ok := sbcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SingBoxConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sbcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, singboxconfig.FieldID)
		for _, f := range fields {
			if !singboxconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != singboxconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sbcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbcuo.mutation.Name(); ok {
		_spec.SetField(singboxconfig.FieldName, field.TypeString, value)
	}
	if value, ok := sbcuo.mutation.Description(); ok {
		_spec.SetField(singboxconfig.FieldDescription, field.TypeString, value)
	}
	if sbcuo.mutation.DescriptionCleared() {
		_spec.ClearField(singboxconfig.FieldDescription, field.TypeString)
	}
	if value, ok := sbcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(singboxconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sbcuo.mutation.LogConfig(); ok {
		_spec.SetField(singboxconfig.FieldLogConfig, field.TypeJSON, value)
	}
	if sbcuo.mutation.LogConfigCleared() {
		_spec.ClearField(singboxconfig.FieldLogConfig, field.TypeJSON)
	}
	if value, ok := sbcuo.mutation.DNSConfig(); ok {
		_spec.SetField(singboxconfig.FieldDNSConfig, field.TypeJSON, value)
	}
	if sbcuo.mutation.DNSConfigCleared() {
		_spec.ClearField(singboxconfig.FieldDNSConfig, field.TypeJSON)
	}
	if value, ok := sbcuo.mutation.NtpConfig(); ok {
		_spec.SetField(singboxconfig.FieldNtpConfig, field.TypeJSON, value)
	}
	if sbcuo.mutation.NtpConfigCleared() {
		_spec.ClearField(singboxconfig.FieldNtpConfig, field.TypeJSON)
	}
	if value, ok := sbcuo.mutation.Inbounds(); ok {
		_spec.SetField(singboxconfig.FieldInbounds, field.TypeJSON, value)
	}
	if value, ok := sbcuo.mutation.AppendedInbounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, singboxconfig.FieldInbounds, value)
		})
	}
	if sbcuo.mutation.InboundsCleared() {
		_spec.ClearField(singboxconfig.FieldInbounds, field.TypeJSON)
	}
	if value, ok := sbcuo.mutation.Outbounds(); ok {
		_spec.SetField(singboxconfig.FieldOutbounds, field.TypeJSON, value)
	}
	if value, ok := sbcuo.mutation.AppendedOutbounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, singboxconfig.FieldOutbounds, value)
		})
	}
	if sbcuo.mutation.OutboundsCleared() {
		_spec.ClearField(singboxconfig.FieldOutbounds, field.TypeJSON)
	}
	if value, ok := sbcuo.mutation.RouteConfig(); ok {
		_spec.SetField(singboxconfig.FieldRouteConfig, field.TypeJSON, value)
	}
	if sbcuo.mutation.RouteConfigCleared() {
		_spec.ClearField(singboxconfig.FieldRouteConfig, field.TypeJSON)
	}
	if value, ok := sbcuo.mutation.ExperimentalConfig(); ok {
		_spec.SetField(singboxconfig.FieldExperimentalConfig, field.TypeJSON, value)
	}
	if sbcuo.mutation.ExperimentalConfigCleared() {
		_spec.ClearField(singboxconfig.FieldExperimentalConfig, field.TypeJSON)
	}
	if value, ok := sbcuo.mutation.Endpoints(); ok {
		_spec.SetField(singboxconfig.FieldEndpoints, field.TypeJSON, value)
	}
	if value, ok := sbcuo.mutation.AppendedEndpoints(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, singboxconfig.FieldEndpoints, value)
		})
	}
	if sbcuo.mutation.EndpointsCleared() {
		_spec.ClearField(singboxconfig.FieldEndpoints, field.TypeJSON)
	}
	if value, ok := sbcuo.mutation.CertificateConfig(); ok {
		_spec.SetField(singboxconfig.FieldCertificateConfig, field.TypeJSON, value)
	}
	if sbcuo.mutation.CertificateConfigCleared() {
		_spec.ClearField(singboxconfig.FieldCertificateConfig, field.TypeJSON)
	}
	_node = &SingBoxConfig{config: sbcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sbcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{singboxconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sbcuo.mutation.done = true
	return _node, nil
}
