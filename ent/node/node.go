// Code generated by ent, DO NOT EDIT.

package node

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the node type in the database.
	Label = "node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldOsInfo holds the string denoting the os_info field in the database.
	FieldOsInfo = "os_info"
	// FieldAgentInfo holds the string denoting the agent_info field in the database.
	FieldAgentInfo = "agent_info"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLastSeen holds the string denoting the last_seen field in the database.
	FieldLastSeen = "last_seen"
	// EdgeServiceInstances holds the string denoting the service_instances edge name in mutations.
	EdgeServiceInstances = "service_instances"
	// EdgeAgentTokens holds the string denoting the agent_tokens edge name in mutations.
	EdgeAgentTokens = "agent_tokens"
	// Table holds the table name of the node in the database.
	Table = "nodes"
	// ServiceInstancesTable is the table that holds the service_instances relation/edge.
	ServiceInstancesTable = "service_instances"
	// ServiceInstancesInverseTable is the table name for the ServiceInstance entity.
	// It exists in this package in order to avoid circular dependency with the "serviceinstance" package.
	ServiceInstancesInverseTable = "service_instances"
	// ServiceInstancesColumn is the table column denoting the service_instances relation/edge.
	ServiceInstancesColumn = "node_id"
	// AgentTokensTable is the table that holds the agent_tokens relation/edge.
	AgentTokensTable = "agent_tokens"
	// AgentTokensInverseTable is the table name for the AgentToken entity.
	// It exists in this package in order to avoid circular dependency with the "agenttoken" package.
	AgentTokensInverseTable = "agent_tokens"
	// AgentTokensColumn is the table column denoting the agent_tokens relation/edge.
	AgentTokensColumn = "node_id"
)

// Columns holds all SQL columns for node fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldHostname,
	FieldIPAddress,
	FieldPort,
	FieldStatus,
	FieldOsInfo,
	FieldAgentInfo,
	FieldTags,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldLastSeen,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// HostnameValidator is a validator for the "hostname" field. It is called by the builders before save.
	HostnameValidator func(string) error
	// IPAddressValidator is a validator for the "ip_address" field. It is called by the builders before save.
	IPAddressValidator func(string) error
	// PortValidator is a validator for the "port" field. It is called by the builders before save.
	PortValidator func(int) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Node queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByPort orders the results by the port field.
func ByPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPort, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLastSeen orders the results by the last_seen field.
func ByLastSeen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSeen, opts...).ToFunc()
}

// ByServiceInstancesCount orders the results by service_instances count.
func ByServiceInstancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServiceInstancesStep(), opts...)
	}
}

// ByServiceInstances orders the results by service_instances terms.
func ByServiceInstances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceInstancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAgentTokensCount orders the results by agent_tokens count.
func ByAgentTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAgentTokensStep(), opts...)
	}
}

// ByAgentTokens orders the results by agent_tokens terms.
func ByAgentTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newServiceInstancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceInstancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServiceInstancesTable, ServiceInstancesColumn),
	)
}
func newAgentTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AgentTokensTable, AgentTokensColumn),
	)
}
