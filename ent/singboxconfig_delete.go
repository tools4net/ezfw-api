// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/predicate"
	"github.com/tools4net/ezfw/backend/ent/singboxconfig"
)

// SingBoxConfigDelete is the builder for deleting a SingBoxConfig entity.
type SingBoxConfigDelete struct {
	config
	hooks    []Hook
	mutation *SingBoxConfigMutation
}

// Where appends a list predicates to the SingBoxConfigDelete builder.
func (sbcd *SingBoxConfigDelete) Where(ps ...predicate.SingBoxConfig) *SingBoxConfigDelete {
	sbcd.mutation.Where(ps...)
	return sbcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sbcd *SingBoxConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sbcd.sqlExec, sbcd.mutation, sbcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sbcd *SingBoxConfigDelete) ExecX(ctx context.Context) int {
	n, err := sbcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sbcd *SingBoxConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(singboxconfig.Table, sqlgraph.NewFieldSpec(singboxconfig.FieldID, field.TypeString))
	if ps := sbcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sbcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sbcd.mutation.done = true
	return affected, err
}

// SingBoxConfigDeleteOne is the builder for deleting a single SingBoxConfig entity.
type SingBoxConfigDeleteOne struct {
	sbcd *SingBoxConfigDelete
}

// Where appends a list predicates to the SingBoxConfigDelete builder.
func (sbcdo *SingBoxConfigDeleteOne) Where(ps ...predicate.SingBoxConfig) *SingBoxConfigDeleteOne {
	sbcdo.sbcd.mutation.Where(ps...)
	return sbcdo
}

// Exec executes the deletion query.
func (sbcdo *SingBoxConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := sbcdo.sbcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{singboxconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sbcdo *SingBoxConfigDeleteOne) ExecX(ctx context.Context) {
	if err := sbcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
