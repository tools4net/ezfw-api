// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tools4net/ezfw/backend/ent/haproxyconfig"
	"github.com/tools4net/ezfw/backend/internal/models"
)

// HAProxyConfig is the model entity for the HAProxyConfig schema.
type HAProxyConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// GlobalConfig holds the value of the "global_config" field.
	GlobalConfig *models.HAProxyGlobal `json:"global_config,omitempty"`
	// DefaultsConfig holds the value of the "defaults_config" field.
	DefaultsConfig *models.HAProxyDefaults `json:"defaults_config,omitempty"`
	// Frontends holds the value of the "frontends" field.
	Frontends []models.HAProxyFrontend `json:"frontends,omitempty"`
	// Backends holds the value of the "backends" field.
	Backends []models.HAProxyBackend `json:"backends,omitempty"`
	// Listens holds the value of the "listens" field.
	Listens []models.HAProxyListen `json:"listens,omitempty"`
	// StatsConfig holds the value of the "stats_config" field.
	StatsConfig  *models.HAProxyStats `json:"stats_config,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HAProxyConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case haproxyconfig.FieldGlobalConfig, haproxyconfig.FieldDefaultsConfig, haproxyconfig.FieldFrontends, haproxyconfig.FieldBackends, haproxyconfig.FieldListens, haproxyconfig.FieldStatsConfig:
			values[i] = new([]byte)
		case haproxyconfig.FieldID, haproxyconfig.FieldName, haproxyconfig.FieldDescription:
			values[i] = new(sql.NullString)
		case haproxyconfig.FieldCreatedAt, haproxyconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HAProxyConfig fields.
func (hpc *HAProxyConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case haproxyconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				hpc.ID = value.String
			}
		case haproxyconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				hpc.Name = value.String
			}
		case haproxyconfig.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				hpc.Description = value.String
			}
		case haproxyconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hpc.CreatedAt = value.Time
			}
		case haproxyconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hpc.UpdatedAt = value.Time
			}
		case haproxyconfig.FieldGlobalConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field global_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hpc.GlobalConfig); err != nil {
					return fmt.Errorf("unmarshal field global_config: %w", err)
				}
			}
		case haproxyconfig.FieldDefaultsConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field defaults_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hpc.DefaultsConfig); err != nil {
					return fmt.Errorf("unmarshal field defaults_config: %w", err)
				}
			}
		case haproxyconfig.FieldFrontends:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field frontends", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hpc.Frontends); err != nil {
					return fmt.Errorf("unmarshal field frontends: %w", err)
				}
			}
		case haproxyconfig.FieldBackends:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field backends", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hpc.Backends); err != nil {
					return fmt.Errorf("unmarshal field backends: %w", err)
				}
			}
		case haproxyconfig.FieldListens:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field listens", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hpc.Listens); err != nil {
					return fmt.Errorf("unmarshal field listens: %w", err)
				}
			}
		case haproxyconfig.FieldStatsConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field stats_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hpc.StatsConfig); err != nil {
					return fmt.Errorf("unmarshal field stats_config: %w", err)
				}
			}
		default:
			hpc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HAProxyConfig.
// This includes values selected through modifiers, order, etc.
func (hpc *HAProxyConfig) Value(name string) (ent.Value, error) {
	return hpc.selectValues.Get(name)
}

// Update returns a builder for updating this HAProxyConfig.
// Note that you need to call HAProxyConfig.Unwrap() before calling this method if this HAProxyConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (hpc *HAProxyConfig) Update() *HAProxyConfigUpdateOne {
	return NewHAProxyConfigClient(hpc.config).UpdateOne(hpc)
}

// Unwrap unwraps the HAProxyConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hpc *HAProxyConfig) Unwrap() *HAProxyConfig {
	_tx, ok := hpc.config.driver.(*txDriver)
	if !ok {
		panic("ent: HAProxyConfig is not a transactional entity")
	}
	hpc.config.driver = _tx.drv
	return hpc
}

// String implements the fmt.Stringer.
func (hpc *HAProxyConfig) String() string {
	var builder strings.Builder
	builder.WriteString("HAProxyConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hpc.ID))
	builder.WriteString("name=")
	builder.WriteString(hpc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(hpc.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(hpc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hpc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("global_config=")
	builder.WriteString(fmt.Sprintf("%v", hpc.GlobalConfig))
	builder.WriteString(", ")
	builder.WriteString("defaults_config=")
	builder.WriteString(fmt.Sprintf("%v", hpc.DefaultsConfig))
	builder.WriteString(", ")
	builder.WriteString("frontends=")
	builder.WriteString(fmt.Sprintf("%v", hpc.Frontends))
	builder.WriteString(", ")
	builder.WriteString("backends=")
	builder.WriteString(fmt.Sprintf("%v", hpc.Backends))
	builder.WriteString(", ")
	builder.WriteString("listens=")
	builder.WriteString(fmt.Sprintf("%v", hpc.Listens))
	builder.WriteString(", ")
	builder.WriteString("stats_config=")
	builder.WriteString(fmt.Sprintf("%v", hpc.StatsConfig))
	builder.WriteByte(')')
	return builder.String()
}

// HAProxyConfigs is a parsable slice of HAProxyConfig.
type HAProxyConfigs []*HAProxyConfig
