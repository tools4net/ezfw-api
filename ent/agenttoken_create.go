// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/agenttoken"
	"github.com/tools4net/ezfw/backend/ent/node"
)

// AgentTokenCreate is the builder for creating a AgentToken entity.
type AgentTokenCreate struct {
	config
	mutation *AgentTokenMutation
	hooks    []Hook
}

// SetNodeID sets the "node_id" field.
func (atc *AgentTokenCreate) SetNodeID(s string) *AgentTokenCreate {
	atc.mutation.SetNodeID(s)
	return atc
}

// SetToken sets the "token" field.
func (atc *AgentTokenCreate) SetToken(s string) *AgentTokenCreate {
	atc.mutation.SetToken(s)
	return atc
}

// SetName sets the "name" field.
func (atc *AgentTokenCreate) SetName(s string) *AgentTokenCreate {
	atc.mutation.SetName(s)
	return atc
}

// SetStatus sets the "status" field.
func (atc *AgentTokenCreate) SetStatus(s string) *AgentTokenCreate {
	atc.mutation.SetStatus(s)
	return atc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atc *AgentTokenCreate) SetNillableStatus(s *string) *AgentTokenCreate {
	if s != nil {
		atc.SetStatus(*s)
	}
	return atc
}

// SetExpiresAt sets the "expires_at" field.
func (atc *AgentTokenCreate) SetExpiresAt(t time.Time) *AgentTokenCreate {
	atc.mutation.SetExpiresAt(t)
	return atc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (atc *AgentTokenCreate) SetNillableExpiresAt(t *time.Time) *AgentTokenCreate {
	if t != nil {
		atc.SetExpiresAt(*t)
	}
	return atc
}

// SetCreatedAt sets the "created_at" field.
func (atc *AgentTokenCreate) SetCreatedAt(t time.Time) *AgentTokenCreate {
	atc.mutation.SetCreatedAt(t)
	return atc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atc *AgentTokenCreate) SetNillableCreatedAt(t *time.Time) *AgentTokenCreate {
	if t != nil {
		atc.SetCreatedAt(*t)
	}
	return atc
}

// SetUpdatedAt sets the "updated_at" field.
func (atc *AgentTokenCreate) SetUpdatedAt(t time.Time) *AgentTokenCreate {
	atc.mutation.SetUpdatedAt(t)
	return atc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (atc *AgentTokenCreate) SetNillableUpdatedAt(t *time.Time) *AgentTokenCreate {
	if t != nil {
		atc.SetUpdatedAt(*t)
	}
	return atc
}

// SetLastUsed sets the "last_used" field.
func (atc *AgentTokenCreate) SetLastUsed(t time.Time) *AgentTokenCreate {
	atc.mutation.SetLastUsed(t)
	return atc
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (atc *AgentTokenCreate) SetNillableLastUsed(t *time.Time) *AgentTokenCreate {
	if t != nil {
		atc.SetLastUsed(*t)
	}
	return atc
}

// SetID sets the "id" field.
func (atc *AgentTokenCreate) SetID(s string) *AgentTokenCreate {
	atc.mutation.SetID(s)
	return atc
}

// SetNode sets the "node" edge to the Node entity.
func (atc *AgentTokenCreate) SetNode(n *Node) *AgentTokenCreate {
	return atc.SetNodeID(n.ID)
}

// Mutation returns the AgentTokenMutation object of the builder.
func (atc *AgentTokenCreate) Mutation() *AgentTokenMutation {
	return atc.mutation
}

// Save creates the AgentToken in the database.
func (atc *AgentTokenCreate) Save(ctx context.Context) (*AgentToken, error) {
	atc.defaults()
	return withHooks(ctx, atc.sqlSave, atc.mutation, atc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AgentTokenCreate) SaveX(ctx context.Context) *AgentToken {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AgentTokenCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AgentTokenCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *AgentTokenCreate) defaults() {
	if _, ok := atc.mutation.Status(); !ok {
		v := agenttoken.DefaultStatus
		atc.mutation.SetStatus(v)
	}
	if _, ok := atc.mutation.CreatedAt(); !ok {
		v := agenttoken.DefaultCreatedAt()
		atc.mutation.SetCreatedAt(v)
	}
	if _, ok := atc.mutation.UpdatedAt(); !ok {
		v := agenttoken.DefaultUpdatedAt()
		atc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *AgentTokenCreate) check() error {
	if _, ok := atc.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`ent: missing required field "AgentToken.node_id"`)}
	}
	if v, ok := atc.mutation.NodeID(); ok {
		if err := agenttoken.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`ent: validator failed for field "AgentToken.node_id": %w`, err)}
		}
	}
	if _, ok := atc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "AgentToken.token"`)}
	}
	if v, ok := atc.mutation.Token(); ok {
		if err := agenttoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "AgentToken.token": %w`, err)}
		}
	}
	if _, ok := atc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AgentToken.name"`)}
	}
	if v, ok := atc.mutation.Name(); ok {
		if err := agenttoken.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AgentToken.name": %w`, err)}
		}
	}
	if _, ok := atc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "AgentToken.status"`)}
	}
	if _, ok := atc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AgentToken.created_at"`)}
	}
	if _, ok := atc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AgentToken.updated_at"`)}
	}
	if len(atc.mutation.NodeIDs()) == 0 {
		return &ValidationError{Name: "node", err: errors.New(`ent: missing required edge "AgentToken.node"`)}
	}
	return nil
}

func (atc *AgentTokenCreate) sqlSave(ctx context.Context) (*AgentToken, error) {
	if err := atc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AgentToken.ID type: %T", _spec.ID.Value)
		}
	}
	atc.mutation.id = &_node.ID
	atc.mutation.done = true
	return _node, nil
}

func (atc *AgentTokenCreate) createSpec() (*AgentToken, *sqlgraph.CreateSpec) {
	var (
		_node = &AgentToken{config: atc.config}
		_spec = sqlgraph.NewCreateSpec(agenttoken.Table, sqlgraph.NewFieldSpec(agenttoken.FieldID, field.TypeString))
	)
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := atc.mutation.Token(); ok {
		_spec.SetField(agenttoken.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := atc.mutation.Name(); ok {
		_spec.SetField(agenttoken.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := atc.mutation.Status(); ok {
		_spec.SetField(agenttoken.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := atc.mutation.ExpiresAt(); ok {
		_spec.SetField(agenttoken.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if value, ok := atc.mutation.CreatedAt(); ok {
		_spec.SetField(agenttoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := atc.mutation.UpdatedAt(); ok {
		_spec.SetField(agenttoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := atc.mutation.LastUsed(); ok {
		_spec.SetField(agenttoken.FieldLastUsed, field.TypeTime, value)
		_node.LastUsed = &value
	}
	if nodes := atc.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agenttoken.NodeTable,
			Columns: []string{agenttoken.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NodeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AgentTokenCreateBulk is the builder for creating many AgentToken entities in bulk.
type AgentTokenCreateBulk struct {
	config
	err      error
	builders []*AgentTokenCreate
}

// Save creates the AgentToken entities in the database.
func (atcb *AgentTokenCreateBulk) Save(ctx context.Context) ([]*AgentToken, error) {
	if atcb.err != nil {
		return nil, atcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AgentToken, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgentTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AgentTokenCreateBulk) SaveX(ctx context.Context) []*AgentToken {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AgentTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AgentTokenCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}
