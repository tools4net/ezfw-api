// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/tools4net/ezfw/backend/ent/agenttoken"
	"github.com/tools4net/ezfw/backend/ent/node"
	"github.com/tools4net/ezfw/backend/ent/predicate"
	"github.com/tools4net/ezfw/backend/ent/serviceinstance"
	"github.com/tools4net/ezfw/backend/internal/models"
)

// NodeUpdate is the builder for updating Node entities.
type NodeUpdate struct {
	config
	hooks    []Hook
	mutation *NodeMutation
}

// Where appends a list predicates to the NodeUpdate builder.
func (nu *NodeUpdate) Where(ps ...predicate.Node) *NodeUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetName sets the "name" field.
func (nu *NodeUpdate) SetName(s string) *NodeUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableName(s *string) *NodeUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetDescription sets the "description" field.
func (nu *NodeUpdate) SetDescription(s string) *NodeUpdate {
	nu.mutation.SetDescription(s)
	return nu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableDescription(s *string) *NodeUpdate {
	if s != nil {
		nu.SetDescription(*s)
	}
	return nu
}

// ClearDescription clears the value of the "description" field.
func (nu *NodeUpdate) ClearDescription() *NodeUpdate {
	nu.mutation.ClearDescription()
	return nu
}

// SetHostname sets the "hostname" field.
func (nu *NodeUpdate) SetHostname(s string) *NodeUpdate {
	nu.mutation.SetHostname(s)
	return nu
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableHostname(s *string) *NodeUpdate {
	if s != nil {
		nu.SetHostname(*s)
	}
	return nu
}

// SetIPAddress sets the "ip_address" field.
func (nu *NodeUpdate) SetIPAddress(s string) *NodeUpdate {
	nu.mutation.SetIPAddress(s)
	return nu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableIPAddress(s *string) *NodeUpdate {
	if s != nil {
		nu.SetIPAddress(*s)
	}
	return nu
}

// SetPort sets the "port" field.
func (nu *NodeUpdate) SetPort(i int) *NodeUpdate {
	nu.mutation.ResetPort()
	nu.mutation.SetPort(i)
	return nu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (nu *NodeUpdate) SetNillablePort(i *int) *NodeUpdate {
	if i != nil {
		nu.SetPort(*i)
	}
	return nu
}

// AddPort adds i to the "port" field.
func (nu *NodeUpdate) AddPort(i int) *NodeUpdate {
	nu.mutation.AddPort(i)
	return nu
}

// SetStatus sets the "status" field.
func (nu *NodeUpdate) SetStatus(s string) *NodeUpdate {
	nu.mutation.SetStatus(s)
	return nu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableStatus(s *string) *NodeUpdate {
	if s != nil {
		nu.SetStatus(*s)
	}
	return nu
}

// SetOsInfo sets the "os_info" field.
func (nu *NodeUpdate) SetOsInfo(mi *models.OSInfo) *NodeUpdate {
	nu.mutation.SetOsInfo(mi)
	return nu
}

// ClearOsInfo clears the value of the "os_info" field.
func (nu *NodeUpdate) ClearOsInfo() *NodeUpdate {
	nu.mutation.ClearOsInfo()
	return nu
}

// SetAgentInfo sets the "agent_info" field.
func (nu *NodeUpdate) SetAgentInfo(mi *models.AgentInfo) *NodeUpdate {
	nu.mutation.SetAgentInfo(mi)
	return nu
}

// ClearAgentInfo clears the value of the "agent_info" field.
func (nu *NodeUpdate) ClearAgentInfo() *NodeUpdate {
	nu.mutation.ClearAgentInfo()
	return nu
}

// SetTags sets the "tags" field.
func (nu *NodeUpdate) SetTags(s []string) *NodeUpdate {
	nu.mutation.SetTags(s)
	return nu
}

// AppendTags appends s to the "tags" field.
func (nu *NodeUpdate) AppendTags(s []string) *NodeUpdate {
	nu.mutation.AppendTags(s)
	return nu
}

// ClearTags clears the value of the "tags" field.
func (nu *NodeUpdate) ClearTags() *NodeUpdate {
	nu.mutation.ClearTags()
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NodeUpdate) SetUpdatedAt(t time.Time) *NodeUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetLastSeen sets the "last_seen" field.
func (nu *NodeUpdate) SetLastSeen(t time.Time) *NodeUpdate {
	nu.mutation.SetLastSeen(t)
	return nu
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableLastSeen(t *time.Time) *NodeUpdate {
	if t != nil {
		nu.SetLastSeen(*t)
	}
	return nu
}

// ClearLastSeen clears the value of the "last_seen" field.
func (nu *NodeUpdate) ClearLastSeen() *NodeUpdate {
	nu.mutation.ClearLastSeen()
	return nu
}

// AddServiceInstanceIDs adds the "service_instances" edge to the ServiceInstance entity by IDs.
func (nu *NodeUpdate) AddServiceInstanceIDs(ids ...string) *NodeUpdate {
	nu.mutation.AddServiceInstanceIDs(ids...)
	return nu
}

// AddServiceInstances adds the "service_instances" edges to the ServiceInstance entity.
func (nu *NodeUpdate) AddServiceInstances(s ...*ServiceInstance) *NodeUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nu.AddServiceInstanceIDs(ids...)
}

// AddAgentTokenIDs adds the "agent_tokens" edge to the AgentToken entity by IDs.
func (nu *NodeUpdate) AddAgentTokenIDs(ids ...string) *NodeUpdate {
	nu.mutation.AddAgentTokenIDs(ids...)
	return nu
}

// AddAgentTokens adds the "agent_tokens" edges to the AgentToken entity.
func (nu *NodeUpdate) AddAgentTokens(a ...*AgentToken) *NodeUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.AddAgentTokenIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nu *NodeUpdate) Mutation() *NodeMutation {
	return nu.mutation
}

// ClearServiceInstances clears all "service_instances" edges to the ServiceInstance entity.
func (nu *NodeUpdate) ClearServiceInstances() *NodeUpdate {
	nu.mutation.ClearServiceInstances()
	return nu
}

// RemoveServiceInstanceIDs removes the "service_instances" edge to ServiceInstance entities by IDs.
func (nu *NodeUpdate) RemoveServiceInstanceIDs(ids ...string) *NodeUpdate {
	nu.mutation.RemoveServiceInstanceIDs(ids...)
	return nu
}

// RemoveServiceInstances removes "service_instances" edges to ServiceInstance entities.
func (nu *NodeUpdate) RemoveServiceInstances(s ...*ServiceInstance) *NodeUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nu.RemoveServiceInstanceIDs(ids...)
}

// ClearAgentTokens clears all "agent_tokens" edges to the AgentToken entity.
func (nu *NodeUpdate) ClearAgentTokens() *NodeUpdate {
	nu.mutation.ClearAgentTokens()
	return nu
}

// RemoveAgentTokenIDs removes the "agent_tokens" edge to AgentToken entities by IDs.
func (nu *NodeUpdate) RemoveAgentTokenIDs(ids ...string) *NodeUpdate {
	nu.mutation.RemoveAgentTokenIDs(ids...)
	return nu
}

// RemoveAgentTokens removes "agent_tokens" edges to AgentToken entities.
func (nu *NodeUpdate) RemoveAgentTokens(a ...*AgentToken) *NodeUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.RemoveAgentTokenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NodeUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NodeUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NodeUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NodeUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NodeUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := node.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NodeUpdate) check() error {
	if v, ok := nu.mutation.Name(); ok {
		if err := node.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Node.name": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Hostname(); ok {
		if err := node.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Node.hostname": %w`, err)}
		}
	}
	if v, ok := nu.mutation.IPAddress(); ok {
		if err := node.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Node.ip_address": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Port(); ok {
		if err := node.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "Node.port": %w`, err)}
		}
	}
	return nil
}

func (nu *NodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
	}
	if nu.mutation.DescriptionCleared() {
		_spec.ClearField(node.FieldDescription, field.TypeString)
	}
	if value, ok := nu.mutation.Hostname(); ok {
		_spec.SetField(node.FieldHostname, field.TypeString, value)
	}
	if value, ok := nu.mutation.IPAddress(); ok {
		_spec.SetField(node.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := nu.mutation.Port(); ok {
		_spec.SetField(node.FieldPort, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedPort(); ok {
		_spec.AddField(node.FieldPort, field.TypeInt, value)
	}
	if value, ok := nu.mutation.Status(); ok {
		_spec.SetField(node.FieldStatus, field.TypeString, value)
	}
	if value, ok := nu.mutation.OsInfo(); ok {
		_spec.SetField(node.FieldOsInfo, field.TypeJSON, value)
	}
	if nu.mutation.OsInfoCleared() {
		_spec.ClearField(node.FieldOsInfo, field.TypeJSON)
	}
	if value, ok := nu.mutation.AgentInfo(); ok {
		_spec.SetField(node.FieldAgentInfo, field.TypeJSON, value)
	}
	if nu.mutation.AgentInfoCleared() {
		_spec.ClearField(node.FieldAgentInfo, field.TypeJSON)
	}
	if value, ok := nu.mutation.Tags(); ok {
		_spec.SetField(node.FieldTags, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldTags, value)
		})
	}
	if nu.mutation.TagsCleared() {
		_spec.ClearField(node.FieldTags, field.TypeJSON)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(node.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.LastSeen(); ok {
		_spec.SetField(node.FieldLastSeen, field.TypeTime, value)
	}
	if nu.mutation.LastSeenCleared() {
		_spec.ClearField(node.FieldLastSeen, field.TypeTime)
	}
	if nu.mutation.ServiceInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ServiceInstancesTable,
			Columns: []string{node.ServiceInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceinstance.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedServiceInstancesIDs(); len(nodes) > 0 && !nu.mutation.ServiceInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ServiceInstancesTable,
			Columns: []string{node.ServiceInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceinstance.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ServiceInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ServiceInstancesTable,
			Columns: []string{node.ServiceInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceinstance.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.AgentTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.AgentTokensTable,
			Columns: []string{node.AgentTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedAgentTokensIDs(); len(nodes) > 0 && !nu.mutation.AgentTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.AgentTokensTable,
			Columns: []string{node.AgentTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.AgentTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.AgentTokensTable,
			Columns: []string{node.AgentTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NodeUpdateOne is the builder for updating a single Node entity.
type NodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeMutation
}

// SetName sets the "name" field.
func (nuo *NodeUpdateOne) SetName(s string) *NodeUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableName(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetDescription sets the "description" field.
func (nuo *NodeUpdateOne) SetDescription(s string) *NodeUpdateOne {
	nuo.mutation.SetDescription(s)
	return nuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableDescription(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetDescription(*s)
	}
	return nuo
}

// ClearDescription clears the value of the "description" field.
func (nuo *NodeUpdateOne) ClearDescription() *NodeUpdateOne {
	nuo.mutation.ClearDescription()
	return nuo
}

// SetHostname sets the "hostname" field.
func (nuo *NodeUpdateOne) SetHostname(s string) *NodeUpdateOne {
	nuo.mutation.SetHostname(s)
	return nuo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableHostname(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetHostname(*s)
	}
	return nuo
}

// SetIPAddress sets the "ip_address" field.
func (nuo *NodeUpdateOne) SetIPAddress(s string) *NodeUpdateOne {
	nuo.mutation.SetIPAddress(s)
	return nuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableIPAddress(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetIPAddress(*s)
	}
	return nuo
}

// SetPort sets the "port" field.
func (nuo *NodeUpdateOne) SetPort(i int) *NodeUpdateOne {
	nuo.mutation.ResetPort()
	nuo.mutation.SetPort(i)
	return nuo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillablePort(i *int) *NodeUpdateOne {
	if i != nil {
		nuo.SetPort(*i)
	}
	return nuo
}

// AddPort adds i to the "port" field.
func (nuo *NodeUpdateOne) AddPort(i int) *NodeUpdateOne {
	nuo.mutation.AddPort(i)
	return nuo
}

// SetStatus sets the "status" field.
func (nuo *NodeUpdateOne) SetStatus(s string) *NodeUpdateOne {
	nuo.mutation.SetStatus(s)
	return nuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableStatus(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetStatus(*s)
	}
	return nuo
}

// SetOsInfo sets the "os_info" field.
func (nuo *NodeUpdateOne) SetOsInfo(mi *models.OSInfo) *NodeUpdateOne {
	nuo.mutation.SetOsInfo(mi)
	return nuo
}

// ClearOsInfo clears the value of the "os_info" field.
func (nuo *NodeUpdateOne) ClearOsInfo() *NodeUpdateOne {
	nuo.mutation.ClearOsInfo()
	return nuo
}

// SetAgentInfo sets the "agent_info" field.
func (nuo *NodeUpdateOne) SetAgentInfo(mi *models.AgentInfo) *NodeUpdateOne {
	nuo.mutation.SetAgentInfo(mi)
	return nuo
}

// ClearAgentInfo clears the value of the "agent_info" field.
func (nuo *NodeUpdateOne) ClearAgentInfo() *NodeUpdateOne {
	nuo.mutation.ClearAgentInfo()
	return nuo
}

// SetTags sets the "tags" field.
func (nuo *NodeUpdateOne) SetTags(s []string) *NodeUpdateOne {
	nuo.mutation.SetTags(s)
	return nuo
}

// AppendTags appends s to the "tags" field.
func (nuo *NodeUpdateOne) AppendTags(s []string) *NodeUpdateOne {
	nuo.mutation.AppendTags(s)
	return nuo
}

// ClearTags clears the value of the "tags" field.
func (nuo *NodeUpdateOne) ClearTags() *NodeUpdateOne {
	nuo.mutation.ClearTags()
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NodeUpdateOne) SetUpdatedAt(t time.Time) *NodeUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetLastSeen sets the "last_seen" field.
func (nuo *NodeUpdateOne) SetLastSeen(t time.Time) *NodeUpdateOne {
	nuo.mutation.SetLastSeen(t)
	return nuo
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableLastSeen(t *time.Time) *NodeUpdateOne {
	if t != nil {
		nuo.SetLastSeen(*t)
	}
	return nuo
}

// ClearLastSeen clears the value of the "last_seen" field.
func (nuo *NodeUpdateOne) ClearLastSeen() *NodeUpdateOne {
	nuo.mutation.ClearLastSeen()
	return nuo
}

// AddServiceInstanceIDs adds the "service_instances" edge to the ServiceInstance entity by IDs.
func (nuo *NodeUpdateOne) AddServiceInstanceIDs(ids ...string) *NodeUpdateOne {
	nuo.mutation.AddServiceInstanceIDs(ids...)
	return nuo
}

// AddServiceInstances adds the "service_instances" edges to the ServiceInstance entity.
func (nuo *NodeUpdateOne) AddServiceInstances(s ...*ServiceInstance) *NodeUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nuo.AddServiceInstanceIDs(ids...)
}

// AddAgentTokenIDs adds the "agent_tokens" edge to the AgentToken entity by IDs.
func (nuo *NodeUpdateOne) AddAgentTokenIDs(ids ...string) *NodeUpdateOne {
	nuo.mutation.AddAgentTokenIDs(ids...)
	return nuo
}

// AddAgentTokens adds the "agent_tokens" edges to the AgentToken entity.
func (nuo *NodeUpdateOne) AddAgentTokens(a ...*AgentToken) *NodeUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.AddAgentTokenIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nuo *NodeUpdateOne) Mutation() *NodeMutation {
	return nuo.mutation
}

// ClearServiceInstances clears all "service_instances" edges to the ServiceInstance entity.
func (nuo *NodeUpdateOne) ClearServiceInstances() *NodeUpdateOne {
	nuo.mutation.ClearServiceInstances()
	return nuo
}

// RemoveServiceInstanceIDs removes the "service_instances" edge to ServiceInstance entities by IDs.
func (nuo *NodeUpdateOne) RemoveServiceInstanceIDs(ids ...string) *NodeUpdateOne {
	nuo.mutation.RemoveServiceInstanceIDs(ids...)
	return nuo
}

// RemoveServiceInstances removes "service_instances" edges to ServiceInstance entities.
func (nuo *NodeUpdateOne) RemoveServiceInstances(s ...*ServiceInstance) *NodeUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nuo.RemoveServiceInstanceIDs(ids...)
}

// ClearAgentTokens clears all "agent_tokens" edges to the AgentToken entity.
func (nuo *NodeUpdateOne) ClearAgentTokens() *NodeUpdateOne {
	nuo.mutation.ClearAgentTokens()
	return nuo
}

// RemoveAgentTokenIDs removes the "agent_tokens" edge to AgentToken entities by IDs.
func (nuo *NodeUpdateOne) RemoveAgentTokenIDs(ids ...string) *NodeUpdateOne {
	nuo.mutation.RemoveAgentTokenIDs(ids...)
	return nuo
}

// RemoveAgentTokens removes "agent_tokens" edges to AgentToken entities.
func (nuo *NodeUpdateOne) RemoveAgentTokens(a ...*AgentToken) *NodeUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.RemoveAgentTokenIDs(ids...)
}

// Where appends a list predicates to the NodeUpdate builder.
func (nuo *NodeUpdateOne) Where(ps ...predicate.Node) *NodeUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NodeUpdateOne) Select(field string, fields ...string) *NodeUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Node entity.
func (nuo *NodeUpdateOne) Save(ctx context.Context) (*Node, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NodeUpdateOne) SaveX(ctx context.Context) *Node {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NodeUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NodeUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NodeUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := node.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NodeUpdateOne) check() error {
	if v, ok := nuo.mutation.Name(); ok {
		if err := node.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Node.name": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Hostname(); ok {
		if err := node.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Node.hostname": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.IPAddress(); ok {
		if err := node.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Node.ip_address": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Port(); ok {
		if err := node.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "Node.port": %w`, err)}
		}
	}
	return nil
}

func (nuo *NodeUpdateOne) sqlSave(ctx context.Context) (_node *Node, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Node.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, node.FieldID)
		for _, f := range fields {
			if !node.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != node.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
	}
	if nuo.mutation.DescriptionCleared() {
		_spec.ClearField(node.FieldDescription, field.TypeString)
	}
	if value, ok := nuo.mutation.Hostname(); ok {
		_spec.SetField(node.FieldHostname, field.TypeString, value)
	}
	if value, ok := nuo.mutation.IPAddress(); ok {
		_spec.SetField(node.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Port(); ok {
		_spec.SetField(node.FieldPort, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedPort(); ok {
		_spec.AddField(node.FieldPort, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.Status(); ok {
		_spec.SetField(node.FieldStatus, field.TypeString, value)
	}
	if value, ok := nuo.mutation.OsInfo(); ok {
		_spec.SetField(node.FieldOsInfo, field.TypeJSON, value)
	}
	if nuo.mutation.OsInfoCleared() {
		_spec.ClearField(node.FieldOsInfo, field.TypeJSON)
	}
	if value, ok := nuo.mutation.AgentInfo(); ok {
		_spec.SetField(node.FieldAgentInfo, field.TypeJSON, value)
	}
	if nuo.mutation.AgentInfoCleared() {
		_spec.ClearField(node.FieldAgentInfo, field.TypeJSON)
	}
	if value, ok := nuo.mutation.Tags(); ok {
		_spec.SetField(node.FieldTags, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldTags, value)
		})
	}
	if nuo.mutation.TagsCleared() {
		_spec.ClearField(node.FieldTags, field.TypeJSON)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(node.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.LastSeen(); ok {
		_spec.SetField(node.FieldLastSeen, field.TypeTime, value)
	}
	if nuo.mutation.LastSeenCleared() {
		_spec.ClearField(node.FieldLastSeen, field.TypeTime)
	}
	if nuo.mutation.ServiceInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ServiceInstancesTable,
			Columns: []string{node.ServiceInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceinstance.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedServiceInstancesIDs(); len(nodes) > 0 && !nuo.mutation.ServiceInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ServiceInstancesTable,
			Columns: []string{node.ServiceInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceinstance.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ServiceInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ServiceInstancesTable,
			Columns: []string{node.ServiceInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceinstance.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.AgentTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.AgentTokensTable,
			Columns: []string{node.AgentTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedAgentTokensIDs(); len(nodes) > 0 && !nuo.mutation.AgentTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.AgentTokensTable,
			Columns: []string{node.AgentTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.AgentTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.AgentTokensTable,
			Columns: []string{node.AgentTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Node{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
