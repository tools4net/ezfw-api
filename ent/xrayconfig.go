// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tools4net/ezfw/backend/ent/xrayconfig"
	"github.com/tools4net/ezfw/backend/internal/models"
)

// XrayConfig is the model entity for the XrayConfig schema.
type XrayConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Log holds the value of the "log" field.
	Log *models.LogObject `json:"log,omitempty"`
	// API holds the value of the "api" field.
	API *models.APIObject `json:"api,omitempty"`
	// DNS holds the value of the "dns" field.
	DNS *models.DNSObject `json:"dns,omitempty"`
	// Routing holds the value of the "routing" field.
	Routing *models.RoutingObject `json:"routing,omitempty"`
	// Policy holds the value of the "policy" field.
	Policy *models.PolicyObject `json:"policy,omitempty"`
	// Inbounds holds the value of the "inbounds" field.
	Inbounds []models.InboundObject `json:"inbounds,omitempty"`
	// Outbounds holds the value of the "outbounds" field.
	Outbounds []models.OutboundObject `json:"outbounds,omitempty"`
	// Transport holds the value of the "transport" field.
	Transport *models.TransportObject `json:"transport,omitempty"`
	// Stats holds the value of the "stats" field.
	Stats *models.StatsObject `json:"stats,omitempty"`
	// Reverse holds the value of the "reverse" field.
	Reverse *models.ReverseObject `json:"reverse,omitempty"`
	// Fakedns holds the value of the "fakedns" field.
	Fakedns *models.FakeDNSObject `json:"fakedns,omitempty"`
	// Metrics holds the value of the "metrics" field.
	Metrics *models.MetricsObject `json:"metrics,omitempty"`
	// Observatory holds the value of the "observatory" field.
	Observatory *models.ObservatoryObject `json:"observatory,omitempty"`
	// BurstObservatory holds the value of the "burst_observatory" field.
	BurstObservatory *models.BurstObservatoryObject `json:"burst_observatory,omitempty"`
	// Services holds the value of the "services" field.
	Services     map[string]interface{} `json:"services,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*XrayConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case xrayconfig.FieldLog, xrayconfig.FieldAPI, xrayconfig.FieldDNS, xrayconfig.FieldRouting, xrayconfig.FieldPolicy, xrayconfig.FieldInbounds, xrayconfig.FieldOutbounds, xrayconfig.FieldTransport, xrayconfig.FieldStats, xrayconfig.FieldReverse, xrayconfig.FieldFakedns, xrayconfig.FieldMetrics, xrayconfig.FieldObservatory, xrayconfig.FieldBurstObservatory, xrayconfig.FieldServices:
			values[i] = new([]byte)
		case xrayconfig.FieldID, xrayconfig.FieldName, xrayconfig.FieldDescription:
			values[i] = new(sql.NullString)
		case xrayconfig.FieldCreatedAt, xrayconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the XrayConfig fields.
func (xc *XrayConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case xrayconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				xc.ID = value.String
			}
		case xrayconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				xc.Name = value.String
			}
		case xrayconfig.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				xc.Description = value.String
			}
		case xrayconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				xc.CreatedAt = value.Time
			}
		case xrayconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				xc.UpdatedAt = value.Time
			}
		case xrayconfig.FieldLog:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field log", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.Log); err != nil {
					return fmt.Errorf("unmarshal field log: %w", err)
				}
			}
		case xrayconfig.FieldAPI:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field api", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.API); err != nil {
					return fmt.Errorf("unmarshal field api: %w", err)
				}
			}
		case xrayconfig.FieldDNS:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dns", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.DNS); err != nil {
					return fmt.Errorf("unmarshal field dns: %w", err)
				}
			}
		case xrayconfig.FieldRouting:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field routing", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.Routing); err != nil {
					return fmt.Errorf("unmarshal field routing: %w", err)
				}
			}
		case xrayconfig.FieldPolicy:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field policy", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.Policy); err != nil {
					return fmt.Errorf("unmarshal field policy: %w", err)
				}
			}
		case xrayconfig.FieldInbounds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field inbounds", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.Inbounds); err != nil {
					return fmt.Errorf("unmarshal field inbounds: %w", err)
				}
			}
		case xrayconfig.FieldOutbounds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field outbounds", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.Outbounds); err != nil {
					return fmt.Errorf("unmarshal field outbounds: %w", err)
				}
			}
		case xrayconfig.FieldTransport:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field transport", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.Transport); err != nil {
					return fmt.Errorf("unmarshal field transport: %w", err)
				}
			}
		case xrayconfig.FieldStats:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field stats", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.Stats); err != nil {
					return fmt.Errorf("unmarshal field stats: %w", err)
				}
			}
		case xrayconfig.FieldReverse:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field reverse", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.Reverse); err != nil {
					return fmt.Errorf("unmarshal field reverse: %w", err)
				}
			}
		case xrayconfig.FieldFakedns:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field fakedns", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.Fakedns); err != nil {
					return fmt.Errorf("unmarshal field fakedns: %w", err)
				}
			}
		case xrayconfig.FieldMetrics:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metrics", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.Metrics); err != nil {
					return fmt.Errorf("unmarshal field metrics: %w", err)
				}
			}
		case xrayconfig.FieldObservatory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field observatory", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.Observatory); err != nil {
					return fmt.Errorf("unmarshal field observatory: %w", err)
				}
			}
		case xrayconfig.FieldBurstObservatory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field burst_observatory", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.BurstObservatory); err != nil {
					return fmt.Errorf("unmarshal field burst_observatory: %w", err)
				}
			}
		case xrayconfig.FieldServices:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field services", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &xc.Services); err != nil {
					return fmt.Errorf("unmarshal field services: %w", err)
				}
			}
		default:
			xc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the XrayConfig.
// This includes values selected through modifiers, order, etc.
func (xc *XrayConfig) Value(name string) (ent.Value, error) {
	return xc.selectValues.Get(name)
}

// Update returns a builder for updating this XrayConfig.
// Note that you need to call XrayConfig.Unwrap() before calling this method if this XrayConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (xc *XrayConfig) Update() *XrayConfigUpdateOne {
	return NewXrayConfigClient(xc.config).UpdateOne(xc)
}

// Unwrap unwraps the XrayConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (xc *XrayConfig) Unwrap() *XrayConfig {
	_tx, ok := xc.config.driver.(*txDriver)
	if !ok {
		panic("ent: XrayConfig is not a transactional entity")
	}
	xc.config.driver = _tx.drv
	return xc
}

// String implements the fmt.Stringer.
func (xc *XrayConfig) String() string {
	var builder strings.Builder
	builder.WriteString("XrayConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", xc.ID))
	builder.WriteString("name=")
	builder.WriteString(xc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(xc.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(xc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(xc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("log=")
	builder.WriteString(fmt.Sprintf("%v", xc.Log))
	builder.WriteString(", ")
	builder.WriteString("api=")
	builder.WriteString(fmt.Sprintf("%v", xc.API))
	builder.WriteString(", ")
	builder.WriteString("dns=")
	builder.WriteString(fmt.Sprintf("%v", xc.DNS))
	builder.WriteString(", ")
	builder.WriteString("routing=")
	builder.WriteString(fmt.Sprintf("%v", xc.Routing))
	builder.WriteString(", ")
	builder.WriteString("policy=")
	builder.WriteString(fmt.Sprintf("%v", xc.Policy))
	builder.WriteString(", ")
	builder.WriteString("inbounds=")
	builder.WriteString(fmt.Sprintf("%v", xc.Inbounds))
	builder.WriteString(", ")
	builder.WriteString("outbounds=")
	builder.WriteString(fmt.Sprintf("%v", xc.Outbounds))
	builder.WriteString(", ")
	builder.WriteString("transport=")
	builder.WriteString(fmt.Sprintf("%v", xc.Transport))
	builder.WriteString(", ")
	builder.WriteString("stats=")
	builder.WriteString(fmt.Sprintf("%v", xc.Stats))
	builder.WriteString(", ")
	builder.WriteString("reverse=")
	builder.WriteString(fmt.Sprintf("%v", xc.Reverse))
	builder.WriteString(", ")
	builder.WriteString("fakedns=")
	builder.WriteString(fmt.Sprintf("%v", xc.Fakedns))
	builder.WriteString(", ")
	builder.WriteString("metrics=")
	builder.WriteString(fmt.Sprintf("%v", xc.Metrics))
	builder.WriteString(", ")
	builder.WriteString("observatory=")
	builder.WriteString(fmt.Sprintf("%v", xc.Observatory))
	builder.WriteString(", ")
	builder.WriteString("burst_observatory=")
	builder.WriteString(fmt.Sprintf("%v", xc.BurstObservatory))
	builder.WriteString(", ")
	builder.WriteString("services=")
	builder.WriteString(fmt.Sprintf("%v", xc.Services))
	builder.WriteByte(')')
	return builder.String()
}

// XrayConfigs is a parsable slice of XrayConfig.
type XrayConfigs []*XrayConfig
